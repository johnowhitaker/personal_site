<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>johnowhitaker.dev</title>
<link>https://johnowhitaker.dev/</link>
<atom:link href="https://johnowhitaker.dev/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.9.0</generator>
<lastBuildDate>Fri, 12 Sep 2025 00:00:00 GMT</lastBuildDate>
<item>
  <title>What Is Solveit?</title>
  <link>https://johnowhitaker.dev/posts/solveit.html</link>
  <description><![CDATA[ 




<p>At the end of last year, we ran a small course titled “How To Solve It With Code”. We closed signups after a day, and 1000 keen beans joined us for a 10-week deep dive into our general approach to solveing problems. It was taught via the vehicle of the ‘Advent of Code’ programming challenges and run in a new, purpose-built tool called solveit. As the course progressed, we had lots of fun going far beyond the original scope, exploring web development (with FastHTML), AI, business (with Eric Reis as a special guest), writing and more. And the solveit tool became an extremely useful test-bed for ideas around AI-assisted coding, learning and exploration. In the year since, we’ve continued to refine and expand both the process and the tools built in service of said process, and are ramping up for another cohort to share these developments with a wider audience. So, I figure it’s high time I attempt to write down my own version of what ‘the solveit method’ is… :)</p>
<section id="inspiration-from-polya" class="level2">
<h2 class="anchored" data-anchor-id="inspiration-from-polya">Inspiration from Polya</h2>
<p>George Polya was a Hungarian mathematician who wrote the influential book “How to Solve It” in 1945. In it, he shares his philosophies on education (focus on acive learning,heuristic thinking and careful questioning to guide stodents towards discovering answers for themselves) and outlines a four-step problem-solving framework:</p>
<ol type="1">
<li>Understand the Problem: identify what you’re being asked to do; restate the problem</li>
<li>Devise a Plan: draw on similar problems; break down into manageable parts; consider working backward; simplify the problem</li>
<li>Carry Out the Plan: verify each step</li>
<li>Look Back and Reflect: consider alternatives; extract lessons learned</li>
</ol>
<p>He was focused on mathematics, but as Jeremy and I tried to codify our approach to solveing problems with code, we realized that these ideas translate far beyond maths!</p>
</section>
<section id="application-to-coding-iterative-exploratory-coding-in-notebook-like-environments." class="level2">
<h2 class="anchored" data-anchor-id="application-to-coding-iterative-exploratory-coding-in-notebook-like-environments.">Application to Coding: iterative, exploratory coding in notebook-like environments.</h2>
<p>Let’s consider a quick example. For 2024’s Advent of Code, Day 1’s solution involves comparing two lists, sorted by value (there’s a whole backstory involving elves, which you can <a href="https://adventofcode.com/2024/day/1">read if you like</a>). Let’s imagine we’ve considered the problem, and are now focused on a small sub-task: extracting the first (sorted) list. We start with the sample data provided:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'3 &nbsp; 4</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">4 &nbsp; 3</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">2 &nbsp; 5</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">1 &nbsp; 3</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">3 &nbsp; 9</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">3 &nbsp; 3'</span></span></code></pre></div></div>
<p>Our plan might be:</p>
<ul>
<li>Split into a list of lines</li>
<li>Grab the first number from each line</li>
<li>Sort</li>
</ul>
<p>You could likely write this function in one go. Indeed, if you typed <code># Get a sorted list of the first number from each line</code> your AI auto-complete could likely do the rest. But we’re trying to build a discipline that will serve us on harder tasks that neither humans nor AI can one-shot. So, after thinking through the plan, we begin working on individual steps. We aim to write no more than a few lines of code at a time, with each piece giving some useful output that you can use to <strong>verify</strong> that you’re on the right track:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">lines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.splitlines()</span>
<span id="cb2-2">lines</span>
<span id="cb2-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'3 &nbsp; 4'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'4 &nbsp; 3'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2 &nbsp; 5'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1 &nbsp; 3'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'3 &nbsp; 9'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'3 &nbsp; 3'</span>]</span></code></pre></div></div>
<p>Now we build up a list comprehension to get the first elements. We might start with <code>[o for o in lines]</code> and then add bits one at a time, inspecting the output, building up to:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">l1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(o.split()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> lines]</span>
<span id="cb3-2">l1</span>
<span id="cb3-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span></code></pre></div></div>
<p>Now sorting:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(l1)</span>
<span id="cb4-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span></code></pre></div></div>
<p>Now that we’ve run all the pieces individually, and checked that the outputs are what we’d expect, we can stack them together into a function:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_list(x):</span>
<span id="cb5-2">&nbsp; &nbsp; lines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.splitlines()</span>
<span id="cb5-3">&nbsp; &nbsp; l1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(o.split()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> lines]</span>
<span id="cb5-4">&nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(l1)</span>
<span id="cb5-5">get_list(x)</span>
<span id="cb5-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span></code></pre></div></div>
<p>At this point, you’d reflect on the solution, think back to the larger plan, perhaps ask yourself (or ask AI - more on that later) if there are better ways you could do it. You may be thinking that this is far too much work for <code>sorted(int(line.split()[0]) for line in x.splitlines())</code> - as your skill increases you can tailor the level of granularity, but the idea remains the same: working on small pieces of code, checking the outputs, only combining them into larger functions once you’ve tried them individually, and constantly reflecting back on the larger goal.</p>
</section>
<section id="the-power-of-fast-feedback-loops" class="level2">
<h2 class="anchored" data-anchor-id="the-power-of-fast-feedback-loops">The Power of Fast Feedback Loops</h2>
<p>The superpower that this kind of live, iterative coding gives you is near-instant feedback loops. You’re not building your giant app, waiting for the code to upload, clicking through to a website and then checking a debug console for errors - you’re inspecting the output of a chunk of code and seeing if it matches what you expected. It’s still possible to make mistakes and miss edge cases, but it is a LOT easier to catch most mistakes early when you code in this way.</p>
<p>This idea of setting things up so that you get feedback as soon as possible pops up again and again. Our cofounder Eric Ries talks about this in his book ‘The Lean Startup’, where getting feedback from customers is valuable for quick iteration on product or business ideas. Kaggle pros talk about the importance of fast evals - if you can test an idea in 5 minutes, you can try a lot more ideas than you could if each experiment requires 12 hours of model training.</p>
<p>This is one reason many people like ‘Test Driven Development’ - where carefully written tests check for expected behaviour. The answer.ai style of notebook-driven development just uses a mix of “proper” tests (e.g.&nbsp;asserts thoughout the notebooks that check things formally) and the human-based sanity checks based on inspecting outputs as we go.</p>
</section>
<section id="ai-shared-context-is-key" class="level2">
<h2 class="anchored" data-anchor-id="ai-shared-context-is-key">AI: Shared Context is Key</h2>
<p>So far so good - sounds like we’re describing the style of exploratory/literate programming taught in the fast.ai course, and used with tools like NBDev. Aren’t we in a new era though? Where is the AI?!</p>
<p>Well, it turns out that by building code in this way, with planning, notes and tests mixed in with the source code, you’re also building the perfect context for an AI to help with the code too. Solveit can see everything you can see. This means great contextual auto-complete, and solid answers to any questions you have.</p>
<p>You can also feed it additional context by referencing specific variables, or having it use its built-in search and URL-reading tools. And any python function becomes a tool that you can ask solveit to use, making it easy to give it everything it needs to fetch more context or take “agentic” actions to give better responses.</p>
<p>TODO: note on shell-sage?</p>
</section>
<section id="ai-dialog-engineering-keeps-context-useful" class="level2">
<h2 class="anchored" data-anchor-id="ai-dialog-engineering-keeps-context-useful">AI: Dialog Engineering Keeps Context Useful</h2>
<p>One issue with current chat-based models is that once they go off the rails, it’s hard to get back on track. The model is now modelling a language sequence that involves the AI making mistakes - and more mistakes are likely to follow! Because solveit dialogs are fluid and editable, it’s much easier to go back and edit/remove dead ends or unrelated explorations. You can even edit past AI responses, to steer it into the kinds of behaviour you’d prefer. Combine this with the ability to easily hide messages from the AI or to pin messages to keep them in context even as the dialog grows beyond the context window and starts to be truncated, and you have a recipe for continued AI helpfullness as time goes on.</p>
<p>Of course, this is all useful for humans too! The discipline of keeping things tidy, using (collapsible) headings to organise sections, writing notes on what you’re doing or aiming for, and even past questions+answers with the AI all make it a pleasure to pick back up old work.</p>
</section>
<section id="ai-collaboration-not-replacement" class="level2">
<h2 class="anchored" data-anchor-id="ai-collaboration-not-replacement">AI: Collaboration not Replacement</h2>
<p>One thing is still (intentionally) hard in solveit though, and that is getting the AI to actually write all your code in a hands-off way. We’ve made various choices to gently push towards the human remaining in control:</p>
<ul>
<li>Defaults to code inputs</li>
<li>AI outputs code in fenced blocks, but these are not added to your code or run until you choose to do so. There are shortcuts to add them, but this extra sterp encourages you to read + refactor before mindlessly running</li>
<li>In ‘Learning’ mode especially, the AI will gently guide you to writing small steps rather than providing a big chunk of code, unless you really specifically ask it to do so.</li>
<li>In ‘Learning’ mode, the AI ‘ghost text’ auto-complete suggestions don’t show unlesss you trigger them with a keyboard shortcut.</li>
</ul>
<p>Even the choice to have the editor be fairly small and down at the bottom emphasizes that this is a REPL/dialog, optimised for building small, understandable pieces.</p>
</section>
<section id="learning-trajectory-getting-more-powerful" class="level2">
<h2 class="anchored" data-anchor-id="learning-trajectory-getting-more-powerful">Learning Trajectory (Getting More Powerful)</h2>
<p>This brings us to another foundational piece of the solveit approach: a learning ,mindset. It’s great that we can ask AI to fill in the gaps of our knowledge, or to save some time with fiddly pieces like matplotlib plots or library-specific boilerplate. But when the AI suggests something you don’t know, it is important not to skip it and move on - otherwise that new piece will never be something you learn!</p>
<p>We try to build the discipline to stop and explore anytime something like this comes up. Fortunately, it’s really easy to do this - you can add new messages trying out whatever new thing the AI has shown you, asking how it works, getting demo code, and poking it until you’re satisfied. And then the eveidence of that side-quest can be collapsed below a heading (for later ref) or deleted, leaving you back in the main flow but with a new piece of knowledge in your brain.</p>
<p><img src="https://johnowhitaker.dev/posts/images/vc_vs_solveit.png" class="img-fluid"></p>
<p>Earlier this year, I sketched out some doodles trying to think through whether we should be teaching this way. What if AI keeps getting better and better, to the point where there’s little point for the average person actually learning to master any of these skills? If you assume your coding skills stay static, and imagine the AI continuing to get better, you may feel kinda bleak. The thing is, skill doesn’t have to be static! And as both you and the AI you’re carefully using get better, you will learn faster and be able to accomplish more and more.</p>
</section>
<section id="mastery-requires-deliberate-practice-wip" class="level2">
<h2 class="anchored" data-anchor-id="mastery-requires-deliberate-practice-wip">Mastery Requires Deliberate Practice (WIP)</h2>
<p>This is all hard work! It’s like exercise, or practicing a musical instrument. And like any pursuit of mastery, I don’t know that it’s for everyone. But it is satisfying…</p>
</section>
<section id="long-term-software-creation-vibe-coded-demos-wip" class="level2">
<h2 class="anchored" data-anchor-id="long-term-software-creation-vibe-coded-demos-wip">Long-Term Software Creation != Vibe-Coded Demos (WIP)</h2>
<p>I’ve done lots of small projects. Big projects, new to me, different options. AAI’s unusual approach: carefully construct a substrate that allows you to fit ~anything into your head, improving it over time. Accept no slop!</p>
</section>
<section id="so-you-hate-vibe-coding" class="level2">
<h2 class="anchored" data-anchor-id="so-you-hate-vibe-coding">So you hate vibe-coding?</h2>
<p>No :) I love it, <strong>for <a href="https://johnowhitaker.dev/posts/vc_wins.html">some things</a></strong>. There is much more software that I want written than I have time to write. There are some things I don’t much care to learn about, but still need to code for. There are many, many new options for non-coders now, thanks to the ability to conjure up bespoke software from vague descriptions. We’re just not fans of it when it comes to software that matters, and don’t think it replaces the learning value of truly working at programming as a craft.</p>
</section>
<section id="ok-where-can-i-use-solveit" class="level2">
<h2 class="anchored" data-anchor-id="ok-where-can-i-use-solveit">OK, where can I use solveit</h2>
<p>We’re running another course soon, which will be $400. I appreciate this is spendy. That will let us test some scaling and features, and work with another cohort to build the solveit skill. Once that’s done, we’re hoping to open it up on a usage-based billing system. I can’t wait for it to be available to everyone! Please be patient - I think it’ll be worth the wait :)</p>
</section>
<section id="conclusions" class="level2">
<h2 class="anchored" data-anchor-id="conclusions">Conclusions</h2>
<p>There we go - some musings on the solveit approach. There’s a ton more to the app - web magic with FastHTML, meta-programming by giving the AI tools to modify the dialog and itself, lots of tricks we’ve developed for getting the most out of AI… but the important thing is the mindset, and it’s one which you can almost equally practice in any jupyter notebook.</p>
<p>I still have <a href="https://johnowhitaker.dev/essays/future-ai.html">wide error bars</a> on the future of AI and coding, but no matter how that goes, I’m glad I get to work on getting better at something I enjoy for now :)</p>
<p>I hope you’ve enjoyed this rambly post! I’d love to hear your thoughts! Stay tuned for info on the new course shortly (I’ll link here when we announce it). Cheers - J</p>


</section>

 ]]></description>
  <category>  - &quot;solveit&quot;</category>
  <guid>https://johnowhitaker.dev/posts/solveit.html</guid>
  <pubDate>Fri, 12 Sep 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Jet-Nemotron, Gated DeltaNet, and the slow triumph of hybrid models</title>
  <link>https://johnowhitaker.dev/posts/jet-nemotron.html</link>
  <description><![CDATA[ 




<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/vNzuV5GboEw" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<p>Jet Nemotron paper: https://www.arxiv.org/abs/2508.15884 Gated Delta Networks: https://arxiv.org/abs/2412.06464 The review of hybrid linear attention variants we didn’t really chat about: https://arxiv.org/abs/2507.06457 Qwen 3 Next: https://qwen.ai/blog?id=4074cca80393150c248e508aa62983f9cb7d27cd&amp;from=research.latest-advancements-list</p>
<p>A few days after the video came the official Qwen 3 Next announcement, scaling Gated Delta-Net hybrid models up a bunch (and achiving high sparsity in their MoE too) - hooray for more efficient models! Hope it’s interesting.</p>



 ]]></description>
  <category>Video</category>
  <guid>https://johnowhitaker.dev/posts/jet-nemotron.html</guid>
  <pubDate>Tue, 09 Sep 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Counting Incomplete Cubes</title>
  <link>https://johnowhitaker.dev/posts/cubes.html</link>
  <description><![CDATA[ 




<p>I found a <a href="https://www.youtube.com/watch?v=_BrFKp-U8GI">lovely video</a> on Sol LeWitt’s “Variations of Incomplete Open Cubes” (1974):</p>
<p><img src="https://collectionapi.metmuseum.org/api/collection/v1/iiif/691091/preview.png" class="img-fluid"></p>
<p>It mentioned that the artist couldn’t figure out how to get the set sans rotational invariance apart from making them and looking at them - I paused the video to see if I could figure it out :) The result is this (lightly edited) solveit dialog.</p>
<section id="initial-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="initial-thoughts">Initial thoughts</h2>
<p>How many ‘incomplete cubes’ are there?</p>
<p>Number the 12 sides of a cube 1-12.</p>
<p>A cube with some sides missing can be a binary number, 0-4095.</p>
<p>Figure out how bits re-map to rotate in each of 3 axes</p>
<p>Eliminate rotational matches</p>
<p>My doodles to accompany this code:</p>
<p><img src="https://johnowhitaker.dev/posts/images/cubes_doodle.png" class="img-fluid"></p>
</section>
<section id="implementing-rotation" class="level2">
<h2 class="anchored" data-anchor-id="implementing-rotation">Implementing rotation</h2>
<p>From looking at my drawing, here’s how sides map through three different axes of rotation:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">r1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>}</span>
<span id="cb1-2">r2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>}</span>
<span id="cb1-3">r3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>}</span></code></pre></div></div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check we typed that right</span></span>
<span id="cb2-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i,r <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>([r1,r2,r3], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(r.keys()) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>)) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(r.values()) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>)), <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"r</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> not 1-12"</span></span></code></pre></div></div>
<p>We can rotate a cube (represented by a number, with 12 bits corresponding to the 12 sides) like so:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> rotate(c, r): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span>(r[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span>i))</span>
<span id="cb3-2">rotate(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>, r1)</span>
<span id="cb3-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span></code></pre></div></div>
<p>Sanity check (see doodle):</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"17: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:012b}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"6:  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:012b}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0000000</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">10001</span></span>
<span id="cb4-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>:  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">000000000</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">110</span></span></code></pre></div></div>
<p>So, how can we prune cubes that are rotated copies of other cubes? Here’s what I came up with:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> prune(c, parent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb5-2">    rots <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [rotate(c, r) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> r <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [r1, r2, r3]] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get those that are one rot away</span></span>
<span id="cb5-3">    rots <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>([x <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> rots <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> candidates <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> parent]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter</span></span>
<span id="cb5-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> rots: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If there are any, remove them from candidates but first also prune their children</span></span>
<span id="cb5-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> r <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> rots: candidates.remove(r)</span>
<span id="cb5-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(prune(r, parent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>parent <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> c)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> r <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> rots)</span>
<span id="cb5-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>: <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span></code></pre></div></div>
<p>In retrospect we could also have just coded all 24 rotations but this works and I like it :)</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">candidates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4096</span>))</span>
<span id="cb6-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4096</span>):</span>
<span id="cb6-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> candidates: prune(i, parent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>i)</span>
<span id="cb6-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(candidates)</span>
<span id="cb6-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">218</span></span></code></pre></div></div>
<section id="prompt" class="level5">
<h5 class="anchored" data-anchor-id="prompt">Prompt:</h5>
<p>Search and think - tell me if I’m correct that there are 218 incomplete cubes when you eliminate rotations, including the full cube and the empty cube. If I’m wrong don’t tell me the correct answer!</p>
</section>
<section id="reply" class="level5">
<h5 class="anchored" data-anchor-id="reply">🤖Reply🤖</h5>
<p>Looking at your code and the search results, I can see you’re working on a classic problem in combinatorics - counting distinct “incomplete cubes” where you consider cube edges as a binary pattern (present/absent) and eliminate rotational equivalences.</p>
<p>From the search results, I can confirm that a cube has 24 rotational symmetries <sup>1</sup>, and Pólya enumeration theorem is used to analyze the action of each of the 24 elements <sup>2</sup> on various cube structures.</p>
<p>Your approach looks mathematically sound:</p>
<ol type="1">
<li>You represent each “incomplete cube” as a binary number (0-4095) where each bit represents whether an edge is present</li>
<li>You define rotation mappings <code>r1</code>, <code>r2</code>, <code>r3</code> for the three axes</li>
<li>You use a pruning algorithm to eliminate rotational duplicates</li>
</ol>
<p>The key insight is that you’re applying Burnside’s lemma (which underlies Pólya enumeration) by identifying and removing configurations that are equivalent under the 24-element rotation group of the cube.</p>
<p>Your result of <strong>218 distinct incomplete cubes</strong> appears to be correct based on your systematic approach to: - Starting with all 4096 possible binary patterns (2^12 edges) - Systematically removing rotational equivalents using your rotation mappings - Including both the empty cube (0) and full cube (4095) in the count</p>
<p>The mathematics checks out, and your implementation correctly handles the rotational group action on the edge set.</p>
</section>
<section id="end-of-reply" class="level5">
<h5 class="anchored" data-anchor-id="end-of-reply">🤖End of Reply🤖</h5>
<p>Good old George Pólya, what a happy coincidence :) For those who don’t know, our ‘How to solve it with code’ is inspired by Polya’s book!</p>
</section>
</section>
<section id="eliminating-not-really-cubes" class="level1">
<h1>Eliminating “Not-Really-Cubes”</h1>
<p>Now we want things where:</p>
<ul>
<li>All edges touch</li>
<li>3D</li>
</ul>
<p>Let’s start by didtching the complete and empty cubes:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">candidates.remove(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb7-2">candidates.remove(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4095</span>)</span></code></pre></div></div>
<section id="flat-ones" class="level2">
<h2 class="anchored" data-anchor-id="flat-ones">Flat ones</h2>
<p>Any in a single plane. Before we run this, think how many you expect there to be!</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">planes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [{<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>},{<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>},{<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>},{<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>},{<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>},{<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>}]</span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Count to check there are two of each num (sanity check)</span></span>
<span id="cb8-4">combined <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>([<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(p) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> planes], [])</span>
<span id="cb8-5">[combined.count(i) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>)]</span>
<span id="cb8-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span></code></pre></div></div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> is_2D(c):</span>
<span id="cb9-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> planes: </span>
<span id="cb9-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span>i)).issubset(p): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb9-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb9-5"></span>
<span id="cb9-6">flats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [c <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> candidates <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> is_2D(c)]</span>
<span id="cb9-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(flats) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Makes sense - 1-4 sides plus opposites</span></span>
<span id="cb9-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span></code></pre></div></div>
<p>OK, let’s remove them:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Eliminate 2D ones</span></span>
<span id="cb10-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> flats: candidates.remove(c)</span>
<span id="cb10-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(candidates)</span>
<span id="cb10-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">211</span></span></code></pre></div></div>
<section id="disconnected-ones" class="level3">
<h3 class="anchored" data-anchor-id="disconnected-ones">Disconnected ones</h3>
<p>Done with visual reference to my diagram.</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">touching <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb11-2">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:{<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>},</span>
<span id="cb11-3">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:{<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>},</span>
<span id="cb11-4">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:{<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>},</span>
<span id="cb11-5">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:{<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>},</span>
<span id="cb11-6">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>:{<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>},</span>
<span id="cb11-7">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>:{<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>},</span>
<span id="cb11-8">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>:{<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>},</span>
<span id="cb11-9">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>:{<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>},</span>
<span id="cb11-10">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>:{<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>},</span>
<span id="cb11-11">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>:{<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>},</span>
<span id="cb11-12">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>:{<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>},</span>
<span id="cb11-13">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>:{<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>}</span>
<span id="cb11-14">}</span></code></pre></div></div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sanity check</span></span>
<span id="cb12-2">combined <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>([<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(p) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> touching.values()], [])</span>
<span id="cb12-3">[combined.count(i) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>)]</span>
<span id="cb12-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span></code></pre></div></div>
<p>I can see how I could make <code>touching</code> with the base case plus a bunch of rotations but I’ll go with it for now.</p>
<p>Next step: pick an edge: keep track of those touching, and the ones touching those, and … then check you’ve hit all the edges</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> all_touching(c):</span>
<span id="cb13-2">    edges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span>i)]</span>
<span id="cb13-3">    seen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>([edges[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]])</span>
<span id="cb13-4">    stack <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [edges[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]]</span>
<span id="cb13-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> stack:</span>
<span id="cb13-6">        current <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stack.pop()</span>
<span id="cb13-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> neighbor <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> touching[current]:</span>
<span id="cb13-8">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> neighbor <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> edges <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> neighbor <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> seen:</span>
<span id="cb13-9">                seen.add(neighbor)</span>
<span id="cb13-10">                stack.append(neighbor)</span>
<span id="cb13-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> seen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(edges)</span>
<span id="cb13-12"></span>
<span id="cb13-13">valid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [c <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> candidates <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> all_touching(c)]</span>
<span id="cb13-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(valid)</span>
<span id="cb13-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">122</span></span></code></pre></div></div>
<p>My first thought was something like this, which gives the same answer.</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> all_touching_brute_force(c):</span>
<span id="cb14-2">    edges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span>i)]</span>
<span id="cb14-3">    seen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>([edges[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]])</span>
<span id="cb14-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>):</span>
<span id="cb14-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> edge <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(seen):</span>
<span id="cb14-6">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> touching[edge]:</span>
<span id="cb14-7">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> edges: seen.add(n)</span>
<span id="cb14-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> seen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(edges)</span></code></pre></div></div>
<section id="prompt-1" class="level5">
<h5 class="anchored" data-anchor-id="prompt-1">Prompt</h5>
<p>What do you think of the brute force approach? I thought I could do it in 3 hops, but needed 6 to get the same answer as the DFS… Any ideas what I got wrong?</p>
</section>
<section id="reply-1" class="level5">
<h5 class="anchored" data-anchor-id="reply-1">🤖Reply🤖</h5>
<p>Looking at the search results, I can see that the longest distance between vertices on a 3-dimensional cube is 3 edges <sup>3</sup> <sup>4</sup>. This is the diameter of the cube graph.</p>
<p>Your intuition about 3 hops was actually correct! The issue is likely that your brute force approach wasn’t quite right. In a cube graph, to travel from one corner to the corner directly opposite, you need to traverse three edges along the cube’s surfaces <sup>5</sup>.</p>
<p>The reason you needed 6 iterations in your brute force might be because you were expanding the reachable set one edge at a time, but not all edges can be reached in exactly 3 hops from every starting edge. Some edge pairs might need the full diameter distance to connect.</p>
<p>Your DFS approach is more robust because it finds the actual connected components, while the fixed-iteration approach assumes a specific maximum distance that might not apply to all edge configurations.</p>
<p>What do you think - does this make sense for why you needed more iterations than expected?</p>
</section>
<section id="end-of-reply-1" class="level5">
<h5 class="anchored" data-anchor-id="end-of-reply-1">🤖End of Reply🤖</h5>
<p>Oooh I figured you could reach any edge from any other edge in max 3, but that’s for a full cube! For our partial cubes we can be forced to take a longer route.</p>
<p>OK, and time to look up the correct answer: 122! Yay :)</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">incomplete_cubes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  [c <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> candidates <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> all_touching(c)]</span>
<span id="cb15-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(incomplete_cubes)</span></code></pre></div></div>
<pre><code>[19, 22, 23, 25, 27, 29, 30, 31, 55, 59, 61, 62, 63, 86, 87, 91, 95, 118, 119, 123, 125, 126, 127, 247, 255, 285, 286, 287, 315, 317, 318, 319, 342, 343, 345, 347, 349, 350, 351, 375, 379, 381, 382, 383, 391, 399, 414, 415, 423, 428, 429, 430, 431, 439, 444, 445, 446, 447, 455, 459, 463, 470, 471, 478, 479, 487, 491, 493, 494, 495, 502, 503, 506, 507, 508, 509, 510, 511, 861, 862, 863, 875, 877, 879, 893, 895, 940, 941, 943, 959, 967, 974, 975, 990, 991, 997, 999, 1002, 1003, 1005, 1006, 1007, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1527, 1530, 1531, 1535, 2014, 2015, 2027, 2031, 2045, 2047]</code></pre>
<p>At this point I switched to standard mode and had it make the matplotlib code for me :D That and some tangential chit-chat removed for brevity, the raw dialog is <a href="https://gist.github.com/johnowhitaker/b6f4ecd87efed2d98b2adc2a4487385b">here</a></p>
</section>
</section>
</section>
<section id="final-result" class="level2">
<h2 class="anchored" data-anchor-id="final-result">FInal result:</h2>
<p><img src="https://johnowhitaker.dev/posts/images/cubes_result.png" class="img-fluid"></p>


</section>
</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>https://brainly.com/question/50225314 “The longest distance between vertices on a 3-dimensional cube is 3 edges, which corresponds to 3 units if we consider the edges to be unit lengths.”↩︎</p></li>
<li id="fn2"><p>https://brainly.com/question/50225314 “The longest distance between vertices on a 3-dimensional cube is 3 edges, which corresponds to 3 units if we consider the edges to be unit lengths.”↩︎</p></li>
<li id="fn3"><p>https://brainly.com/question/50225314 “The longest distance between vertices on a 3-dimensional cube is 3 edges, which corresponds to 3 units if we consider the edges to be unit lengths.”↩︎</p></li>
<li id="fn4"><p>https://brainly.com/question/50225314 “The longest distance between vertices on a 3-dimensional cube is 3 edges, which corresponds to 3 units if we consider the edges to be unit lengths.”↩︎</p></li>
<li id="fn5"><p>https://brainly.com/question/50225314 “If you were to travel from one corner of the cube to the corner directly opposite, you would need to traverse three edges along the cube’s surfaces. F…”↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>blogs</category>
  <category>solveit</category>
  <guid>https://johnowhitaker.dev/posts/cubes.html</guid>
  <pubDate>Mon, 08 Sep 2025 00:00:00 GMT</pubDate>
  <media:content url="https://johnowhitaker.dev/posts/images/cubes_result.png" medium="image" type="image/png" height="142" width="144"/>
</item>
<item>
  <title>‘Diffusion Beats Autoregressive in Data-Constrained Settings’ - Paper read + a win for open review</title>
  <link>https://johnowhitaker.dev/misc/dllm_learn.html</link>
  <description><![CDATA[ 




<section id="diffusion-beats-autoregressive-in-data-constrained-settings---paper-read-a-win-for-open-review" class="level3">
<h3 class="anchored" data-anchor-id="diffusion-beats-autoregressive-in-data-constrained-settings---paper-read-a-win-for-open-review">‘Diffusion Beats Autoregressive in Data-Constrained Settings’ - Paper read + a win for open review</h3>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/jgLOsT4EwAQ" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<p>In this video we take a look at the paper ‘Diffusion Beats Autoregressive in Data-Constrained Settings’ (http://arxiv.org/abs/2507.15857) and a great discussion on Twitter that helped push the results + related hypotheses further, to the benefit of all.</p>
<p>After I shared it, some of the authors shared a parallel work that addressed some issues in the original but found the same overall lesson: when data constrained, dLLMs learn better than AR (but only after a lot of compute): https://jinjieni.notion.site/Diffusion-Language-Models-are-Super-Data-Learners-239d8f03a866800ab196e49928c019ac - very much worth checking out as a postscript to the video.</p>
<p>Tweets referenced:</p>
<p>https://x.com/giffmana/status/1947729993607348255 https://x.com/giffmana/status/1949001902970339471 https://x.com/mihirp98/status/1953196510725980173 https://x.com/giffmana/status/1953206125639123188</p>


</section>

 ]]></description>
  <category>Video</category>
  <guid>https://johnowhitaker.dev/misc/dllm_learn.html</guid>
  <pubDate>Thu, 07 Aug 2025 00:00:00 GMT</pubDate>
  <media:content url="https://johnowhitaker.dev/misc/thumbnails/dllm_learn.png" medium="image" type="image/png" height="87" width="144"/>
</item>
<item>
  <title>Duckweed Growth Experiments, or, ‘LLMs as General Optimizers in Science’</title>
  <link>https://johnowhitaker.dev/posts/dwebench.html</link>
  <description><![CDATA[ 




<p>My friend REDACTED is a scientist at SCIENCECO who are working with some people from BIGLAB to explore using AI models to optimise PROCESS using SCIENCECO’s epic technology for automating experiments in FIELD. We’ve had some fascinating conversations about where AI for science is now, and where it could go in the near future. To explore some of these ideas, let me share my own experiment that I’ve been running over the past few weeks, which is a lot easier to talk about without getting anyone in trouble ;)</p>
<section id="the-experiment" class="level2">
<h2 class="anchored" data-anchor-id="the-experiment">The Experiment</h2>
<p>Inspired by <a href="https://x.com/ATinyGreenCell/status/1938362004240019899">a tweet</a> from legendary amateur biologist Sebastian Cocioba, I had grabbed some duckweed (<em>Lemna minor</em>) from a nearby pond on a whim. The goal of this experiment is to figure out a good growing strategy for it. Or, more specifically, to see if o3 can figure out a good recipe, with me essentially acting as a meat robot to implement its chosen protocols. Here’s <a href="https://chatgpt.com/share/688f729c-b224-8010-9c0d-fd41eaff8cc6">my chat</a> where I laid out the setup and had it set conditions for the experimental runs.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/posts/images/dwebench1.png" class="img-fluid figure-img"></p>
<figcaption>5 tubs with different conditions, after a few days of growth</figcaption>
</figure>
</div>
<p>The setup involves 5 tubs, each of which will be started with 30 fronds of duckweed in 50ml of water with various nutrients added. I have a hydroponic mix (‘Maxigrow’) containing Nitrogen, Phosphorus and Potassion (NPK) as well as some micronutrients, some KDP to vary the potassium content, citric acid, baking poweder or pH UP and DOWN solututions, and a couple of other chemicals on hand. I counted the number of fronds in each tub every 2 days for 8 days total. Based on the results from the first run, I had o3 suggest a second set of conditions and ran those too.</p>
<p><img src="https://johnowhitaker.dev/posts/images/dwebench_counter.png" class="img-fluid"></p>
<p>I manually counted the fronds for most of the experiment, but to combat COVID brain fog I had Claude make me <a href="https://claude.ai/public/artifacts/2ca3e089-9a2d-436c-b945-61a268848d0c">this artifact</a> that I could use to count them more reliably from a photo instead for the final results.</p>
<p>To make it easy to mix up the various recipes, I made three stock solutions: S1 (5g/L MaxiGro), S2 (5g/L KDP) and S3 (5g/L baking soda).</p>
</section>
<section id="the-results" class="level2">
<h2 class="anchored" data-anchor-id="the-results">The Results</h2>
<p>The recipe that did best was 6ml S1 + 44 ml tap water (i.e.&nbsp;600mg/L MaxiGro), achieving a doubling time of 3.5 days. This fast growth is what makes duckweed great for this kind of experiment :) This ideal level is quite a bit less than the recommended concentration of this hydroponic nutrient for general use - which makes sense given what I’ve read about duckweed’s preferences. Dropping to even lower nutrient concentrations gave less growth, with clear loss of color in the smallest few cases. Going too high also caused trouble, with bleached leaves (‘chlorosis’) and less growth too. This recipe was top in both the first and second runs (it was kept in the second as a baseline).</p>
<p><img src="https://johnowhitaker.dev/posts/images/dwebench_results.png" class="img-fluid"></p>
<p>Overall, I’d say I’m pretty impressed. Sure, I could have done this just fine without AI, but it’s cool that we can tap into something that can skim the literature at lightning speed and take advantage of tons of scientific training data to give us reasonable starting points for experiments like these.</p>
</section>
<section id="hmm-thats-weird" class="level2">
<h2 class="anchored" data-anchor-id="hmm-thats-weird">“Hmm, That’s Weird”</h2>
<p>One of the tubs in the second run developed a thin, shiny film almost like an oil slick, likely caused by bacterial growth. Would an AI-only system have ‘noticed’ this? Or would it have been stuck with a potential confounder invisible to it if all it could see was the proposed inputs and the final output counts…</p>
<p><img src="https://johnowhitaker.dev/posts/images/dwebench2.png" class="img-fluid"></p>
<p>A lot of science can be done by just ‘following the recipe’, but many of the greatest discoveries come from something not going to plan - with a human there, filled with experience, to notice and go “hmm, that’s weird”. Hmm, that’s weird, my bacteria died where that mold is growing. Hmm, that’s weird, my photography film is getting foggy near my uranium salts. Hmm, that’s weird, …</p>
<p>Even when you’re not hoping for crazy breakthroughs like these, there are so many places where this instinct comes in when doing biology. Hmm, that’s weird, these cultures smells funny. Hmm, that’s weird, there’s a precipitate in some of the wells, maybe the tirzepatide isn’t soluble enough in this solvent mix. Hmm, that’s weird, it’s gone all <strong>goopy</strong>. This is the thing REDACTED keeps on emphasizing to me - there is sooooo much knowledge that isn’t necessarily written down when it comes to frontier science, so much practice required to build the instinct for the ‘hmm, weird’ moments that comes from time at the bench, not from textbooks. At least for now, it’s hard to see how current training methods could instil these things into an AI[1].</p>
</section>
<section id="so-what-did-we-learn" class="level2">
<h2 class="anchored" data-anchor-id="so-what-did-we-learn">So What Did We Learn?</h2>
<p>I think one headline takeaway here is something like the following: <strong>Fancy AI models can boost performance of systems given knobs to tweak, by making reasonable initial guesses and iterating from feedback.</strong> I have no doubt we’ll see lots of results along these lines in the next few years - AI systems beating human baselines on everything from chip design to protein synthesis, using RL or just smart application of reasoning models + tools for automated or semi-automated experiments. <strong>BUT</strong> I think it’s premature to ignore the ideas of curiosity and suprise that run as a continuous thread through the history of science. If we’re only ever chasing an outcome we’ve planned and measured in advance, then we’re missing out on so much[2]. To me, the more exciting way to view it is something like this: <strong>Every enthusiastic amateur now has a capable and knowledgeable ‘advisor’ on hand, and as long as we keep up the curiosity and invest in our own learning, I think the human+ai combo has the potential to enable all sorts of cool science in the years to come.</strong></p>
<p>Footnotes:</p>
<p>[1] - Although it’s interesting to think about how this could change. Imitation learning like the pre-training/SFT paradigm seems like a poor way to learn to pick up any kind of insight like this. But with RL tasks getting longer and more complex, I can begin to see how we might start to get ‘micro’ insights despite only training for a specified outcome. “[code] now pass [test]” leads to “hmm, that’s weird, I’d expect the output to be 0 in all cases”. Perhaps long + general enough RL can reward true curiosty + exporation, just as long evolution towards the ‘reproduce’ outcome eventually led to clever stone knapping and modern civilization shortly thereafter. I remain <a href="https://johnowhitaker.dev/essays/future-ai.html">uncertain</a> :)</p>
<p>[2] - I went and bought ‘Why Greatness Cannot Be Planned: The Myth of the Objective’ after I typed this - by all accounts it’s a fantastic book on this subject that I’ve been meaning to get to for a while, stay tuned for a review to land on my <a href="https://johnowhitaker.dev/books.html">books</a> page soon :)</p>


</section>

 ]]></description>
  <category>misc</category>
  <guid>https://johnowhitaker.dev/posts/dwebench.html</guid>
  <pubDate>Sun, 03 Aug 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Mapping Smells, Gamifying Family Trips, Playing ARC-AGI-3 like an LLM… (Vibe Coding Wins)</title>
  <link>https://johnowhitaker.dev/posts/vc_wins.html</link>
  <description><![CDATA[ 




<p>It’s still nice to <strong>know</strong> your code. To carefully review anything your AI helpers do. To dig in and learn, and build familiarity with a chosen stack… but with all of that said, the set of ‘pieces of software I want to exist’ is a lot larger larger than the ‘pieces of software I want to carefully code’ one! I love that we can now whip up custom software on demand just by speaking our requirements in plan language (and then maybe giving a little guidance along the way). In this post I want to feature a few recent results that I particularly enjoyed making/using, a celebration of the kind of things vibe coding is currently a perfect match for. In a future post I will probably wax equally lyrical about how terrible it is if you <em>only</em> do this though, so stay tuned for that ;)</p>
<section id="portland-pursuit" class="level3">
<h3 class="anchored" data-anchor-id="portland-pursuit">Portland Pursuit</h3>
<p>My family visited us in the US for the first time in May/June this year. To help them quest-max on their visits, I made <a href="https://johnowhitaker.github.io/portland_pursuit/">Portland Pursuit</a> - with lots of achievements for them to tick off while they were here. The app (<a href="https://github.com/johnowhitaker/portland_pursuit">code</a>) is written in html/javascript, hosted on GitHub pages, and set up as a Progressive Web App (PWA) which let my family ‘install’ it to their phone home screens - important for non-techy parents. For years this has been my goto approach for making app-like things without having to go through the mobile app store nonsense, and I’m not sure why it’s not more popular!</p>
<p><img src="https://johnowhitaker.dev/posts/images/portland_pursuit.png" class="img-fluid"></p>
<p>The app was a huge success - they all got most of the available points, and it definitely encouraged a few extra exploratory walks towards the end of the trip as they vied for first place :) Writing it was fun and easy, and it was a nice test-bed for a few different tools I was testing at the time to see how well they did modifying it when I wanted to add new tasks and so on. Perfect vibe-coding story: simple app, human ideas, minimal time wasted fighting config or hosting settings, a few happy customers. 10/10 :)</p>
</section>
<section id="fragrance-explorer" class="level3">
<h3 class="anchored" data-anchor-id="fragrance-explorer">Fragrance Explorer</h3>
<p>This past weekend I stumbled upon Gwern’s <a href="https://gwern.net/blog/2025/perfume">blog post on avant-garde perfumes</a>. And then while out on a walk I stumbled upon <a href="https://fumerie.com/">Fumerie</a>, a Parfumerie close to where I live. The folks behind the counter were incredibly friendly, chatting for ages about their art and showing me some wild smells. (Maybe too many - my wife kept her distance from me for the rest of the day). One thing that came through in our discussion was how personal fragrance is to them, with everyone reacting to specific smells differently. Even mentioning that I’d read about a specific fragrance had them tut-tutting - online marketing descriptions != the experience, it seems!</p>
<p><img src="https://johnowhitaker.dev/posts/images/frag_search.png" class="img-fluid"></p>
<p>Still, I did find the online descriptions amusing, and I wanted to get a better sense of the ‘map of smells’ availalbe, so when I got home I scraped <a href="https://gist.github.com/johnowhitaker/6fef140a3a47aa1ea049a8562270b0bf">hundreds of fragrance descriptions</a> and had Replit’s Agent whip up an embedding explorer. You can search with natural language, but the real fun is making custom scatter plots with silly axes:</p>
<p><img src="https://johnowhitaker.dev/posts/images/frag_plot.png" class="img-fluid"></p>
<p>I showed this to the smell people who agreed that this is <strong>exactly</strong> why they have a job - the text embedding based rankings/scatter plots were based on the marketing points and fragrance notes and were not at all capturing the true essence of the smells. I agree - but still find this fun :) I did the scraping and embedding carefully in a notebook-like environment, then realized I shouldn’t spend &gt;1hr on this, so threw the embeddings and data at replit to make a streamlit frontent. It’s janky and glitchy and annoying but it was instantly shareable and took very little effort - vibe coding win, but I think I could do a lot better without spending much more time. If I cared! Which I don’t! Vibe coding win :)</p>
</section>
<section id="arc-agi-3-play-like-an-llm" class="level3">
<h3 class="anchored" data-anchor-id="arc-agi-3-play-like-an-llm">ARC-AGI-3 (Play like an LLM)</h3>
<p><img src="https://johnowhitaker.dev/posts/images/arcagi.png" class="img-fluid"></p>
<p>I like that the ARC people are coming up with interesting evals - great work! I dislike how much gets read into them, and some of the silly discourse they engender. One aspect is that the way you present the data DOES MATTER! Humans play the games looking at a little pixel grid. AI’s get a list of lists of numbers. “But general intelligence should be able to figure it out…” - OK, then try <a href="https://play-arc-agi-3.replit.app/">my version which has you play the game looking at the raw string data</a>. Yeah - no success from any humans so far, maybe we aren’t general intelligence after all… Code is simple, quick flask app on replit coded by o3. For vibe-coding something that uses an API like this, you need API docs, and theirs are a weird custom thing with lots of JS that none of the coding AI’s can read! (I told them, they’re shifting to something better soon). But in the theme of laziness I was able to get manus to browse and click and extract all the docs with a little help, and then I could paste that markdown into o3 for the implementation. Easy task I can specify well with API docs at hand? Perfect vibe coding starting material, works as intended. Vibe coding win :)</p>
</section>
<section id="commentary-and-conclusions" class="level3">
<h3 class="anchored" data-anchor-id="commentary-and-conclusions">Commentary and Conclusions</h3>
<p>Anthropic said people have made something like ~500 million artifacts with Claude. Lovable just raised $200M. For all that software people like to hate on vibe coding, it’s delightful to me that so many people are getting to create ephemeral, quirky pieces of software to fill some need that they have. In all the examples above, the end result is mediocre at best. There’s no auth, I have ~no users, none of these are the Next Big Thing… BUT they all made me happy, quickly, for free! And I think I’m not the only one. Snarkily asking why there aren’t more giant breakout apps coming in a wave thanks to vibe coding tools is missing the point: there are now hundreds of millions of new pieces of software, each making ~1 person a little happier. And I think that’s great :)</p>


</section>

 ]]></description>
  <category>misc</category>
  <guid>https://johnowhitaker.dev/posts/vc_wins.html</guid>
  <pubDate>Thu, 24 Jul 2025 00:00:00 GMT</pubDate>
  <media:content url="https://johnowhitaker.dev/posts/images/frag_plot.png" medium="image" type="image/png" height="102" width="144"/>
</item>
<item>
  <title>1Hz Dropper</title>
  <link>https://johnowhitaker.dev/mini-hw-projects/dropper.html</link>
  <description><![CDATA[ 




<p>Inspired by the <a href="https://hackaday.io/contest/203248-one-hertz-challenge">Hackaday One Hertz challenge</a>, I used a solenoid scavenged from an old printer to drop dye into water once a second, making for a pretty (if short-lived) time-keeping device. Video of it in action <a href="https://x.com/johnowhitaker/status/1947072110817644573">here</a>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-hw-projects/images/drop1.png" class="img-fluid figure-img"></p>
<figcaption>The setup</figcaption>
</figure>
</div>
<p>The top of the syringe plunger makes a loose seal, and is popped out briefly by a pulse of the solenoid. This let’s a bit of air in, which allows a small drop to form at the bottom of the syringe (with needle removed the hole is perfectly sized for this). The tap and small pressure bump as the plunger top returns to it’s resting position knocks the drop off, giving a perfect* 1Hz drip.</p>
<p>I ‘filmed’ a full syringe worth of beautiful footage - about a minute of fresh ink dropping into clear water, with it all set up in a stand. The alignment was perfect, single drops each time. I went to ‘stop’ the recording and, womp womp, it hadn’t started. I promptly spilled some dye, knocked things over and messed it all up attempting several re-takes before deciding I’m content with the current shorter clip. Each failing tick spewing mess on my bench felt like a metaphor for time passing that I did not enjoy :D</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-hw-projects/images/drop3.png" class="img-fluid figure-img"></p>
<figcaption>a few drops in</figcaption>
</figure>
</div>
<p>Parts used are a Raspberry Pi Pico RP2040 microcontroller in the “Kitronik Simply Robotics Motor Driver Board for Raspberry Pi Pico” board. The code is attached, pulsing the solenoid (connected to the MOTOR_0 output of the board) for a set time each second. Code dumped on the <a href="https://hackaday.io/project/203568-1hz-dropper">hackaday io project</a> (but it’s basically just blinky, one-shotted by o3, plus stolen library code).</p>
<p>Not my finest work in any respect but it was a fun diversion from Sunday tidying.</p>



 ]]></description>
  <category>mini-hw-projects</category>
  <guid>https://johnowhitaker.dev/mini-hw-projects/dropper.html</guid>
  <pubDate>Sun, 20 Jul 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>SVG generation as a microcosm of generative AI research trends</title>
  <link>https://johnowhitaker.dev/misc/svg.html</link>
  <description><![CDATA[ 




<section id="svg-generation-as-a-microcosm-of-generative-ai-research-trends" class="level3">
<h3 class="anchored" data-anchor-id="svg-generation-as-a-microcosm-of-generative-ai-research-trends">SVG generation as a microcosm of generative AI research trends</h3>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/vnD4PlGvOg4" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<p>I noticed that my open tabs told a fun story - one that’s been repeated for various niches in generative AI, and that shows the current trend. Hopefully fun and maybe gives you ideas to apply to some other forgotten niche :)</p>
<p>References: - DIffVG: https://github.com/BachiLi/diffvg - Iconshop: https://icon-shop.github.io/ - OmniSVG: https://omnisvg.github.io/ - Recraft-SVG: https://replicate.com/recraft-ai/recraft-v3-svg - Rendering-Aware Reinforcement Learning for Vector Graphics Generation: https://arxiv.org/abs/2505.20793</p>


</section>

 ]]></description>
  <category>Video</category>
  <guid>https://johnowhitaker.dev/misc/svg.html</guid>
  <pubDate>Fri, 11 Jul 2025 00:00:00 GMT</pubDate>
  <media:content url="https://johnowhitaker.dev/misc/thumbnails/svg.png" medium="image" type="image/png" height="123" width="144"/>
</item>
<item>
  <title>The Diffusion Duality (Paper reading + discussion)</title>
  <link>https://johnowhitaker.dev/misc/dllm2.html</link>
  <description><![CDATA[ 




<section id="the-diffusion-duality-paper-reading-discussion" class="level3">
<h3 class="anchored" data-anchor-id="the-diffusion-duality-paper-reading-discussion">The Diffusion Duality (Paper reading + discussion)</h3>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/o_ISAlSMoJQ" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<p>Hmm, as I recorded this I realize I don’t understand the specifics of this paper - since I can’t explain them well! So apologies for the hand-waviness of this one. I hope it’s still vaguely useful, I might try to make a better one in a bit if I notice too many glaring errors on reflection :) Paper page: https://s-sahoo.com/duo/</p>


</section>

 ]]></description>
  <category>Video</category>
  <guid>https://johnowhitaker.dev/misc/dllm2.html</guid>
  <pubDate>Thu, 19 Jun 2025 00:00:00 GMT</pubDate>
  <media:content url="https://johnowhitaker.dev/misc/thumbnails/dllm2.png" medium="image" type="image/png" height="68" width="144"/>
</item>
<item>
  <title>Diffusion Language Models: Turning ModernBERT into an instruct-tuned Diffusion LLM</title>
  <link>https://johnowhitaker.dev/misc/dllm1.html</link>
  <description><![CDATA[ 




<section id="diffusion-language-models-turning-modernbert-into-an-instruct-tuned-diffusion-llm" class="level3">
<h3 class="anchored" data-anchor-id="diffusion-language-models-turning-modernbert-into-an-instruct-tuned-diffusion-llm">Diffusion Language Models: Turning ModernBERT into an instruct-tuned Diffusion LLM</h3>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/Ds_cTclxV2o" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<p>Inference notebook: https://colab.research.google.com/drive/1hMV0OBpmJL7L5yIEtkeeUz-7rB1buFmg?usp=sharing Training notebook: https://colab.research.google.com/drive/1D82ULU5dUyJKPnj2oUxtfJeWTB1sVds_?usp=sharing Model on HF: https://huggingface.co/johnowhitaker/modernbert-diffusion/blob/main/README.md LLaDA paper (‘Large Language Diffusion Models’): https://arxiv.org/pdf/2502.09992</p>


</section>

 ]]></description>
  <category>Video</category>
  <guid>https://johnowhitaker.dev/misc/dllm1.html</guid>
  <pubDate>Mon, 16 Jun 2025 00:00:00 GMT</pubDate>
  <media:content url="https://johnowhitaker.dev/misc/thumbnails/dllm1.png" medium="image" type="image/png" height="73" width="144"/>
</item>
<item>
  <title>FastHTML App in Claude Code</title>
  <link>https://johnowhitaker.dev/misc/claude_code_fasthtml.html</link>
  <description><![CDATA[ 




<section id="fasthtml-app-in-claude-code" class="level3">
<h3 class="anchored" data-anchor-id="fasthtml-app-in-claude-code">FastHTML App in Claude Code</h3>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/0TkS_Hulyus" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<p>Building out a FastHTML application with Claude code, sharing some tips for finding good context and keeping control. NB: I think I left Claude code set to use Opus - hence the expensive session. Also, since recording this, Isaac (creator of MonsterUI) shared his cursorrules, which are another great ref for providing FastHTML context to AI: https://github.com/ai-evals-course/isaac-fasthtml-workshop/blob/main/.cursor/rules/fasthtml.mdc</p>
<p>Code from this video: https://github.com/johnowhitaker/fasthtml-claude-code-demo</p>


</section>

 ]]></description>
  <category>Video</category>
  <guid>https://johnowhitaker.dev/misc/claude_code_fasthtml.html</guid>
  <pubDate>Tue, 27 May 2025 00:00:00 GMT</pubDate>
  <media:content url="https://johnowhitaker.dev/misc/thumbnails/ccfh.png" medium="image" type="image/png" height="102" width="144"/>
</item>
<item>
  <title>Crystals, Crokinole, Cellular Automata (small updates)</title>
  <link>https://johnowhitaker.dev/posts/ccc.html</link>
  <description><![CDATA[ 




<p>I’ve been kinda busy, and a few small projects have gone undocumented, so I’m sharing stubs here in case I don’t get to them later.</p>
<section id="crystal-growth-shader" class="level3">
<h3 class="anchored" data-anchor-id="crystal-growth-shader">Crystal Growth Shader</h3>
<p><img src="https://johnowhitaker.dev/posts/images/ccc_crystals.png" class="img-fluid"></p>
<p>I made <a href="https://www.shadertoy.com/view/wXSSzK">this shader</a> after thinking how easy it would be to simulate crystal growth, with crystal formation depleting concentration but making it more likely more crystal grows there, and everything represented as channels in an image for shaders. AI-assisted quick prototype came together quickly, and I swapped in the Michel-Levy colors from my <a href="https://www.shadertoy.com/view/Wcf3R8">bubble shader</a> to make the image above. Lots of fun tweaking constants.</p>
<p><img src="https://johnowhitaker.dev/posts/images/ccc_bubbles.png" class="img-fluid"></p>
<p>(THe bubble shader - don’t know if I shared before)</p>
</section>
<section id="travel-crokinole" class="level2">
<h2 class="anchored" data-anchor-id="travel-crokinole">Travel Crokinole</h2>
<p><img src="https://johnowhitaker.dev/posts/images/ccc_crokinole.png" class="img-fluid"></p>
<p>I like Crokinole and so does my friend Jeremy Howard - but when we both travelled to Singapore a normal board wouldn’t fit in my suitcase so I had this travel set cut by the fantastic SendCutSend which bolts together. I tapped holes for bolts to act as the pegs and used cut aluminium disks as the pucks, with some speed powder (basically polenta as far as I can tell) they glide beautifully. With nothing the flat surfaces tend to slow things once there’s no air cushion. I tried magnets as an inductive braking edge barrier but they were too weak - not sad, I now have lots of small magnets which I often need :) The game was a success, I got lots of Answer.AI friends hooked :)</p>
</section>
<section id="ca-on-a-donut" class="level2">
<h2 class="anchored" data-anchor-id="ca-on-a-donut">CA on a donut</h2>
<p><img src="https://johnowhitaker.dev/posts/images/ccc_ca.png" class="img-fluid"></p>
<p>Idle demoscene ThreeJS project while I read a Wolfram article, <a href="https://chatgpt.com/canvas/shared/682e225a55b08191b70e57a1070985c4">here’s the code</a>. Made after playing with a rule with horizontal wrapping and thinking how cool it would look on a torus. modern AI models like o3 are incredible - it got it wrong but then did lots of python playing to figure out what to change!!</p>
</section>
<section id="edison-cylinder-wip" class="level2">
<h2 class="anchored" data-anchor-id="edison-cylinder-wip">Edison cylinder (WIP)</h2>
<p><img src="https://johnowhitaker.dev/posts/images/ccc_edison.png" class="img-fluid"></p>
<p>I bought an edison cylinder for $5 - amazing piece of history. These hold ~2 minutes of audio. I tried various ways of spinning it (pictured is too fast, no pics of most successful) and the closest I got to audio was dragging a reflective thingee with a piece of wire out the edge over the grooves and then bounding a laser off of it, then turning the light intensity into audio with an existing circuit I have lying around, but it doesnt track the grooves well at all. Might not bother, I hoped this was a wax cylinder and the main goal was to make a music-themed candle for my FIL but alas it’s vinyl haha.</p>


</section>

 ]]></description>
  <category>misc</category>
  <guid>https://johnowhitaker.dev/posts/ccc.html</guid>
  <pubDate>Wed, 21 May 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>New Ways to Scale Inference Time Compute of LLMs: Parallel Scaling, Diffusion and More</title>
  <link>https://johnowhitaker.dev/misc/inference_scaling.html</link>
  <description><![CDATA[ 




<section id="new-ways-to-scale-inference-time-compute-of-llms-parallel-scaling-diffusion-and-more" class="level3">
<h3 class="anchored" data-anchor-id="new-ways-to-scale-inference-time-compute-of-llms-parallel-scaling-diffusion-and-more">New Ways to Scale Inference Time Compute of LLMs: Parallel Scaling, Diffusion and More</h3>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/4zuj4BBoR1Y" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<p>Looking at the paper ‘Parallel Scaling Law for Language Models’ (https://arxiv.org/abs/2505.10475) with detours into ‘Large Language Models to Diffusion Finetuning’ as a way to examine these approaches to spending more compute at inference time <em>per token</em> without scaling up the total number of parameters. These research directions complement existing inference-time scaling work like reasoning models (o1/r1).</p>


</section>

 ]]></description>
  <category>Video</category>
  <guid>https://johnowhitaker.dev/misc/inference_scaling.html</guid>
  <pubDate>Fri, 16 May 2025 00:00:00 GMT</pubDate>
  <media:content url="https://johnowhitaker.dev/misc/thumbnails/inference.png" medium="image" type="image/png" height="84" width="144"/>
</item>
<item>
  <title>ICLR 2025</title>
  <link>https://johnowhitaker.dev/posts/ICLR_2025.html</link>
  <description><![CDATA[ 




<p><img src="https://johnowhitaker.dev/posts/images/si.png" class="img-fluid"></p>
<p>I got to attend ICLR 2025 and spend a week in Singapore with my Answer.AI colleagues. This post is some disjointed thoughts on the whole experience.</p>
<section id="social-is-top" class="level2">
<h2 class="anchored" data-anchor-id="social-is-top">Social is top</h2>
<p>The best part of conferences is always meeting people. The venue setup was disappointingly short on affordances for the ‘hallway track’ but Jeremy managed to claim a couch in one of the cafe’s and hold court for various friends old and new :) And of course there were the usual evening dinners + events. This time around though I mostly spent time hanging out with the answer team, heading out to different parts of town for food and coding by the pool. Other hightlights were meeting a collaborator in person for the first time and getting taken out on a hike by a local fast.ai alum who knew all the good spots. If you get a chance to go to one of these conferences, my top recommendation is to focus on meeting friendly people and spending time chatting vs attending talks and things - far more interesting IMO! Poster sessions are a good way to find people with shared research interests. Pretend to be an extrovert - it’s only a few days!</p>
<p>PS, just after I shared this I found these <a href="https://kamathematics.wordpress.com/2025/05/01/tips-on-how-to-connect-at-academic-conferences/">tips on how to connect at academic conferences</a> which are great! Go read that and follow them :)</p>
</section>
<section id="safety-interpretability-are-in-the-air" class="level2">
<h2 class="anchored" data-anchor-id="safety-interpretability-are-in-the-air">Safety + Interpretability are in the air</h2>
<p>I’m trying to think what trends jumped out at me. ‘Agents’ of course, with some interesting stuff and lots of… not haha. The other main trend I noticed was safety/interpretability stuff, with a sense of ‘this is something academics can work on + contribute to without tons of compute’. There was a keynote from an OpenAI person making the case for why it’s important + good to work on even if you <strong>don’t</strong> think AI will soon kill everyone. My friend Stanislav Fort had a fun paper on ‘scaling laws for adversarial attacks’ and as always tons of other neat ideas in progress. Various papers trying to make AIs say naughty things or not say them. And in the airport I met Yoshua Bengio who’d been working very hard trying to convince people it’s a bad idea to be chasing creating smart things with agency. I admire his efforts, and tend to agree that making ‘tool AI’ vs ‘agent AI’ is a good idea! And I liked the way he phrased a take on doomish stuff: “The correct response to [someone asking me about AI2027] is to say that lots of experts agree we can’t casually dismiss it” - in other words, you may think specific takes are wrong or that fears are overblown but ‘nobody takes that seriously’ is not a valid argument. All that said, while I noticed this safety talk around it wasn’t like it was the bulk of the discussion and I’d wager most attendees aren’t thinking much about it.</p>
</section>
<section id="vibe-researching-is-fun" class="level2">
<h2 class="anchored" data-anchor-id="vibe-researching-is-fun">Vibe-Researching is fun</h2>
<p><img src="https://johnowhitaker.dev/posts/images/k_vs_hdim.png" class="img-fluid"></p>
<p>One fun trick I could do at this conference thanks to the latest great models like o3 was whip up quick exploratory demos based on concepts I came across. This is great! Poster sessions and hallway chats often spark ‘it would be cool to compare that to X baseline’, or ‘I want to try this with Y’ - but by the end of a busy conference lots of ideas are forgotten. It was super cool to voice dictate an idea to o3, copy some code into Google Colab and have a minimal toy demo to try out. I did this for a few things that came up, including running one experiment entirely on my phone to make some plots related to a paper I saw, and the ones I did this for are now lodged in my brain enough that I’ll probably follow through on the experiments I want to run now. Wild that someone can say ‘We could probably train a model to go directly from CLIP penultimate hidden states back to an image’ and a few minutes later I can have a toy model training that does just that! The AIs still aren’t excellent for AI research but boy are they better than they used to be - more than enough for simple baselines and getting going quickly. Anyway - vibe research - can recommend!</p>
</section>
<section id="singapore-is-amazing" class="level2">
<h2 class="anchored" data-anchor-id="singapore-is-amazing">Singapore is amazing</h2>
<p>Singapore was delightful to visit. We stayed in ‘Little India’, an easy MRT ride from Chinatown and close to the marina and various parks and things, making it easy to experience a variety of different cuisines and aspects of the city. I loved how pervasive nature was - greenery bursting from any vailable spot, but somehow contained and managed very neatly. The food was particularly good - so many exciting options with nustling hawker centers full of amazing smells and sights. <a href="https://jeadventure.home.blog/2025/04/29/impressions-of-singapore/">This post</a> we sent to our family has more pics and my bird list - ft 36 new ‘lifers’ for me!</p>
</section>
<section id="i-have-the-best-job" class="level2">
<h2 class="anchored" data-anchor-id="i-have-the-best-job">I Have The Best Job</h2>
<p>Answer.ai is fully remote, and this was the first time most of us had met in person. And yet we all got on extremely well, instantly falling into a happy rhythum of exploring and enjoying the city together then returning to the hotel pool area to code, chat and play games. I made a travel ‘crokinole’ board (link coming soon) and introduced the team - hopefully enough got hooked that by next time we meet I’ll have some competition ;) All this already had me feeling grateful, but what really hammered home how cool this company is was answering (and hearing others answer) the repeated question of ‘so what does answer.ai do?’ that came up in conversation with all the new people we met at the conference. I’m so lucky!</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Anyway, there are my jet-lagged ramblings. If we met there, or you wish we’d met there, or you just want to say hi, reach out! I want to cram in more social with fellow AI nerds for a week or two before I settle back to my quiet and introverted default state :)</p>


</section>

 ]]></description>
  <category>misc</category>
  <guid>https://johnowhitaker.dev/posts/ICLR_2025.html</guid>
  <pubDate>Thu, 01 May 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>SpecID - A Hard Eval for Multimodal LLMs</title>
  <link>https://johnowhitaker.dev/mini-projects/specid.html</link>
  <description><![CDATA[ 




<p>We were talking recently around “What is something you could do through a chat interface that current LLMs can’t?”. One example I give personally is identifying Zimbabwean spider species - a lot of which are ~undocumented* so knowledge on what the living specimens look like is concentrated in a few heads, plus a smattering of posts on Facebook and iNaturalist. Anyway, I thought I should put my money where my mouth is and make an actual eval for this, to see how badly SOTA multi-modal LLMs do. Here are the results:</p>
<p><img src="https://johnowhitaker.dev/mini-projects/images/specid_results.png" class="img-fluid"></p>
<p>*Update: gemini-2.5-pro-exp-03-25 gets 57%, the new top score! And Flash 2.5 gets 53% when forcing function calls (previously a bug)</p>
<p>The way I constructed this eval was to pull 100 photos with confirmed “research grade” identifications from my iNaturalist catalog. Each sample gets up to four ‘distractors’ - species names for closely-related organisms in the same ~family/group as the target. Multiple-choice is significantly easier than dredging up the name ‘cold’ (especially since many latin names have clues that match visual aspects of the species). And the quiz is harder for me that it could have been, since I included all species (bugs, birds, plants) not just spiders! Turns out I’m way worse at the latin names outside my comfort zone :D Still - at least at present I have a lead on the best models - just not as much of a one as I expected! It’s stunning that 4o can get more than half of these right.</p>
<p><img src="https://johnowhitaker.dev/mini-projects/images/specid_sa.png" class="img-fluid"></p>
<p>For the human baseline, I set up an interface that had me guess myself. It took less than 12 minutes total - here’s the prompt that produced the code: “his is a dataset I made, with an image and up to five candidate species. I want to get a human baseline for this dataset. Can you give me code that, in a Google Colab notebook, shows the picture and five buttons (some will need less, can use”NA” if there are less than 5 options) and has me click which one I think is the right one, before storing my guess and showing the next one? Use ipywidgets, include a way for me to see progress (how many done + left) and score (current correct %).” And <a href="https://github.com/johnowhitaker/specid_eval/blob/main/SpecID_Human_Baseline.ipynb">here’s the result</a>. Try it youself if you dare :)</p>
<p>The spider above by the way? It fell from a tree onto me, and I eventualy figured out what it was (first record for Zimbabwe) thanks to this passage from the 1923 <strong>Araignées du sud de l’Afrique</strong> :“Céphalothorax noir, avec les yeux latéraux antérieurs et postérieurs situés sur des saillies orangées. Chélicères, pièces buccales, sternum, pattes-mâchoires, pattes brun-noir. Abdomen gris-noirâtre foncé.”. There have been a handful of records with nice pics shared since, and it featured on a guide, but this is the kind of obscure digging needed sometimes to ID these things.</p>
<p>Anyway. Make your own evals! Occasionally suprising, easy, fun! Show me! That is all :)</p>
<ul>
<li><a href="https://huggingface.co/datasets/johnowhitaker/specid_eval_jw">Dataset on HuggingFace</a> - let me know if you want me to try a model on a private ~equivalent dataset.</li>
<li><a href="https://github.com/johnowhitaker/specid_eval">Code + preliminary results with a script to run it yourself</a></li>
</ul>
<p>*Although I did write a field guide to the more common ones!</p>



 ]]></description>
  <category>mini-projects</category>
  <guid>https://johnowhitaker.dev/mini-projects/specid.html</guid>
  <pubDate>Sun, 20 Apr 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Extrapolate All The Things - Small-To-Big Extrapolation For LLMs</title>
  <link>https://johnowhitaker.dev/mini-projects/extrapolative_sampling.html</link>
  <description><![CDATA[ 




<p>In a research chat yesterday I spoke about a fun thread of research, sparked by a recent paper: <a href="http://arxiv.org/abs/2404.16792">Model Extrapolation Expedites Alignment</a>. The idea of the paper is simple but fun: take an LLM that’s had some SFT done, do a little DPO (or other ‘alignment’ technique of your choice), look at the change in the weights, then <strong>extrapolate</strong> in that direction to get an <em>even more aligned</em> model, saving compute. In other words, if you mix the starting model with a DPO-trained one based on a scalar <em>alpha</em>, you start with <em>alpha</em>=0 at the performance of the starting model, then as you increase it to 1 your performance rises too, until you hit the performance of the DPO-trained model. And if you use <em>alpha</em> &gt; 1, you get a model that is even better than the DPO-trained one! At least, if you didn’t do much DPO training - say, 10 or 20% of what you’d normally do. There’s a few takeaways here related to how little the final alignment training is doing in cases like this, but the core idea is one that is worth exploring more generally - namely, <strong>getting better performance by interpolating from a worse model/prediction to a better one and then extrapolating beyond it</strong>. In this post I’ll explore some related ideas, and my own experiments extrapolating from a small model to a big model to eke out even more performance. I’ve also got a <a href="https://www.youtube.com/watch?v=3odZosJ5CeE">video</a> of me running through these papers and then taking you on the journey of trying the experiments, so you can get a picture of how fun this kind of research can be.</p>
<section id="past-work" class="level2">
<h2 class="anchored" data-anchor-id="past-work">Past Work</h2>
<p>For me, the classic example of this kind of idea is ‘Classifier Free Guidance’ in diffusion models. You interpolate between the prediction from an unconditional model and a conditional one, and then extrapolate beyond it. This is a very powerful technique, and it’s been used in a lot of different ways. Introduced by Salimans and Ho in 2021, it gained popularity through the GLIDE paper which used it to get open source text-to-image diffusion working well early on in the diffusion model revolution, where it has since become a staple of pretty much all subsequent text-to-image systems.</p>
<p>I remember Katherine Crawson and others discussing extending the idea to LLMs and AR models in general soon after that - and sure enough a literatre search finds papers like <a href="http://arxiv.org/abs/2306.17806">Stay on topic with Classifier-Free Guidance</a> that do just that, comparing the preictions with and without a piece of context in the prompt and doing CFG-like scaling of the logits before sampling. (I found this paper after re-inventing the idea to myself and going looking).</p>
<p>Another set of works doing something similar is <a href="http://arxiv.org/abs/2309.03883">DOLA: DECODING BY CONTRASTING LAYERS IMPROVES FACTUALITY IN LARGE LANGUAGE MODELS</a> which contrasted predictions based on early vs late layers in a model for improved factuality (I did an <a href="https://johnowhitaker.dev/mini-projects/dola_cfg.html">experiment</a> back then in 2023 extending it with a CFG-like guidance scale) and <a href="http://arxiv.org/abs/2503.02343">DeLTa: A Decoding Strategy based on Logit Trajectory Prediction Improves Factuality and Reasoning Ability</a> which did something similar by fitting a regression line through the preds of the model at different layers:</p>
<p><img src="https://johnowhitaker.dev/mini-projects/images/delta.png" class="img-fluid"></p>
<p>Aside: I found the delta paper while using the Ai2 <a href="https://paperfinder.allen.ai/">Paper Finder</a> tool to look for DoLa since I was blanking on the name, it’s an incredible lit search tool that you should definitely try out asap if you do research!</p>
<p>Anyway, today I thought I’d try the idea of using small -&gt; big model and doing the extrapolation between their logits. I know we chatted about this back then in 2023, I know I talked about it on Twitter back then too and maybe there was even a paper? But let’s pretend we’re doing novel research it’s way more fun that way :D</p>
</section>
<section id="experiment" class="level2">
<h2 class="anchored" data-anchor-id="experiment">Experiment</h2>
<p>In <a href="https://colab.research.google.com/drive/1yg4W6ng8Hi0KOx-FT3ThJ3JkuHWMd7Wl?usp=sharing">this notebook</a> I set up the experiment. The key step is this: <code>final_logits = (1.0 - alpha) * logits1 + alpha * logits2</code>. Where logits1 come from a smaller model (Qwen 2.5 1.5B) and logits2 come from a larger model (Qwen 2.5 3B). Once we validate that it’s all working, I load up some questions from GSM8K and get the scores like so:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">alphas <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb1-2">scores <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> alpha <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> alphas:</span>
<span id="cb1-5">    total, correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tqdm(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Iterate through 100 questions</span></span>
<span id="cb1-7">        q, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data_list[i][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'question'</span>], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(data_list[i][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'answer'</span>].split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#### "</span>)[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb1-8">        model_a, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_answer(q, alpha)</span>
<span id="cb1-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> model_a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> a: correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-10">        total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-11">    score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> total</span>
<span id="cb1-12">    scores.append(score)</span>
<span id="cb1-13">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Alpha: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>alpha<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Score: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>score<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div></div>
<p>The result:</p>
<p><img src="https://johnowhitaker.dev/mini-projects/images/extrapolative_res1.png" class="img-fluid"></p>
<p>Womp womp waaaa. An early test with fewer samples had such a nice peak at alpha = 1.2 making it look like the idea worked great! Alas - in this case at least perhaps it was too good to be true. I’ll update this post if I get a more positive result trying this at a larger scale.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>It might sound a little silly to effectively fit a curve for the preds of a few smaller models to try to predict what a bigger one might do, but I remain hopeful there might be places this works… And I can imagine scenarios where you already have both sets of preds or can get them cheaply - perhaps a speculative sampling scenario. It’s also potentially a lot more useful when you have good/bad models in other ways. For e.g.&nbsp;the use-case I’m excited about is tweaking the context/training. Say you’re working on a model for FastHTML. Since it’s a new framework it isn’t really in the training data, so models tend to not know it and try to answer about FastAPI or something instead. We could fine-tune a model on what examples we have, or pop some docs in context, but even then the models might really want to default to the better-known frameworks. With this, we could contrast a model with no training/context with our fine-tuned one, and then extrapolate to get a model that is even more likely to do things the “right” FastHTML way. And so on.</p>
<p>Anyway, I hope this post and the video inspire you to run your own experiments - there are so many directions you can take this! If you try anything fun do let me know. Best. Johno.</p>
<p>PS: I ran this on Qwen 7B -&gt; 14B too, with similarly underwhelming results.</p>
<p><img src="https://johnowhitaker.dev/mini-projects/images/extrapolative_res2.png" class="img-fluid"></p>
</section>
<section id="pps-full-code" class="level2">
<h2 class="anchored" data-anchor-id="pps-full-code">PPS: Full code</h2>
<p>For the record, here’s the code that produced the data for the first graph above</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> transformers</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoModelForCausalLM, AutoTokenizer</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> warnings</span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> httpx, json</span>
<span id="cb2-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> re</span>
<span id="cb2-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm.auto <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Suppress irrelevant warnings</span></span>
<span id="cb2-10">warnings.filterwarnings(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ignore"</span>, category<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">UserWarning</span>)</span>
<span id="cb2-11">transformers.logging.set_verbosity_error() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hide tokenizer warnings</span></span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># --- Configuration ---</span></span>
<span id="cb2-14">DEVICE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> torch.cuda.is_available() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cpu"</span></span>
<span id="cb2-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Using device: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>DEVICE<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-16"></span>
<span id="cb2-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># --- Load Models ---</span></span>
<span id="cb2-18">model_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Qwen/Qwen2.5-1.5B-Instruct"</span></span>
<span id="cb2-19">tokenizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoTokenizer.from_pretrained(model_name)</span>
<span id="cb2-20">terminators <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [tokenizer.eos_token_id]</span>
<span id="cb2-21"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> tokenizer.pad_token <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb2-22">      tokenizer.pad_token <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer.eos_token</span>
<span id="cb2-23"></span>
<span id="cb2-24">model1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoModelForCausalLM.from_pretrained(</span>
<span id="cb2-25">    model_name,</span>
<span id="cb2-26">    torch_dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.bfloat16).to(DEVICE).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-27"></span>
<span id="cb2-28">model2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoModelForCausalLM.from_pretrained(</span>
<span id="cb2-29">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Qwen/Qwen2.5-3B-Instruct"</span>,</span>
<span id="cb2-30">    torch_dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.bfloat16</span>
<span id="cb2-31">).to(DEVICE).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-32"></span>
<span id="cb2-33"></span>
<span id="cb2-34"></span>
<span id="cb2-35"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_next_token_logits(model, input_ids, past_key_values):</span>
<span id="cb2-36">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb2-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Performs a forward pass and returns the logits for the *next* token,</span></span>
<span id="cb2-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    along with the updated past_key_values.</span></span>
<span id="cb2-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb2-40">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb2-41">        outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(</span>
<span id="cb2-42">            input_ids<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>input_ids,</span>
<span id="cb2-43">            past_key_values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>past_key_values,</span>
<span id="cb2-44">            return_dict<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb2-45">        )</span>
<span id="cb2-46">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Logits are for the *next* token prediction (shape: [batch_size, vocab_size])</span></span>
<span id="cb2-47">    next_token_logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outputs.logits[:, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, :]</span>
<span id="cb2-48">    updated_past_key_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outputs.past_key_values</span>
<span id="cb2-49">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> next_token_logits, updated_past_key_values</span>
<span id="cb2-50"></span>
<span id="cb2-51"></span>
<span id="cb2-52"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> contrastive_generate(</span>
<span id="cb2-53">        model1,</span>
<span id="cb2-54">        model2,</span>
<span id="cb2-55">        tokenizer,</span>
<span id="cb2-56">        messages,</span>
<span id="cb2-57">        alpha: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>,</span>
<span id="cb2-58">        max_new_tokens: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>,</span>
<span id="cb2-59">        temperature: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>,</span>
<span id="cb2-60">        terminators <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb2-61">    ):</span>
<span id="cb2-62"></span>
<span id="cb2-63">    input_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer.apply_chat_template(</span>
<span id="cb2-64">        messages,</span>
<span id="cb2-65">        add_generation_prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb2-66">        return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pt"</span></span>
<span id="cb2-67">    ).to(DEVICE)</span>
<span id="cb2-68">    past_key_values1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb2-69">    past_key_values2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb2-70">    generated_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-71">    _, past_key_values1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_next_token_logits(model1, input_ids, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb2-72">    _, past_key_values2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_next_token_logits(model2, input_ids, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb2-73"></span>
<span id="cb2-74">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># --- Generation Loop ---</span></span>
<span id="cb2-75">    current_input_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> input_ids[:, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Last token in inputs</span></span>
<span id="cb2-76">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(max_new_tokens):</span>
<span id="cb2-77">        logits1, past_key_values1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_next_token_logits(</span>
<span id="cb2-78">            model1, current_input_ids, past_key_values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>past_key_values1 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use cache, mask isn't needed for single token</span></span>
<span id="cb2-79">        )</span>
<span id="cb2-80">        logits2, past_key_values2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_next_token_logits(</span>
<span id="cb2-81">            model2, current_input_ids, past_key_values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>past_key_values2 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use cache, mask isn't needed for single token</span></span>
<span id="cb2-82">        )</span>
<span id="cb2-83"></span>
<span id="cb2-84">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Key step:</span></span>
<span id="cb2-85">        final_logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> alpha) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> logits1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> logits2</span>
<span id="cb2-86"></span>
<span id="cb2-87">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3. Apply Temperature and Sample</span></span>
<span id="cb2-88">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> temperature <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb2-89">            scaled_logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> final_logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> temperature</span>
<span id="cb2-90">            probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.softmax(scaled_logits, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-91">            next_token_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.multinomial(probs, num_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-92">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb2-93">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Greedy decoding if temperature is 0 or less</span></span>
<span id="cb2-94">            next_token_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.argmax(final_logits, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-95"></span>
<span id="cb2-96">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 4. Check for EOS token</span></span>
<span id="cb2-97">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> terminators <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> next_token_id.item() <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> terminators: <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb2-98"></span>
<span id="cb2-99">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 5. Append generated token and prepare for next step</span></span>
<span id="cb2-100">        generated_ids.append(next_token_id.item())</span>
<span id="cb2-101">        current_input_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> next_token_id <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Next input is just the token we sampled</span></span>
<span id="cb2-102"></span>
<span id="cb2-103">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># --- Decode and Return ---</span></span>
<span id="cb2-104">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> tokenizer.decode(generated_ids)</span>
<span id="cb2-105"></span>
<span id="cb2-106"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load eval data</span></span>
<span id="cb2-107">url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://raw.githubusercontent.com/openai/grade-school-math/refs/heads/master/grade_school_math/data/test.jsonl"</span></span>
<span id="cb2-108">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> httpx.get(url)</span>
<span id="cb2-109">data_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-110"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> response.text.strip().split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>):</span>
<span id="cb2-111">    item <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.loads(line)</span>
<span id="cb2-112">    data_list.append(item)</span>
<span id="cb2-113"></span>
<span id="cb2-114"></span>
<span id="cb2-115"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_answer(question, alpha):</span>
<span id="cb2-116">  messages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb2-117">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"system"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Answer the following question, end your response with 'final answer: your_answer'."</span>},</span>
<span id="cb2-118">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: question},</span>
<span id="cb2-119">  ]</span>
<span id="cb2-120">  alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span></span>
<span id="cb2-121">  answer_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> contrastive_generate(model1, model2, tokenizer, messages, alpha,</span>
<span id="cb2-122">                       max_new_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>, terminators<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>terminators, temperature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>)</span>
<span id="cb2-123">  numbers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.findall(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'-</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">\d</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>(?:<span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">\d</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, answer_text)</span>
<span id="cb2-124">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(numbers[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> numbers <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, answer_text</span>
<span id="cb2-125"></span>
<span id="cb2-126"></span>
<span id="cb2-127">alphas <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb2-128">scores <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-129"></span>
<span id="cb2-130"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> alpha <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> alphas:</span>
<span id="cb2-131">    total, correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-132">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tqdm(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span>)):</span>
<span id="cb2-133">        q, a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data_list[i][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'question'</span>], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(data_list[i][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'answer'</span>].split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#### "</span>)[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>))</span>
<span id="cb2-134">        model_a, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_answer(q, alpha)</span>
<span id="cb2-135">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> model_a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> a: correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-136">        total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-137">    score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> total</span>
<span id="cb2-138">    scores.append(score)</span>
<span id="cb2-139">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Alpha: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>alpha<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Score: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>score<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-140"></span>
<span id="cb2-141"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Scores for different alphas: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>scores<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-142"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Scores for different alphas: [71.0, 72.5, 72.83333333333333, 74.16666666666667, 74.5, 74.16666666666667, 73.66666666666667, 73.83333333333333, 72.83333333333333]</span></span></code></pre></div></div>


</section>

 ]]></description>
  <category>mini-projects</category>
  <category>Video</category>
  <guid>https://johnowhitaker.dev/mini-projects/extrapolative_sampling.html</guid>
  <pubDate>Sat, 12 Apr 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Lab Junk Rheoscopic Fluid</title>
  <link>https://johnowhitaker.dev/mini-hw-projects/rheoscopic.html</link>
  <description><![CDATA[ 




<p>As I grabbed the waste tub from my lab bench to deal with it, I noticed the liquid in the bottom swished around in a shiny and interesting way. I pipetted some out and took a closer look. Any movement resulted in irridescent swirls - I’d accidentally made a rheoscopic fluid! This isn’t exactly rare - people make it by adding mica powder to water, for example. But I couldn’t figure out what was causing the effect in my case at first - no mica here, just the remains of a couple of experiments related to cyanotype and the paper towels I’d used to clean up. Intrigued, I set about trying to figure out the minimal recipe needed to re-create the effect. Before we get to the recipe though, take a look at it in motion:</p>
<p><img src="https://johnowhitaker.dev/mini-hw-projects/images/rheo.gif" class="img-fluid"></p>
<p>Lovely, isn’t it! More videos in <a href="https://x.com/johnowhitaker/status/1906154484826595722">this twitter thread.</a></p>
<p><img src="https://johnowhitaker.dev/mini-hw-projects/images/rheo.png" class="img-fluid"></p>
<p>Turns out you can make this as follows: - Add a strip of paper towel to a container of 2% hydrogen peroxide and a few drops of dish soap. Not too much paper towel. - Leave it for several days (the longer the better) - Add color to taste :)</p>
<p>I think what is happening is the H2O2 is breaking down parts of the paper towel, leaving little bits of cellulose and other stuff suspended in the water which catch the light at the right angle, aligning based on the flow, giving the irridescent effect. The soap helps to stabilize the suspension. I used food coloring to boost the contrast. In the initial version the yellow (from potassium ferricyanide) was the initial color, then it later turned blue (from the cyanotype reaction) - which is how I got the idea. The white version was cool too in some lights but didn’t photograph nearly as well.</p>
<p>Under a microscope it looks like this:</p>
<p><img src="https://johnowhitaker.dev/mini-hw-projects/images/rheo_scope.png" class="img-fluid"></p>
<p>Anyway, it was a fun ‘science at home’ moment to spot this, chat about it with an AI, come up with some theories, try out varous mixtures (with and without the various chemicals I thought might be in the original batch) and then double check the recipe again. I bet stronger H2O2 would work better - LMK if you do an independent replication!</p>
<p><img src="https://johnowhitaker.dev/mini-hw-projects/images/rheo2.png" class="img-fluid"></p>
<p>Update, a concrete recipe: Add 25cm^2 of brown paper towel to 100ml of 3% H2O2. Add a small drop of dish soap. Heat at 40-50 degrees C for 5-10 hours or leave at room temperature for several days. Add a few drops of food coloring. I sealed 80ml of the resulting mixture in a petri dish with a magnet inside, and it makes an excellent desk fidget toy. Adding too mucn paper (e.g.&nbsp;200 cm^2) resulted in a few larger fibers rather than the desired outcome, even less than what I used here might be optimal.</p>
<p><img src="https://johnowhitaker.dev/mini-hw-projects/images/rheoscopic_paper.png" class="img-fluid"></p>
<p>Update 2: I tried an alternative recipe from <a href="https://arxiv.org/abs/1806.06120">this</a> paper (extract shown above) with great results. See <a href="https://x.com/johnowhitaker/status/1918385113181896945">here</a> for a video of the resulting desk toy - mesmerizing!</p>



 ]]></description>
  <category>mini-hw-projects</category>
  <guid>https://johnowhitaker.dev/mini-hw-projects/rheoscopic.html</guid>
  <pubDate>Fri, 11 Apr 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Hiding an Annoying Element with Stylus</title>
  <link>https://johnowhitaker.dev/tils/paid_promotion_links.html</link>
  <description><![CDATA[ 




<p>YouTube has this annoying thing where on hover a little overlay pops up over some videos that says ‘Includes paid promotion…’. I click on this accidentally fairly frequently, opening up a support.google.com link instead of the video I want. This bugs me, but it’s a very minor annoyance. In the past I’d probably just ignore it. I tried inspecting the element in the Chrome dev tools but couldn’t find it and that’s about as much effort as I’m willing to manually do for somethig this small. FOrtunately, these days we have AI! A quick back-and-forth with GPT4.5 and I’ve solved the problem for myself!</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/tils/yt_overlay.png" class="img-fluid figure-img"></p>
<figcaption>The problem</figcaption>
</figure>
</div>
<p>I went with a CSS rule in the Stylus browser extension:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode css code-with-copy"><code class="sourceCode css"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">@-moz-document</span> domain<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"youtube.com"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">)</span> {</span>
<span id="cb1-2">    a<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">href</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"support.google.com/youtube"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">]</span> {</span>
<span id="cb1-3">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">display</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">none</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">!important</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-4">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pointer-events</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">none</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">!important</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-5">    }</span>
<span id="cb1-6">}</span></code></pre></div></div>
<p>I’m amused how low my tolerance for painful stuff on a computer is these days, and how happy it makes me to fix any remaining tiny paper cuts with my code-slinging AI buddies.</p>



 ]]></description>
  <guid>https://johnowhitaker.dev/tils/paid_promotion_links.html</guid>
  <pubDate>Thu, 10 Apr 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Tab Clearing (April 9 2025)</title>
  <link>https://johnowhitaker.dev/misc/tab-clear-april2025.html</link>
  <description><![CDATA[ 




<ul>
<li><a href="https://synth.grantkot.com/">Web synth</a> - great sounds, easy controls, works on mobile. Big fan. Think they use adventure time sounds, in some kind of library? I want to emulate this at some point.</li>
<li><a href="https://writings.stephenwolfram.com/2019/02/seeking-the-productive-life-some-details-of-my-personal-infrastructure/">Seeking the Productive Life: Some Details of My Personal Infrastructure</a> - revisiting this inspiring piece from Wolfram on how he optimizes bits if his life. He’s shockingly productive, I think a lot of us could learn from him.</li>
<li><a href="https://arxiv.org/abs/2504.00698">Command A: An Enterprise-Ready Large Language Model</a> - interesting paper with lots of detail on their enterprisey post-training.</li>
<li><a href="https://hkunlp.github.io/blog/2025/dream/">Dream 7B</a> - ‘Diffusion reasoning model’ continuing the trend of diffusion language models starting to look impressive at 7Bish scale, building on smaller-scale PoCs from the past. Watching this space with interest :) It is initialzed from Qwen which is an interesting tidbit.</li>
<li><a href="https://www.together.ai/blog/deepcoder">Together AI announce DeepCoder</a> - speaking of things initialized with Qwen, this 14B reasoner does extremely well thanks to good, open work on RLVR for coding, ft their ‘GRPO+’. Good-looking work!</li>
<li><a href="https://hackaday.com/2025/04/02/70-diy-synths-on-one-webpage/">70 DIY Synths On One Webpage</a> an inspiring collection for if I ever feel like building HW synths</li>
<li><a href="https://www.lesswrong.com/posts/9PiyWjoe9tajReF7v/the-hidden-cost-of-our-lies-to-ai">The Hidden Cost of Our Lies to AI</a> - DNF, but I do like peeking at what the LW people are talking about, and I do have a string sentiment against lying to AI that the author shares.</li>
<li><a href="https://yetch.studio/products/edge-piece-puzzle">Simone’s all-edge puzzle</a> - A nice idea I’m getting for my puzzle-loving wife (shh it’s a birthday secret)</li>
<li><a href="https://docs.perplexity.ai/guides/pricing">https://docs.perplexity.ai/guides/pricing</a> - Their deep research API looks nice, I saw a colleague using it in an internal tool and want to copy that so I don’t have to break flow to head to openai/google for deep research style questions.</li>
<li><a href="https://ai-2027.com/">AI2027</a> - I enguaged a lot with this, listening to the Dwarkesh podcast and skimming the research. They’re nothing if not thorough. I’m not sure I quite buy the foomish takeoff stuff still, but I also don’t think you can dismiss these ideas out-of-hand.</li>
<li><a href="https://hackaday.com/2025/04/04/3d-print-and-play-the-super-mario-tune-as-a-fidget-toy/">3D Print (and Play!) The Super Mario Tune As A Fidget Toy</a> - I’m going to print off some rick-rolls and leave them lying around</li>
<li><a href="https://arxiv.org/abs/2504.05118">VAPO paper</a> - I’ve been meaning to look at DAPO, VAPO and other GRPO variants but not had the time+inclination recently, feels like the DPO or LoRA fevers as everyone tries out minor mods that work on some benches…</li>
<li><a href="https://blog.google/products/google-cloud/ironwood-tpu-age-of-inference/">Google’s Ironwood TPUs</a> look like inference beasts…</li>
<li><a href="https://arxiv.org/abs/2411.15098">OmniControl</a> and this <a href="https://huggingface.co/spaces/Yuanshi/OminiControl_Art">OmniControl Art</a> space (the latter replicating 4o’s stylization trick with Flux) look like an interesting modern controlnet alternative. I want to take a closer look at some point.</li>
<li><a href="https://arxiv.org/abs/2404.16792">Model Extrapolation Expedites Alignment</a> - fun: train DPO model, interpolate between base SFT model and that, with scale &gt; 1. CFG but it’s comparing preds from DPO model vs base, giving a boost on some tasks haha. Not sure it’ll hold for more carefully trained models but neat to see. Reminds me of a paper that did something similar but using early vs late layer predictions instead of two model variants. Have also seen small vs large models. ALl these hacks feel likely to get bitter-lessoned but fun for now. Another in this veign was:</li>
<li><a href="http://arxiv.org/abs/2501.18585">Thoughts Are All Over the Place: On the Underthinking of o1-Like LLMs</a> - which supresses thought-changing tokens like “alternatively” until the model has thought for long enough on that topic (some settable threshold) which is a funny hack to encourage longer thoughts. They do see some improvement!</li>
<li><a href="https://arxiv.org/abs/2504.04022">Rethinking Reflection in Pre-Training</a> - looking at how much ‘reasoning’ is learnt during pre-training, and identifying a measure that grows steadily, which seems very relevant to the discussion over whether reasoning is all RL or is motly elicitation of latent capabilities learnt during pretraining.</li>
<li><a href="https://arxiv.org/abs/2503.22828">Learning to Reason for Long-Form Story Generation</a> very neat idea: RLVR on reasoning hains with the score being how likely the model is to generate the gold standard output after said reasoning chain: “Our reward uses a reference model to get the improved likelihood of the true next chapter.”, “🎯 Verifiable Rewards via Completion Likelihood Improvement (VR-CLI) evaluates reasoning by the”improvement” in downstream perplexity of the gold completion (the next chapter).”</li>
<li><a href="https://arxiv.org/abs/2404.09937">Compression Represents Intelligence Linearly</a> - “we find that LLMs’ intelligence – reflected by average benchmark scores – almost linearly correlates with their ability to compress external text corpora. These results provide concrete evidence supporting the belief that superior compression indicates greater intelligence.” - nice to have more empirical evidence for this, I think it’s a good heuristic to keep in mind.</li>
<li><a href="https://arxiv.org/abs/2504.02495">Inference-Time Scaling for Generalist Reward Modeling</a> - TO READ</li>
<li><a href="https://www.ethansmith2000.com/post/on-vibe-coding">On Vibe Coding</a> - TO READ</li>
<li><a href="https://deepmind.google/discover/blog/taking-a-responsible-path-to-agi/">Taking a responsible path to AGI</a> - TO READ</li>
<li><a href="https://huggingface.co/spaces/enzostvs/deepsite">Deep site</a> - TO TRY</li>
</ul>



 ]]></description>
  <category>misc</category>
  <guid>https://johnowhitaker.dev/misc/tab-clear-april2025.html</guid>
  <pubDate>Wed, 09 Apr 2025 00:00:00 GMT</pubDate>
  <media:content url="https://i.pinimg.com/originals/40/fe/86/40fe863b3ccf9ceb56cbef670cf6bc41.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Can AI Models Rhyme?</title>
  <link>https://johnowhitaker.dev/mini-projects/rhyme_eval.html</link>
  <description><![CDATA[ 




<p>Which word in [‘Buoy’, ‘Employ’, ‘Decoy’, ‘Corduroy’] rhymes with ‘Ennui’? I went looking for an online quiz with questions like this and figured it would make a good mini LLM eval. Without further ado, here are the results:</p>
<p><img src="https://johnowhitaker.dev/mini-projects/images/rhyme_eval.png" class="img-fluid"></p>
<p>I put the full code in a gist <a href="https://gist.github.com/johnowhitaker/b1ca1ac7e1814bf84aa52dde6d174277">here</a>. It’s pretty easy to knock together little evals like this! To make extracting the answers easy I used function calling, with TogetherAI for the open-source models and OpenAI for theirs. Since they all use the OpenAI API it was trivial to swap between them. As you can see if you skim my gist, I got AI to write the bulk of the code BUT did it in small enough pieces that I could check and tweak as needed.</p>
<p>For ease of replication, here are the questions (alas, this probably poisons this eval for future AIs but we can always make more!):</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">qs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'question'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Tough'</span>,</span>
<span id="cb1-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'options'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Chaff'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Tariff'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Cliff'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Bluff'</span>],</span>
<span id="cb1-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'answer'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Bluff'</span>},</span>
<span id="cb1-4"> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'question'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sigh'</span>,</span>
<span id="cb1-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'options'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Achy'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Alloy'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fussy'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Awry'</span>],</span>
<span id="cb1-6">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'answer'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Awry'</span>},</span>
<span id="cb1-7"> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'question'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Ennui'</span>,</span>
<span id="cb1-8">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'options'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Buoy'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Employ'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Decoy'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Corduroy'</span>],</span>
<span id="cb1-9">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'answer'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Buoy'</span>},</span>
<span id="cb1-10"> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'question'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Ballet'</span>,</span>
<span id="cb1-11">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'options'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gaffe'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Cafe'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Chafe'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Strafe'</span>],</span>
<span id="cb1-12">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'answer'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Cafe'</span>},</span>
<span id="cb1-13"> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'question'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Marshal'</span>,</span>
<span id="cb1-14">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'options'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Impartial'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lethal'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Patriarchal'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Substantial'</span>],</span>
<span id="cb1-15">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'answer'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Impartial'</span>},</span>
<span id="cb1-16"> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'question'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Ignore'</span>,</span>
<span id="cb1-17">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'options'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Comport'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Transport'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Rapport'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Purport'</span>],</span>
<span id="cb1-18">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'answer'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Rapport'</span>},</span>
<span id="cb1-19"> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'question'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Aisle'</span>,</span>
<span id="cb1-20">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'options'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Smile'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fuels'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Spies'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Else'</span>],</span>
<span id="cb1-21">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'answer'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Smile'</span>},</span>
<span id="cb1-22"> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'question'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Hymn'</span>,</span>
<span id="cb1-23">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'options'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Climb'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Limb'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Comb'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Thumb'</span>],</span>
<span id="cb1-24">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'answer'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Limb'</span>},</span>
<span id="cb1-25"> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'question'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Stray'</span>,</span>
<span id="cb1-26">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'options'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Levee'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Spree'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Melee'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Emcee'</span>],</span>
<span id="cb1-27">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'answer'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Melee'</span>},</span>
<span id="cb1-28"> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'question'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Bottom'</span>,</span>
<span id="cb1-29">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'options'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Solemn'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Damn'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Column'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Autumn'</span>],</span>
<span id="cb1-30">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'answer'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Autumn'</span>},</span>
<span id="cb1-31"> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'question'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Deuce'</span>,</span>
<span id="cb1-32">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'options'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mousse'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lacrosse'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Posse'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Finesse'</span>],</span>
<span id="cb1-33">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'answer'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mousse'</span>},</span>
<span id="cb1-34"> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'question'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Subtle'</span>,</span>
<span id="cb1-35">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'options'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Hustle'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Committal'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Rebuttal'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Acquittal'</span>],</span>
<span id="cb1-36">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'answer'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Rebuttal'</span>},</span>
<span id="cb1-37"> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'question'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Ukulele'</span>,</span>
<span id="cb1-38">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'options'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Oily'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Icily'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Daily'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lily'</span>],</span>
<span id="cb1-39">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'answer'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Daily'</span>},</span>
<span id="cb1-40"> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'question'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Spaghetti'</span>,</span>
<span id="cb1-41">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'options'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sweaty'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Reality'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Dirty'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Bounty'</span>],</span>
<span id="cb1-42">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'answer'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sweaty'</span>},</span>
<span id="cb1-43"> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'question'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Queue'</span>,</span>
<span id="cb1-44">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'options'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Meow'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Escrow'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Straw'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'View'</span>],</span>
<span id="cb1-45">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'answer'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'View'</span>}]</span></code></pre></div></div>



 ]]></description>
  <category>mini-projects</category>
  <guid>https://johnowhitaker.dev/mini-projects/rhyme_eval.html</guid>
  <pubDate>Tue, 01 Apr 2025 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
