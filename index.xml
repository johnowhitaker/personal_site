<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>johnowhitaker.dev</title>
<link>https://johnowhitaker.dev/</link>
<atom:link href="https://johnowhitaker.dev/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.7.5</generator>
<lastBuildDate>Wed, 01 Jan 2025 00:00:00 GMT</lastBuildDate>
<item>
  <title>2024 Overflow: UV Flourescence, ESPing + ESP32CAM, modernBERT musings, Autobackup &amp; NBDev, LLM Psychology, and Reflections on the year</title>
  <link>https://johnowhitaker.dev/misc/2024_year_overflow.html</link>
  <description><![CDATA[ 




<p>It’s Jan 1, 2025. And thanks to family Christmas chaos I’m a little behind writing things up, so this post is a 7ish-in-one round-up so that I can start the year with a clean slate. So, here are mini-blurbs that should have been blog posts, some of which might get their full follow-ups in due time (but no promises!)</p>
<section id="uv-flourescence-photography" class="level2">
<h2 class="anchored" data-anchor-id="uv-flourescence-photography">UV Flourescence Photography</h2>
<p>I’ve been enjoying shining a deep UV torch aroung and seeing what glows. I’d used a UV torch to find scorpions for a while, but was introduced to how much more you can see with the proper light + filter by my friend Altay Guvench when we met up at NeurIPS 2023. He runs <a href="https://www.glowhunt.org/">glowhunt.org</a> where you can find a great talk he gave on the subject. More recently, I’ve been playing with <a href="https://www.youtube.com/watch?v=5h7BQc-om9g">these cheap UV torches</a> and trying to take better pics. Pics to follow at some point, here’s the first tests with a microscope (bottom) and my camera + macro lens (top):</p>
<p><img src="https://johnowhitaker.dev/misc/uv_ims/image.png" class="img-fluid"></p>
<p>It feels like getting a new sense - you walk around at night marvelling at things you normally can’t see. How cool!</p>
</section>
<section id="esp-chips-are-great" class="level2">
<h2 class="anchored" data-anchor-id="esp-chips-are-great">ESP Chips Are Great</h2>
<p>I recently did a few different mini-projects with some wifi-enabled microcontrollers I picked up. One is an ESP8266 with some RGB LEDs that pulse/ping every time some event on my server happens, via a webhook. Rapidfire events ‘fill up’ the line of RGB LEDs, it looks cool, you’ll have to take my word for it.</p>
<p>Another more proof-of-concept thing I messed about with was taking an image with the ESP32-CAM dev board (the ESP32 i a more powerful, newer chip) and sending it off to Gemini Flash 8B for classification, then doing something (like toggling an LED) based on the result. It got a hilarious <a href="https://x.com/johnowhitaker/status/1870650291454120364">recenption on Twitter</a> - splitting the crowd between ‘This is AMAZING, the age of AI is here, intelligence for all’, ‘YOU BUILD IT KING’ and the dour ‘You could have used YOLO/a raspberry pi/a local model/siple algorithm X’. Most of the nay-saywers were downright wrong, and all missed the point of the post, which was simply: hey, how cool is it that for ~no time, effort or money we can integrate a custom classifier to answer a question like ‘is the cat eating my plants again’ and take action in the real world as a result, all on a tiny popwer-sipping dev board that you can buy for &lt;$10!?</p>
<p>Anyway, it went viral and I had fun sneaking a look at my exploding notifications during family Christmas celebrations.</p>
</section>
<section id="modernbert-is-out" class="level2">
<h2 class="anchored" data-anchor-id="modernbert-is-out">ModernBERT is out!</h2>
<p>Some of my colleagues have been hard at work training a BERT for the modern age, complete with tons of performance enhancements and good design choices. I helped a little :) Go check out the <a href="https://www.answer.ai/posts/2024-12-19-modernbert.html">blog post</a> to admire my matplotlib and watercolor skills in the pretty pictures! I’m hoping to show off what it can do a little this year.</p>
</section>
<section id="autobackup" class="level2">
<h2 class="anchored" data-anchor-id="autobackup">Autobackup</h2>
<p><a href="https://answerdotai.github.io/autobackup/">Autobackup</a>] is a tiny little library I created as a demo for our solveit course, and also as something we use for the platform that powers said course. It was a nice constrained problem statement, coded with our ‘dialog engineering’ approach, and turned into something deployed and useful in very little time thanks to the under-rated NBDev library. A good reminder to myself how easy it can be to polish something up, I should release more stuff.</p>
</section>
<section id="llm-psychology" class="level2">
<h2 class="anchored" data-anchor-id="llm-psychology">LLM Psychology</h2>
<p>A tweet went viral in my circles showing something that initially surprised me: GPT4o trained to follow a specific format (spelling HELLO with the starting letters of consecutive sentences) was then asked, in a fresh context, what pattern it followed, and was able to articulate it while following said format. Impressive. What is going on?</p>
<p>Initial responses ranged up to ‘do they have a self after all’. One helpful Twitterite shared this paper: <a href="https://arxiv.org/abs/2406.14546">Connecting the Dots: LLMs can Infer and Verbalize Latent Structure from Disparate Training Data</a> with more good examples of the more generic pattern: LLMs being able to make inference based on patterns from training. Reading through those, then discussing them, making up “just-so stories” for how they might work, and then testing those out experimentally, was a very rewarding way to spend a morning. Great paper. I did a quick experiment, lazy copying in my tweet summary here:</p>
<p>A quick + good way to learn to do better at that task is to re-use the rich ‘Paris’-related features you (the LLM) already have. So when the fine-tuned model processes ‘What country is CITY X in?’, by a few layers deep the internal representations might look pretty similar to ‘What country is PARIS in?’, leading to appropriately impressive answers.</p>
<p>I tried this out (caveat, first quick + hacky experiment) on Llama 3 8B Instruct. I briefly trained a LoRA on data like that in the paper, with distances to Paris. Comparing (1) “What is the distance between Buenos Aires and Paris?” with (2) “What is the distance between Buenos Aires and CITY?”, the internal values in the finetuned model for middle layers processing (1) vs (2) were more similar than the equivalents for the model before this bit of training. I’m hoping to do this more carefully and share it, time permitting :)</p>
<p>It’s a little harder to picture having ‘answering in structure’, ‘encoding words with starts of sentences’, and ‘spelling HELLO’ features. Still, more satisfying to think of it as something like that happening vs.&nbsp;the spooky and anthropomorphic idea of ‘introspecting the self’ or similar in the ‘HELLO’ case.</p>
<p>I hope to re-do more carefully and write up, but again, this post is to make me feel less ba if I don’t. Onward!</p>
</section>
<section id="reflections-on-the-year" class="level2">
<h2 class="anchored" data-anchor-id="reflections-on-the-year">Reflections on the year</h2>
<p>Jokes, I should write a bunch but I’m a little tired. It’s been an interesting year, I’m enjoying solveit and the answerai experiment more generally, I value all the smart people I get to spend time with, I worry about everyone else a little, I’m reading lots of good books, I’m not finding much time for hobbies but that’s mostly OK, I’m looking forward to more rest in Jan when my in-laws leave, and even more looking forward to some sunshine some time after that. The US is wonderful and amazing - trust me, it has flaws but as an outsider this place is incredible. Here’s to an interesting 2025 :)</p>
</section>
<section id="misc" class="level2">
<h2 class="anchored" data-anchor-id="misc">Misc</h2>
<p>Hmm, what else am I missing? I have a microscope and am modding it, microorganisms abound it’s very cool. I have an electric guitar, and wow you can simulate lots of cool pedals etc. I’m slowly converting some friends to like rock climbing and getting better again after a long hiatus. I hope to make lots more small tools this year. Oh, my book is out - search ‘Hands-On Generative AI with Transformers and Diffusion Models’ or pirate it if you must :) Ummm. THat’s all for this post, hopefully lots more to follow.</p>


</section>

 ]]></description>
  <category>Blog</category>
  <guid>https://johnowhitaker.dev/misc/2024_year_overflow.html</guid>
  <pubDate>Wed, 01 Jan 2025 00:00:00 GMT</pubDate>
  <media:content url="https://johnowhitaker.dev/misc/uv_ims/image.png" medium="image" type="image/png" height="80" width="144"/>
</item>
<item>
  <title>Tab Clearning (December 4 2024)</title>
  <link>https://johnowhitaker.dev/misc/tab_clear_dec_04_24.html</link>
  <description><![CDATA[ 




<section id="tab-clearing" class="level1">

<ul>
<li><a href="https://qwenlm.github.io/blog/qwq-32b-preview/">QwQ</a> announcement. Amusing tone - ‘What does it mean to think, to question, to understand?…’. Exciting model, by vibes at least. Playing with it via https://api.together.ai/playground/chat/Qwen/QwQ-32B-Preview until buddies get quants running locally with long context.</li>
<li>https://gen-omnimatte.github.io/ Generative Omnimatte - Learning to Decompose Video into Layers, cool for VFX etc, good to see.</li>
<li>https://cat-4d.github.io/ change view on any video, I want this in VR, even janky as it is.</li>
<li>https://lilianweng.github.io/posts/2024-11-28-reward-hacking/ - fantastic post on reward hacking. Also yay, lilianweng is posting again after recently leaving openai. A boon for us all.</li>
<li>https://transluce.org/neuron-descriptions describing all neurons in Llama 3.1 8B with a fine-tuned model. See also https://goodfire.ai/ which lets you steer generation with SAE features, looks very cool</li>
<li>https://minihf.com/posts/2024-08-23-weave-agent-dev-log-1/ a representative sample of an interesting blog - the author is John David Pressman who I’ve been aware of since early latent diffusion stuff. Working on agents, and writing about LLMs and philosophy from a unique perspective. Also, and I mean this gently, very not normal.</li>
<li>https://arxiv.org/abs/1906.09453 Image Synthesis with a Single (Robust) Classifier a random paper I want to re-visit with a new trick and modern classifiers maybe.</li>
<li>https://www.interconnects.ai/p/openais-o1-using-search-was-a-psyop more speculations on o1. I liked Sasha’s talk <a href="https://www.youtube.com/watch?v=6PEJ96k1kiw">Speculations on Test-Time Scaling</a> which we did a watch party for.</li>
<li><a href="https://arxiv.org/abs/2410.14606">Streaming Deep Reinforcement Learning Finally Works</a> Ever since a chat with <span class="citation" data-cites="pcastr">@pcastr</span> a while back I’ve been more bullish on RL. I just skimmed bits of this, but one day soon I’ll be ready to dive into RL I bet.</li>
</ul>
<section id="twitterx-links" class="level3">

<ul>
<li><a href="https://x.com/MistralAILabs/status/1864019115679056111?t=ZlNy84Tsd5T69I4wfA_AVg&amp;s=08">Mistral canvas executing python in the browser</a>. Gimmicky but I should try their canvas more.</li>
<li><a href="https://x.com/camenduru/status/1863853010251571492?t=GE3w-_pde0pkOxXuRxaFkw&amp;s=08">HunyuanVideo: A Systematic Framework For Large Video Generation Model Training 🔥 Jupyter Notebook 🥳</a> OS video models getting good, and big. Not including lots of other video gen and 3D gen tweets</li>
<li><a href="https://x.com/sedielem/status/1863672703489634335?t=bCHFZbBEFZ8bDdBHfUAokw&amp;s=08">Sander Dieleman: Better VQ-VAEs with this one weird rotation trick!</a> - <a href="https://arxiv.org/abs/2410.06424">paper</a> seems a cool little trick.</li>
<li><a href="https://x.com/torchcompiled/status/1863080363792408864?t=0j34OO9WrR5szsUeaNY3Nw&amp;s=08">I see CPNNs, I click</a> = <a href="https://x.com/sleenyre/status/1861077874197049583">imscore</a> - a collection of SoTA image aesthetic/preference scorers.</li>
<li><a href="https://x.com/_philschmid/status/1860947148348764627?t=-phIakQgI-11Y926-MV1_w&amp;s=08">Structured outputs might not hurt after all</a> why am I not suprised?</li>
<li><a href="https://x.com/stanislavfort/status/1823347721358438624?t=bFWPgnOBjY9j0TN6DAIv5Q&amp;s=19">Ensemble everything everywhere: Multi-scale aggregation for adversarial robustness</a> - fun paper, hopefully colab at some point. imstack rediscovery.</li>
</ul>
</section>
<section id="misc" class="level3">

<ul>
<li>https://www.infinitescroll.us/p/why-you-should-read-web-fiction with some interesting-looking recs.</li>
<li>https://www.marksaroufim.com/bookshelf Mark’s amazing book list</li>
<li>https://nabeelqu.co/advice A nice advice post and a good idea for a personal site page.</li>
<li>https://podcast.adobe.com/ New voice cleanup thing, might be amazing (and save me having to finish my idea of a hosted soln)</li>
<li>https://www.youtube.com/watch?app=desktop&amp;v=YwELr8ir9qM fun predictions of the future.</li>
<li>https://huggingface.co/datasets/ailsntua/Chordonomicon A bunch (600k) of chord progressions, might be fun to play with. Not linked back to lyrics etc so not directly UG replacing though.</li>
</ul>


</section>
</section>

 ]]></description>
  <category>misc</category>
  <guid>https://johnowhitaker.dev/misc/tab_clear_dec_04_24.html</guid>
  <pubDate>Wed, 04 Dec 2024 00:00:00 GMT</pubDate>
  <media:content url="https://i.pinimg.com/originals/40/fe/86/40fe863b3ccf9ceb56cbef670cf6bc41.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Making Giant Bubbles</title>
  <link>https://johnowhitaker.dev/mini-hw-projects/bubbles.html</link>
  <description><![CDATA[ 




<p>It turns out it’s pretty easy to make GIANT bubbles! This feels like the kind of knowledge that should be more widespread.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-hw-projects/images/bubble_tube.png" class="img-fluid figure-img"></p>
<figcaption>my wife pulls a long bubble tube</figcaption>
</figure>
</div>
<p>The recipe I tried:</p>
<ul>
<li>1:16 Dawn “50% less scrubbing”: water</li>
<li>1tsp baking powder per cup of soap</li>
<li>Inspired by <a href="https://www.youtube.com/watch?v=KINBSeCACow">nighthawkinlight’s recent video</a>, I blended up a few strawberries with salt and soap and strained the result into the mix. (the theory being the super long DNA molecules from the strawberries help the bubbles 🤷). You’d probably get almost as much fun without this!</li>
</ul>
<p>You make a loop of string (the more absorbent the better) attached to two sticks such that when you pull them apart the longer section of the loop drops down lower than the shorter section. Dip the loop in the bubble mix, pull it out, and then pull the sticks apart. Voila! It takes a little practice to release the bubbles and have them float, but pulling tubes works almost immediately. We got our neighbor’s kids involved and they had a blast.</p>
<p>Like all internet-spawned subcultures there is a vast depth to giant bubble making, with wikis full of recipes, exhaustive tests of additives like veterinatry lube, debates over optimal techniques… explore at your own risk, or stick with the simple recipe and have fun :)</p>



 ]]></description>
  <category>mini-hw-projects</category>
  <guid>https://johnowhitaker.dev/mini-hw-projects/bubbles.html</guid>
  <pubDate>Sat, 16 Nov 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Nerdsnipe: Map Folding</title>
  <link>https://johnowhitaker.dev/mini-projects/map_folding.html</link>
  <description><![CDATA[ 




<p>Nerd-sniped by a video from the channel ‘Physics for the Birds’, I looked into what it would take to add an extra item to this sequence of integers: <a href="https://oeis.org/A001418">https://oeis.org/A001418</a> (Number of ways of folding an n X n sheet of stamps) Calculating the already-known 7x7 case took 42 hours. The 5x5 case takes less than a second and the 6x6 takes a few minutes. So 8x8 will likely take a while. So unless I find a better approach or leave my code running for year, it seems like I won’t be able to add to the sequence.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-projects/images/map_folding.png" class="img-fluid figure-img"></p>
<figcaption>the run calculating the last known item in the sequence, for 7x7</figcaption>
</figure>
</div>
<p>The code is available on <a href="https://github.com/johnowhitaker/map_folding">GitHub</a>, and is implemented in C. I started by converting <a href="https://github.com/archmageirvine/joeis/blob/master/src/irvine/oeis/a001/A001415.java">this Java implementation</a> by Sean Irvine (which is a translation of a C version by Fred Lunnon (ALGOL68, C versions)) which implements the pseudo-code from the original 1968 paper (<a href="https://www.ams.org/journals/mcom/1968-22-101/S0025-5718-1968-0221957-8/S0025-5718-1968-0221957-8.pdf">PDF</a>). o1 did almost all the work ;)</p>
<p>At first I thought I might be able to find a GPU-accelerated way to compute this, but no luck on that front. The code I have can divide the work among a few cores but doesn’t parallelize well enough to make scaling up compute worth it.</p>
<p>One side trick I liked that I can’t be bothered to put into a separate TIL: using discord for notifications when it’s done. You make a channel, then Edit Channel (top of channel) -&gt; Integrations -&gt; Webhooks -&gt; New Webhook. This gives you a URL like https://discord.com/api/webhooks/lasiufhaliufhla</p>
<p>Then in your code you can use curl to send a message to that channel like so:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">curl</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-H</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Content-Type: application/json"</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-X</span> POST <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-d</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">content</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$total</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">}"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$WEBHOOK_URL</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span></code></pre></div>
<p>Where <code>$total</code> is the message you want to send and <code>$WEBHOOK_URL</code> is the URL you got from discord. It was nice waking up to a message that the 7x7 case was done!</p>



 ]]></description>
  <category>mini-projects</category>
  <guid>https://johnowhitaker.dev/mini-projects/map_folding.html</guid>
  <pubDate>Thu, 14 Nov 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Deploy Your Artifacts!</title>
  <link>https://johnowhitaker.dev/tils/deploy_your_artifacts.html</link>
  <description><![CDATA[ 




<p>I’m a big fan of the idea of <a href="https://www.todepond.com/sky/sharing-scrappy-fiddles-is-hard/">Sharing Scrappy Fiddles</a>.</p>
<p>I’m always trying to do this more - sharing WIPs on X, writing up TILs on our internal blog for my colleagues, keeping up this blog…</p>
<p>One new category of things I haven’t know how/where to share are bits of ephemeral software I make with LLMs. Specifically Claude’s artifacts tool - it makes it easy to whip up a fun little web app for all sorts of things, but has no easy ‘share’ button to spread that around. It’s strange since I feel less ownership of these tools, but they do often involve a fair amount of back and forth. And I’ve noticed that if I DO deploy them (this post will show you how) I often end up tweaking them more and feeling like they’re really mine, as opposed to playing with the v1 for a sec and disguarding it.</p>
<p>Anthropic has some specific libraries and a build process that I hadn’t seen documented for Artifacts, so for any that weren’t plain HTML+vanilla JS, I had thought it would be very involved to get a locally-running version. Thankfully, SImon Willison’s [fantastic post] led me to this tool: <a href="https://github.com/claudio-silva/claude-artifact-runner">claude-artifact-runner</a> by Claudio Silva. You can copy the artifact code into a file (<code>artifact-component.tsx</code>), run the build command (<code>npx vite build</code> IIRC) and then you have a <code>dist/</code> folder with the built artifact. Once there, you can host this in a variety of ways. I have mine set up with a little FastHTML site (<a href="https://github.com/johnowhitaker/utils">source</a>) since I plan to add other tools in the near future. This is running on a Nanode 1 GB from Linode - $5/month. Fun, and not too bad to set up, not a great option if you don’t want to go down the rabbit hole of setting up a server.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/tils/tools_site.png" class="img-fluid figure-img"></p>
<figcaption>tools site</figcaption>
</figure>
</div>
<p>An easier option is to take the built artifact and pop it into a github repository. <a href="https://github.com/johnowhitaker/minisynth">Here’s an example</a>. As long as there’s an index.html file in the route you can open up the “Pages” section of the repo settings and tell it to build from the main branch. This will give you a github pages site like <a href="https://johnowhitaker.github.io/minisynth/">https://johnowhitaker.github.io/minisynth/</a> that you can share with anyone. It’s free and easy, and you can pop the artifact source code in there too to have a reference for yourself or others.</p>
<p>Of course, neither of these options are seamless, and there’s a lot of room for improvement. I like the look of GitHub Sparks, which are easy-to-create apps with some kind of DB for storage and trivial to share. Replit’s Agents make things you can deploy and share on there too, but aren’t free. And Val.town has their ‘Townie’ bot that also suits some kinds of software.</p>
<p>These little one-shot mini apps aren’t always great, but when you need something constrained and specific I think it’s magical that you can conjure it up with a short conversation. And now, hopefully, you can see how to share it easily too.</p>
<p>PS: Here’s how I add a bunch of static artifacts to their own routes on tools.johnowhitaker.com in FastHTML:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">static_apps_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__file__</span>).parent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"static_apps"</span></span>
<span id="cb1-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(static_apps_dir)</span>
<span id="cb1-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> path <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> static_apps_dir.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*"</span>):</span>
<span id="cb1-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> path.is_dir():</span>
<span id="cb1-5">        app_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> path.name</span>
<span id="cb1-6">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Adding route: /</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>app_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-7">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.get</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>app_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb1-8">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> serve_index(app_name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> app_name):</span>
<span id="cb1-9">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> FileResponse(static_apps_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> app_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index.html'</span>)</span>
<span id="cb1-10">        </span>
<span id="cb1-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> asset <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'assets'</span>).glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*"</span>):</span>
<span id="cb1-12">            asset_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> asset.name</span>
<span id="cb1-13">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Adding asset: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>app_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>asset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-14">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.get</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'/assets/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>app_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>asset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb1-15">            <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> serve_asset(asset_name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> asset_name, app_name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> app_name):</span>
<span id="cb1-16">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> FileResponse(static_apps_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> app_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'assets'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> asset_name)</span>
<span id="cb1-17">            </span>
<span id="cb1-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Modify the index.html to use the asset path with the app name</span></span>
<span id="cb1-19">        index_html <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (static_apps_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> app_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index.html'</span>).read_text()</span>
<span id="cb1-20">        index_html <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> index_html.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'src="/assets/index'</span>, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'src="/assets/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>app_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/index'</span>)</span>
<span id="cb1-21">        index_html <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> index_html.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'href="/assets/index'</span>, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'href="/assets/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>app_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/index'</span>)</span>
<span id="cb1-22">        (static_apps_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> app_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index.html'</span>).write_text(index_html)</span></code></pre></div>
<p>This means I can simply add the latest new artifact to the static_apps folder and it will be served at <code>tools.johnowhitaker.com/artifact_name</code>. Almost painless :) I might feature one or two more soon, there’s one that started as a quick demo and is turning into a very fun tool.</p>



 ]]></description>
  <guid>https://johnowhitaker.dev/tils/deploy_your_artifacts.html</guid>
  <pubDate>Thu, 07 Nov 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Facewave: Controlling Midi Expression with your webcam</title>
  <link>https://johnowhitaker.dev/mini-projects/facewave.html</link>
  <description><![CDATA[ 




<p>One gripe I’ve had with digital instruments is a lack of expression. Coming from a wind instrument background, I don’t like having no control over a note once it starts. So I love the Roli Seaboard (I have the Rise 2) - a squishy playing surface that uses ‘Midi Polyphonic Expression’ (MPE) to let you vary all sorts of parameters by pushing, sliding, and squishing the keys. Unfortunately that’s a $1000+ investment, not so easy to recommend. Recently they announced a new product, that lets you control sound dynamics by waving your hands about above the keyboard, using hand tracking with a pair of IR cameras. Very cool! But as soon as I saw it the question becomes: can we get most of this for free with a webcam?</p>
<p>‘Facewave’ is a proof-of-concept to show the answer is yes! I use mediaPipe to track face and hands in the shot, and send midi control codes (CC) out to be used in your synth of choice. Here’s what it looks like in action:</p>
<p><img src="https://johnowhitaker.dev/mini-projects/images/facewave.png" class="img-fluid"></p>
<p>The code is available on <a href="https://github.com/johnowhitaker/facewave">GitHub</a> and is hosted both on the accompanying github page (https://johnowhitaker.github.io/facewave/) and on my site (https://tools.johnowhitaker.com/facewave). You’ll need a way to feed the midi from that into a synth - I use <a href="https://www.tobias-erichsen.de/software/loopmidi.html">loopmidi</a> to create a virtual midi port that I can connect to my DAW. <a href="https://x.com/johnowhitaker/status/1851667773354840523">Here</a> is a video of an early prototype in action.</p>
<p>This is a ton of fun! I made a simple <a href="https://tools.johnowhitaker.com/msynth">synth</a> tool to test this out if you don’t have a DAW / synth installed - you can play notes with your computer keyboard and modulate the sound with Facewave (as long as you have loopmidi set up).</p>
<p>I love this idea, but don’t know how much further I’ll take it. I’d love someone with more musical contacts to share it around, or steal this idea and add it to your own tools!</p>



 ]]></description>
  <category>mini-projects</category>
  <guid>https://johnowhitaker.dev/mini-projects/facewave.html</guid>
  <pubDate>Fri, 01 Nov 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Mini Synth and Audio Visualization</title>
  <link>https://johnowhitaker.dev/mini-projects/Mini Synth and Audio VIz.html</link>
  <description><![CDATA[ 




<p>I’ve been enjoying creating lots of little projects with Claude artifacts and other tools (post on that soon). Two especially fun ones were both audio related: a mini synth and an audio visualization widget.</p>
<p>The synth came up while I was messing with <a href="https://aitestkitchen.withgoogle.com/tools/music-fx-dj">Google’s MusicFX DJ</a> - a fantastic tool in it’s own right. I wanted a way to jam along, and while I have a few midi controllers I thought I’d instead whip up an in-browser synth using the computer keyboard to minimize time-to-jamming. This is the result:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-projects/images/synth.png" class="img-fluid figure-img"></p>
<figcaption>synth</figcaption>
</figure>
</div>
<p>It’s very simple, but I do like being able to set different scales. Google’s MusicFX DJ let’s you set key too, so you can match them up and have things sound nice together. <a href="https://x.com/johnowhitaker/status/1849263436209016995">Here’s a clip of me testing this out for the first time</a></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-projects/images/synth+musicfx.png" class="img-fluid figure-img"></p>
<figcaption>Noodling with the synth and Google’s MusicFX DJ</figcaption>
</figure>
</div>
<p>Links:</p>
<ul>
<li>Synth hosted with github pages: https://johnowhitaker.github.io/minisynth/ (code: https://github.com/johnowhitaker/minisynth)</li>
<li>And on my tools site: https://tools.johnowhitaker.com/synth</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-projects/images/audio_viz.png" class="img-fluid figure-img"></p>
<figcaption>audio viz</figcaption>
</figure>
</div>
<p>The second project comes from my nostalgia for the old windows media player visualizations. Impressively, Claude turns out to write OK shaders! There are a few to choose from, none mind-blowing but for something visible to watch while I jam with the previous setup this was a fun way to go. Link: https://tools.johnowhitaker.com/audio_viz</p>
<p>Both these tools came together in under an hour, between 4pm and 5pm which is usually the dead zone where I’d done being productive work-wise and waiting for my beloved wife to get home. Each took a bit of back-and-forth to get right, but also didn’t need me to write much if any code. There’s a joy in crafting perfect software, but there’s also a joy in spontaneously bringing little things like this to life with just a bit of chatting with AI. What a time to be alive!</p>



 ]]></description>
  <category>mini-projects</category>
  <guid>https://johnowhitaker.dev/mini-projects/Mini Synth and Audio VIz.html</guid>
  <pubDate>Wed, 30 Oct 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Tab Clearning (October 7 2024)</title>
  <link>https://johnowhitaker.dev/misc/tab_clear_oct_7.html</link>
  <description><![CDATA[ 




<section id="tab-clearing-october-7-2024" class="level1">
<h1>Tab Clearing October 7 2024</h1>
<p><a href="https://www.reka.ai/news/reka-flash-updates">New Reka Flash model</a> - I’m excited to see them ticking along, doing what looks like good work making evals then improving on them (e.g.&nbsp;longer context, instruction chaining). Also, seems like they’ll soon have audio in -&gt; audio out functionality, it’s already in beta.</p>
<p><a href="https://x.com/nsaphra/status/1834260761792639363?t=_Bain24QnR9Y5GC1fq4iXA&amp;s=08">Fast Forwarding Low Rank Training</a> - A funny technique: you do and SGD step then re-apply that same update again and again until the model stops improving on some tiny val set. Suprisingly they say this reduces total flops… I sort of feel if you’re doing DoRA/LoRA on a small dataset you don’t really care about flops and I’d rather show 10x the samples but who knows maybe useful.</p>
<p><a href="https://kyutai.org/Moshi.pdf">The Moshi paper (PDF)</a> - They wrap an audio model around a pre-trained text backbone, and have it produce text along with audio (‘inner monolog’). Haven’t read properly yet.</p>
<p><a href="https://llamacoder.together.ai/">https://llamacoder.together.ai/</a> - together + meta make a claude artifacts alternative. My first test it was impressively close to correct (got some functionality, and to be fair claude also didn’t get this one-shot). I like that it’s a single click to publish app (<a href="https://llamacoder.together.ai/share/RXjC4">here’s mine</a>) and to open in code sandbox. Very neat implementation! <a href="https://ai.meta.com/blog/together-ai-llamacoder/?utm_source=twitter&amp;utm_medium=organic_social&amp;utm_content=video&amp;utm_campaign=builtwithllama">Meta’s blog on the subject</a>.</p>
<p><a href="https://github.com/apirrone/Open_Duck_Mini?tab=readme-ov-file">Open Duck Mini</a>. This robot won’t get out of my head. OG DIsney paper with their design: <a href="https://la.disneyresearch.com/publication/design-and-control-of-a-bipedal-robotic-character/">here</a>. My fan art from when I saw one in person at Neurips included at the end of this post.</p>
<p><a href="https://bauble.studio/">Bauble studio</a> - FUn little SDF coding tool.</p>
<p><a href="https://www.liquid.ai/liquid-foundation-models">Liquid AI</a> have… something? Not too sure what their ‘Language LFMs’ are of how suspicious I should be, awaiting more detail before I waste time trying to read the tea leaves.</p>
<p>https://www.interconnects.ai/p/riley-goodside-on-science-of-prompting a podcast I haven’t listened to yet.</p>
<p>https://walzr.com/bop-spotter Love this project! “I installed a box high up on a pole somewhere in the Mission of San Francisco. Inside is a crappy Android phone, set to Shazam constantly, 24 hours a day, 7 days a week. It’s solar powered, and the mic is pointed down at the street below.”</p>
<p>https://simonwillison.net/2024/Oct/1/openai-devday-2024-live-blog/ Simon making the most useful live feed I’ve seen for an event like this. His follow-on post https://simonwillison.net/2024/Oct/2/not-digital-god/ is also great.</p>
<p>https://soumith.ch/blog/2024-10-02-training-10k-scale.md.html Soumith jots down some good notes on training at scale.</p>
<p>https://ai.meta.com/research/movie-gen/ Meta’s amazing new video model. Impressive results, especially (imo) useful is the editing capability which they get by jointly training to generate video and to edit images, getting video edits ‘for free’. I need to look into the <a href="https://ai.meta.com/static-resource/movie-gen-research-paper">very detailed paper (PDF)</a>.</p>
<p>https://blogs.microsoft.com/blog/2024/10/01/an-ai-companion-for-everyone/ Microsoft are rolling out a new iteration of copilot for everything, a way for lots of people to try something like advanced voice mode I guess. It’s frustrating though - the version I have on my windows desktop can’t browse, call functions, see the screen or really do anything besides yap. I’m realizing voice + functions is amazing, voice alone is useless for many applications (but still nice for some).</p>
<p>https://lunar-joke-35b.notion.site/SigLIP-Paper-hola-sigmoid-7ed58a7108a04ddb99571cded0922386 is a nice promer on SigLIP and why it’s a better training approach than the softmax-based CLIP version.</p>
<p>https://jake.fun/ Love finding great blogs/personal sites like this, where people joyfully play. Definitely adding this to my list of faves.</p>
<p>https://codepen.io/fand/pen/Vwojwqm - I’ve been playing with coding up some different webcam effects (inspired by posy’s mostion extraction video to start with) and this datamosh effect is trippy and great!</p>
<p><a href="https://arxiv.org/abs/2410.02651">CAX: Cellular Automata Accelerated in JAX</a> Cool CA paper with a bunch of fun experiments, I should try this library next time I get the NCA itch.</p>
<p><a href="https://arxiv.org/abs/2410.01679">VinePPO: Unlocking RL Potential For LLM Reasoning Through Refined Credit Assignment</a> Monte Carlo-based estimates instead of large value networks. I like this idea, need to read the paper carefully at some point this week.</p>
<p><a href="https://arxiv.org/abs/2410.01257">HelpSteer2-Preference: Complementing Ratings with Preferences</a> Alignment: should you use ratings or preferences? This paper: Why not both :) On the reading list it goes.</p>
<p><a href="https://arxiv.org/abs/2409.20370">The Perfect Blend: Redefining RLHF with Mixture of Judges</a> Meta show off fancy post-training, looks promising, on the reading list too.</p>
<p>I just want to make an app based on <a href="https://x.com/poetengineer__/status/1841164333952483581?t=gF22BOXEuVaUIKmRGUPeBA&amp;s=08">this tweet</a> for fun. (Cool 2-D visualization of rubiks cube)</p>
<p><a href="https://x.com/marksaroufim/status/1841277387834830876?t=t5_ghEZ2Qo5kZoAaWfp0ng&amp;s=08">CUDA mode talks are out</a></p>
<p><a href="https://x.com/pcastr/status/1841178222828142977?t=wc0BdNUTQl7Nbukk0tqy2Q&amp;s=08">Cool-looking RL conf talk</a> I need to watch, <span class="citation" data-cites="pcastr">@pcastr</span> gives me the feeling smart people are working on RL and it is getting more sensible by the year.</p>
<p><a href="https://arxiv.org/abs/2409.18486">Evaluation of OpenAI o1: Opportunities and Challenges of AGI</a> Bunch of evals on o1 (preview). To read, maybe.</p>
<p><a href="https://x.com/hannah_kerner/status/1840805250552201439?t=L5Rj2PRAlGsH79AgylybzA&amp;s=08">Fields Of The World</a> a giant dataset of labelled fields, open source, man I worked on something like this task back in the day this is so good to see!</p>
<p><a href="https://github.com/genforce/ctrl-x">Ctrl-X: Controlling Structure and Appearance for Text-To-Image Generation Without Guidance</a> - A “simple training-free and guidance-free framework for text-to-image (T2I) generation with structure and appearance control” Very cool! Training free controlnet. I should make a demo for this if there isn’t one already.</p>
<p><a href="https://arxiv.org/abs/2409.13373">LLMs Still Can’t Plan; Can LRMs? A Preliminary Evaluation of OpenAI’s o1 on PlanBench</a> some sort of eval for planning, might be interesting, not reading for now.</p>
<p>https://www.danielcorin.com/posts/2024/claude-3.5-sonnet-connections-evals/ Someone else playing with connections, good stuff.</p>
<p>https://www.anthropic.com/news/contextual-retrieval - Common sense, great results, love to see it! Anthropic doing good work.</p>
<p>I should look at <a href="https://x.com/jfischoff/status/1842032020698038286?t=eom1vT-ZWTNqyu_XBjGaUA&amp;s=08">this paper</a> that claims to get rid of the over-saturation from CFG. And <a href="https://x.com/jfischoff/status/1836802397227655341?t=lB1_fM6Ziv0dGcJCYkv5Mg&amp;s=08">this one</a> (<a href="https://arxiv.org/abs/2409.11355">Fine-Tuning Image-Conditional Diffusion Models is Easier than You Think</a> on arxiv) that shows a better way to turn e.g.&nbsp;stable diffusion into a depth or normal (or …) prediction model. <span class="citation" data-cites="jfischoff">@jfischoff</span> is good at finding these gems. Alas I don’t keep up with diffusion as much these days. But e.g.&nbsp;this may be relevant for audio diffusion models for audio quality fixing e.g.</p>
<p><a href="https://arxiv.org/abs/2410.01792">When a language model is optimized for reasoning, does it still show embers of autoregression? An analysis of OpenAI o1</a> A follow-up to “Embers of Autoregression” with o1, looks worth digging into both at some point. From a skim o1 does seem like it’s starting to overcome some AR-based issues but a ways to go yet.</p>
<p>Videos I still might watch: <a href="https://player.vimeo.com/video/997528474?h=f3d5c44766">def con talk on ai from head of security at openai</a>, <a href="https://www.youtube.com/watch?v=-cq3O4t0qQc">fireside chat with sam</a>, <a href="https://www.latent.space/p/devday-2024">dev day latent space podcast</a></p>
<p>3D printing related videos I want to replicate: <a href="https://www.youtube.com/watch?v=SP5CHSLomKo">fractal vise</a>, <a href="https://www.youtube.com/watch?v=Kpb_krtCMN4">filament bearings</a> (very neat idea).</p>
<p>And now as promised, robot fan art.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/misc/tab_clear_oct_7_files/figure-html/5bbbaf35-1-image.png" class="img-fluid figure-img"></p>
<figcaption>image.png</figcaption>
</figure>
</div>


</section>

 ]]></description>
  <category>misc</category>
  <guid>https://johnowhitaker.dev/misc/tab_clear_oct_7.html</guid>
  <pubDate>Mon, 07 Oct 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Tab Clearning (September 23 2024)</title>
  <link>https://johnowhitaker.dev/misc/tab_clearing_sept_23.html</link>
  <description><![CDATA[ 




<section id="tab-clearing-sept-23" class="level1">
<h1>Tab Clearing Sept 23</h1>
<p>https://openai.com/global-affairs/openai-academy/: “Investing in the development of local AI talent can fuel economic growth and innovation across sectors like healthcare, agriculture, education, and finance.”. Thought: Educating people how to leverage AI is a high-impact thing to do today</p>
<p>https://ia.samaltman.com/ “The Intelligence Age” tl;dr sam thinks the future is going to be cool</p>
<p>https://team.doubao.com/en/special/seed-music - people working on audio models, I like to see it! This Chinese team have a decent-looking one with various ways to control it.</p>
<p>https://github.blog/news-insights/product-news/openai-o1-in-github-copilot/ - o1 is, predictably, cool for slightly more complex tasks.</p>
<p>https://blog.adobe.com/en/publish/2024/09/11/bringing-gen-ai-to-video-adobe-firefly-video-model-coming-soon - Firefly video is looking cool, great for B-roll I guess, or realistically pre-viz.&nbsp;Generative extend seems like the most useful bit. They make a big deal of commercially safe, not trained on user data vibes</p>
<p>https://www.hume.ai/blog/introducing-evi2 Guys bossing around vitual assistants for demos, making them sing etc feels icky. But voice is interesting to me, I wish OpenAI’s voice mode was available. I might try hume evi2, will see how it does.</p>
<p>https://rachel.fast.ai/posts/2024-09-10-gaps-risks-science/ Always appreciate Rachel’s posts</p>
<p>https://blog.mariusvach.com/posts/passwordless-auth-fasthtml So glad people are writing up things like this, the FastHTML ecosystem is growing</p>
<p>https://kingbird.myphotos.cc/packing/squares_in_squares.html - I want to know how big to make the box for printing the 17-square packing problem.s=4.67553…</p>
<p>https://gist.github.com/simonw/d8cc934ad76b3bba82127937d45dc719 - The System prompt for val.town/townie - a good reference for any similar systems.</p>
<p>https://github.com/btsmart/splatt3r - directly predicts 3D gaussians from a couple of uncalibrated images, very cool</p>
<p>https://github.com/hudgeon/fasthtml_supabase_auth_example - glad it exists, haven’t looked yet</p>
<p>https://transformer-circuits.pub/2024/august-update/index.html - glad someone is tinkering with this stuff</p>
<p>https://blog.eleuther.ai/mutransfer/ - This post is pretty good. It goes into the details of mutransfer as the title suggests. They have a really nice nano GPT implementation that shows the changes in action. I think this is something that should hopefully be picked up by everyone going forward.</p>
<p>https://osf.io/preprints/osf/mtgn7 - “Why Is Anything Conscious?” - Fun to skim, I liked the ’From Rocks To Einstein” section but skipped a lot of the formalisms and silliness. <img src="https://johnowhitaker.dev/misc/tab_clearing_sept_23_files/figure-html/74f3db3f-1-image.png" class="img-fluid" alt="image.png"></p>


</section>

 ]]></description>
  <category>misc</category>
  <guid>https://johnowhitaker.dev/misc/tab_clearing_sept_23.html</guid>
  <pubDate>Mon, 23 Sep 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Doodling In Hardware</title>
  <link>https://johnowhitaker.dev/mini-hw-projects/doodle.html</link>
  <description><![CDATA[ 




<section id="doodling-in-hardware" class="level1">
<h1>Doodling in Hardware</h1>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-hw-projects/doodle_files/figure-html/13f8ea38-1-PXL_20240914_234105456.jpg" class="img-fluid figure-img"></p>
<figcaption>My Saturday Morning Project</figcaption>
</figure>
</div>
<p>I wanted to do <em>something</em> physical. Maybe a motion system that’s not just another cartesian X/Y thing? Something I can test out Kalman filters and control systems on? Something that could move a magnet to pull a ball bearing around on some sand in that oh-so-satisfying way?</p>
<p>They way this came together is a nice example of one of my favourite ways to make something - which I’ve started calling ‘doodling in hardware’. Once I had a vague idea of what I wanted to make, I drew out some quick sketches, took a few measurements, and set the base printing. Here’s the sketch:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-hw-projects/doodle_files/figure-html/84369a43-1-PXL_20240915_005127802.jpg" class="img-fluid figure-img"></p>
<figcaption>sketch next to ‘finished’ prototype</figcaption>
</figure>
</div>
<p>While the base printed I could take apart my robot arm to scavenge the servos and start messing with figuring out how to move to a certain X/Y position given different dimensions of the robot (code explorations at the end of this post). I also designed the holders to fit the servos.</p>
<p>While the ‘servo horns’ were printing, I could assemble the circuit on the base, get the motors moving, and design the swivel mechanisms.</p>
<p>While the swivel bits were printing I could walk to the hardware store for 1/4 inch dowels (or maybe I did that earlier?).</p>
<p>You see the trend? These prints take 20-30 minutes (or an hour or so for the base IIRC). Just enough time to tinker with existing things or work on a revision. The upshot is a morning spent in flow, a precious gift. This is the dream! It’s not like I have a super-fancy workshop yet but even the baseline here is enough that I’m not hitting blockers that throw the project as much as I used to. My junk bins are growing more bountiful, my tools more capable.</p>
<p>This particularly project is pretty silly. I spotted some obvious flaws once it was assembled and moving about that will need correcting in a possible V2. But I’m so happy I am in a place I can occasionally tinker with something silly like this and have the process be so smooth and enjoyable :)</p>
<p>OK, now the code as promised. I code all day for my job, so for weekend projects like this the goal is to avoid it as much as possible and have AI do the boring bits.</p>
<section id="simulating-a-scara-arm" class="level2">
<h2 class="anchored" data-anchor-id="simulating-a-scara-arm">Simulating A Scara Arm</h2>
<p><strong>Aside: This is the end result of some prompting across a few different AI’s. Starting with ChatGPT ‘what’s this kind of motion system called again?’.</strong></p>
<div id="b0b06e73" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Constants</span></span>
<span id="cb1-5">d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">170</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Distance between the two servo bases in mm</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> inverse_kinematics_arm(x, y, l1, l2, offset, prefer_elbow_up<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>):</span>
<span id="cb1-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shift the target point according to the base offset</span></span>
<span id="cb1-9">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> offset</span>
<span id="cb1-10"></span>
<span id="cb1-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate distance from the base to the target point</span></span>
<span id="cb1-12">    D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.sqrt(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-13"></span>
<span id="cb1-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> (l1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> l2):</span>
<span id="cb1-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The target point is out of reach for this arm!"</span>)</span>
<span id="cb1-16"></span>
<span id="cb1-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Angle for the second section of the arm (elbow joint)</span></span>
<span id="cb1-18">    cos_theta2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> l1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> l2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> l1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> l2)</span>
<span id="cb1-19">    theta2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arccos(cos_theta2)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This is the "elbow up" solution</span></span>
<span id="cb1-20"></span>
<span id="cb1-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prefer elbow up by default, flip for elbow down if needed</span></span>
<span id="cb1-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> prefer_elbow_up:</span>
<span id="cb1-23">        theta2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>theta2</span>
<span id="cb1-24"></span>
<span id="cb1-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Angle for the first section of the arm (shoulder joint)</span></span>
<span id="cb1-26">    k1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> l1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> l2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.cos(theta2)</span>
<span id="cb1-27">    k2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> l2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.sin(theta2)</span>
<span id="cb1-28"></span>
<span id="cb1-29">    theta1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arctan2(y, x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> np.arctan2(k2, k1)</span>
<span id="cb1-30"></span>
<span id="cb1-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.degrees(theta1), np.degrees(theta2)</span>
<span id="cb1-32"></span>
<span id="cb1-33"></span>
<span id="cb1-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forward Kinematics for each arm</span></span>
<span id="cb1-35"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward_kinematics_arm(theta1, theta2, l1, l2, offset):</span>
<span id="cb1-36">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert angles to radians</span></span>
<span id="cb1-37">    theta1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.radians(theta1)</span>
<span id="cb1-38">    theta2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.radians(theta2)</span>
<span id="cb1-39"></span>
<span id="cb1-40">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Position of the first section's end (relative to the base)</span></span>
<span id="cb1-41">    x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> l1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.cos(theta1)</span>
<span id="cb1-42">    y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> l1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.sin(theta1)</span>
<span id="cb1-43"></span>
<span id="cb1-44">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Position of the second section's end (end-effector position)</span></span>
<span id="cb1-45">    x2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> l2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.cos(theta1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> theta2)</span>
<span id="cb1-46">    y2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> l2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.sin(theta1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> theta2)</span>
<span id="cb1-47"></span>
<span id="cb1-48">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> [offset, x1, x2], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, y1, y2]</span>
<span id="cb1-49"></span>
<span id="cb1-50"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualization of the whole system</span></span>
<span id="cb1-51"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> visualize_system(x, y, l1, l2, prefer_elbow_up<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>):</span>
<span id="cb1-52">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate angles for both arms with elbow preference</span></span>
<span id="cb1-53">    theta1_left, theta2_left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inverse_kinematics_arm(x, y, l1, l2, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> prefer_elbow_up)</span>
<span id="cb1-54">    theta1_right, theta2_right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inverse_kinematics_arm(x, y, l1, l2, d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, prefer_elbow_up)</span>
<span id="cb1-55"></span>
<span id="cb1-56">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the points for both arms using forward kinematics</span></span>
<span id="cb1-57">    x_points_left, y_points_left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> forward_kinematics_arm(theta1_left, theta2_left, l1, l2, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-58">    x_points_right, y_points_right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> forward_kinematics_arm(theta1_right, theta2_right, l1, l2, d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-59"></span>
<span id="cb1-60">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot both arms</span></span>
<span id="cb1-61">    plt.plot(x_points_left, y_points_left, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ro-'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Left Arm'</span>)</span>
<span id="cb1-62">    plt.plot(x_points_right, y_points_right, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bo-'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Right Arm'</span>)</span>
<span id="cb1-63">    plt.plot([x], [y], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'go'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Target Point'</span>)</span>
<span id="cb1-64">    plt.xlim(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>l1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>l2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, l1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>l2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb1-65">    plt.ylim(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>l1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>l2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, l1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>l2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb1-66">    plt.axhline(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>, lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb1-67">    plt.axvline(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>, lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb1-68">    plt.gca().set_aspect(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'equal'</span>, adjustable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'box'</span>)</span>
<span id="cb1-69">    plt.legend()</span>
<span id="cb1-70">    plt.title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'System Configuration (l1=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>l1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, l2=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>l2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span>)</span>
<span id="cb1-71">    plt.show()</span>
<span id="cb1-72"></span>
<span id="cb1-73"></span>
<span id="cb1-74"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Working Envelope for two arms</span></span>
<span id="cb1-75"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> plot_working_envelope(l1, l2):</span>
<span id="cb1-76">    theta_range <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>np.pi, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb1-77"></span>
<span id="cb1-78">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Envelope for the left arm</span></span>
<span id="cb1-79">    x_reach_left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> l1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.cos(theta_range) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-80">    y_reach_left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> l1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.sin(theta_range)</span>
<span id="cb1-81"></span>
<span id="cb1-82">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Envelope for the right arm</span></span>
<span id="cb1-83">    x_reach_right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> l1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.cos(theta_range) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-84">    y_reach_right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> l1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.sin(theta_range)</span>
<span id="cb1-85"></span>
<span id="cb1-86">    plt.fill(np.concatenate([x_reach_left, x_reach_right]),</span>
<span id="cb1-87">             np.concatenate([y_reach_left, y_reach_right]), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'green'</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Reachable Area'</span>)</span>
<span id="cb1-88"></span>
<span id="cb1-89">    plt.axhline(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>, lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb1-90">    plt.axvline(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>, lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb1-91">    plt.gca().set_aspect(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'equal'</span>, adjustable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'box'</span>)</span>
<span id="cb1-92">    plt.title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Working Envelope (l1=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>l1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, l2=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>l2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span>)</span>
<span id="cb1-93">    plt.legend()</span>
<span id="cb1-94">    plt.show()</span>
<span id="cb1-95"></span>
<span id="cb1-96"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example usage</span></span>
<span id="cb1-97">l1, l2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Length of the arm sections</span></span>
<span id="cb1-98">x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Target position</span></span>
<span id="cb1-99"></span>
<span id="cb1-100"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualize the system</span></span>
<span id="cb1-101">visualize_system(x, y, l1, l2)</span>
<span id="cb1-102"></span>
<span id="cb1-103"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the working envelope</span></span>
<span id="cb1-104">plot_working_envelope(l1, l2)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-hw-projects/doodle_files/figure-html/cell-2-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-hw-projects/doodle_files/figure-html/cell-2-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="586a3323" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># prompt: Make a widget with sliders for l1, l2, x and y that shows the system as these values change</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ipywidgets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> widgets</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.display <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> display</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_system(l1, l2, x, y):</span>
<span id="cb2-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb2-8">        visualize_system(x, y, l1, l2)</span>
<span id="cb2-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb2-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(e)</span>
<span id="cb2-11"></span>
<span id="cb2-12">l1_slider <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> widgets.IntSlider(value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l1:'</span>)</span>
<span id="cb2-13">l2_slider <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> widgets.IntSlider(value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l2:'</span>)</span>
<span id="cb2-14">x_slider <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> widgets.IntSlider(value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x:'</span>)</span>
<span id="cb2-15">y_slider <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> widgets.IntSlider(value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y:'</span>)</span>
<span id="cb2-16"></span>
<span id="cb2-17">widgets.interactive(update_system, l1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>l1_slider, l2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>l2_slider, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x_slider, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y_slider)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"bb3b21692c864a0ea9325555e5e783fb","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<p>PS: Not sure I trust the working area visualization, but that’s partly because there are often two unique positions the end could be in for many sets of base angles!</p>


</section>
</section>

 ]]></description>
  <category>mini-hw-projects</category>
  <guid>https://johnowhitaker.dev/mini-hw-projects/doodle.html</guid>
  <pubDate>Sat, 14 Sep 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>TIL: Kalman Filters</title>
  <link>https://johnowhitaker.dev/misc/kalman_filters.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This is a notebook I used to explore the topic of Kalman Filters, while attending a talk on the same. You can see I leveraged AI heavily - the presentation here is roughly what I had but adapted to this format from an internal tool.</p>
<p>Having everything in context and asking questions as they occured to me during the lecture felt incredibly powerful. And having the AI automate time-consuming yet easy things like “make an animation showing what happens as we vary [parameter]” and making interactive widgets to explore things made seeing what was going on so easy - way nicer than trying to conceptualize things mentally, and far more useful than the static plots with magic values that the presenter was showing.</p>
<p>I have mixed feelings sharing this - the final result is a bit of a mess, but the process of creating it while learning a new topic was amazing. Hopefully this is at least an interesting artifact :) Enjoy!</p>
</section>
<section id="kalman-filters" class="level1">
<h1>Kalman Filters</h1>
<div id="f7bcfba9" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># %pip install files-to-prompt</span></span></code></pre></div>
</div>
<div id="0a40c5fb" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !git clone https://github.com/01binary/kalman</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !files-to-prompt kalman &gt; kalman_repo.txt</span></span></code></pre></div>
</div>
<div id="eb80c37a" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>ls</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> kalman                     kalman_repo.txt
'Kalman Filter Initial Exploration.ipynb'   python-control</code></pre>
</div>
</div>
<div id="dd249063" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>ai reset</span></code></pre></div>
</div>
<div id="b231d18d" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">kalman_repo_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kalman_repo.txt'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>).read()</span></code></pre></div>
</div>
<p><strong>prompt I want to learn about Kalman filters. The repo of examples for a talk I’m going to has matlab and such, and I’d like to translate it to Python and make this notebook a tutorial that works through the material.</strong></p>
<p><strong>Can you check that you can see the material in $<code>kalman_repo_text</code> and give me a rough overview of how we might proceed?</strong></p>
<p>I can see the contents of <code>kalman_repo_text</code>. It contains several MATLAB and C++ files implementing various filtering techniques, including Kalman filters. Here’s a suggested approach to create a Python-based tutorial:</p>
<ol type="1">
<li><p>Start with simpler filters:</p>
<ul>
<li>Implement moving average filter</li>
<li>Implement low-pass filter</li>
<li>Implement simple linear regression</li>
</ul></li>
<li><p>Introduce the Kalman filter:</p>
<ul>
<li>Explain the concept and theory briefly</li>
<li>Implement a basic Kalman filter</li>
</ul></li>
<li><p>Implement the system model:</p>
<ul>
<li>Translate the MATLAB <code>systemModel</code> function to Python</li>
</ul></li>
<li><p>Implement the Kalman filter:</p>
<ul>
<li>Translate the MATLAB <code>kalmanFilter</code> function to Python</li>
</ul></li>
<li><p>Create a main loop:</p>
<ul>
<li>Read input data (from CSV or generate synthetic data)</li>
<li>Apply the Kalman filter</li>
<li>Visualize results</li>
</ul></li>
<li><p>Compare Kalman filter with simpler techniques</p></li>
<li><p>Extend to more complex examples if time permits</p></li>
</ol>
<section id="starting-with-simple-filters" class="level2">
<h2 class="anchored" data-anchor-id="starting-with-simple-filters">Starting with Simple Filters</h2>
<p><strong>Please start on this section. Use fenced code blocks, I’ll then split them out into their own cells.</strong></p>
<p>Let’s start with implementing the simple filters in Python:</p>
<ol type="1">
<li>Moving Average Filter:</li>
</ol>
<div id="0b26018b" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> moving_average_filter(input_data, window_size):</span>
<span id="cb7-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.convolve(input_data, np.ones(window_size)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>window_size, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'same'</span>)</span></code></pre></div>
</div>
<div id="9d5bd873" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>ls kalman</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>averageLowpass.mlx    kalman.cpp         movingAverage.m
CMakeLists.txt        kalman.m       README.md
constantAcceleration.mlx  linearRegression.m     simpleLinearRegression.m
gaussian.m        linearRegression.mlx   simpleLinearRegression.mlx
gaussian.mlx          linearSystemModel.mlx
input.csv         lowPass.m</code></pre>
</div>
</div>
<div id="99dc1d4d" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb10-2">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"kalman/input.csv"</span>)</span>
<span id="cb10-3">data.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">time</th>
<th data-quarto-table-cell-role="th">reading</th>
<th data-quarto-table-cell-role="th">PWM</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>0.019995</td>
<td>243</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>0.040017</td>
<td>243</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>0.060022</td>
<td>251</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>0.079997</td>
<td>244</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>0.100011</td>
<td>228</td>
<td>-111</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="2e8f19be" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">data.columns</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>Index(['time', ' reading', 'PWM'], dtype='object')</code></pre>
</div>
</div>
<div id="57e51b6b" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply moving average filter</span></span>
<span id="cb13-4">window_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb13-5">filtered_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> moving_average_filter(data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' reading'</span>], window_size)</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot</span></span>
<span id="cb13-8">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb13-9">plt.plot(data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time'</span>], data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' reading'</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Original'</span>)</span>
<span id="cb13-10">plt.plot(data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time'</span>], filtered_data, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Moving Average (window=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>window_size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span>)</span>
<span id="cb13-11">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time'</span>)</span>
<span id="cb13-12">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Reading'</span>)</span>
<span id="cb13-13">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Moving Average Filter'</span>)</span>
<span id="cb13-14">plt.legend()</span>
<span id="cb13-15">plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb13-16">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://johnowhitaker.dev/misc/kalman_filters_files/figure-html/cell-11-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><strong>make an animation of different sliding window sizes</strong> (removed for size reasons)</p>
<ol start="2" type="1">
<li>Low-Pass Filter:</li>
</ol>
<div id="e83a16f8" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> low_pass_filter(input_data, alpha):</span>
<span id="cb14-2">    output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros_like(input_data)</span>
<span id="cb14-3">    output[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> input_data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb14-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(input_data)):</span>
<span id="cb14-5">        output[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> input_data[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> alpha) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> output[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb14-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> output</span></code></pre></div>
</div>
<p><strong>Make a similar animation for low pass filter for different alpha</strong></p>
<div id="7ce08a4f" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' reading'</span>].plot()</span>
<span id="cb15-2">data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PWM'</span>].plot()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://johnowhitaker.dev/misc/kalman_filters_files/figure-html/cell-13-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<ol start="3" type="1">
<li>Simple Linear Regression:</li>
</ol>
<div id="af65613e" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> linear_regression(x, y):</span>
<span id="cb16-2">    x_mean, y_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(x), np.mean(y)</span>
<span id="cb16-3">    slope <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>((x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x_mean) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y_mean)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>((x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x_mean)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb16-4">    intercept <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> slope <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x_mean</span>
<span id="cb16-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x_new: slope <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x_new <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> intercept</span></code></pre></div>
</div>
<p>Now, let’s create some sample data and visualize the results:</p>
<div id="0b53f012" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb17-2"></span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate sample data</span></span>
<span id="cb17-4">t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data))</span>
<span id="cb17-5">true_signal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' reading'</span>]</span>
<span id="cb17-6">noisy_signal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> true_signal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.random.normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, t.shape)</span>
<span id="cb17-7"></span>
<span id="cb17-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply filters</span></span>
<span id="cb17-9">ma_filtered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> moving_average_filter(noisy_signal, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb17-10">lp_filtered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> low_pass_filter(noisy_signal, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>)</span>
<span id="cb17-11">lr_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> linear_regression(t, noisy_signal)</span>
<span id="cb17-12">lr_filtered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lr_model(t)</span>
<span id="cb17-13"></span>
<span id="cb17-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot results</span></span>
<span id="cb17-15">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb17-16">plt.plot(t, true_signal, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'True Signal'</span>)</span>
<span id="cb17-17">plt.plot(t, noisy_signal, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Noisy Signal'</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb17-18">plt.plot(t, ma_filtered, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Moving Average'</span>)</span>
<span id="cb17-19">plt.plot(t, lp_filtered, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Low-Pass Filter'</span>)</span>
<span id="cb17-20">plt.plot(t, lr_filtered, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Linear Regression'</span>)</span>
<span id="cb17-21">plt.legend()</span>
<span id="cb17-22">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Comparison of Simple Filters'</span>)</span>
<span id="cb17-23">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time'</span>)</span>
<span id="cb17-24">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Amplitude'</span>)</span>
<span id="cb17-25">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://johnowhitaker.dev/misc/kalman_filters_files/figure-html/cell-15-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>This code implements the three simple filters, generates some sample data, applies the filters, and visualizes the results for comparison.</p>
<p><strong>Great. Next section, and let’s start adding more prose explaining what’s going on.</strong></p>
</section>
<section id="introducing-the-kalman-filter" class="level2">
<h2 class="anchored" data-anchor-id="introducing-the-kalman-filter">Introducing the Kalman Filter</h2>
<p>The Kalman filter is an algorithm that uses a series of measurements observed over time, containing statistical noise and other inaccuracies, and produces estimates of unknown variables that tend to be more accurate than those based on a single measurement alone.</p>
<p>Key concepts of the Kalman filter:</p>
<ol type="1">
<li>State estimation: The filter estimates the state of a system.</li>
<li>Prediction and update: It works in a two-step process: predict and update.</li>
<li>Uncertainty handling: It considers the uncertainty of both the prediction and the measurement.</li>
</ol>
<p>Let’s implement a basic Kalman filter for a 1D system:</p>
<div id="b7b07c71" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> KalmanFilter:</span>
<span id="cb18-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, process_variance, measurement_variance, initial_estimate, initial_estimate_error):</span>
<span id="cb18-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.process_variance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> process_variance</span>
<span id="cb18-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.measurement_variance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> measurement_variance</span>
<span id="cb18-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.estimate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> initial_estimate</span>
<span id="cb18-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.estimate_error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> initial_estimate_error</span>
<span id="cb18-7"></span>
<span id="cb18-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, measurement):</span>
<span id="cb18-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prediction</span></span>
<span id="cb18-10">        prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.estimate</span>
<span id="cb18-11">        prediction_error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.estimate_error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.process_variance</span>
<span id="cb18-12"></span>
<span id="cb18-13">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update</span></span>
<span id="cb18-14">        kalman_gain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prediction_error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (prediction_error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.measurement_variance)</span>
<span id="cb18-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.estimate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> kalman_gain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (measurement <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> prediction)</span>
<span id="cb18-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.estimate_error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> kalman_gain) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> prediction_error</span>
<span id="cb18-17"></span>
<span id="cb18-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.estimate</span>
<span id="cb18-19"></span>
<span id="cb18-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example usage</span></span>
<span id="cb18-21">kf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> KalmanFilter(process_variance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># try 1e-4, 1e-3</span></span>
<span id="cb18-22">                  measurement_variance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, </span>
<span id="cb18-23">                  initial_estimate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, </span>
<span id="cb18-24">                  initial_estimate_error<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb18-25"></span>
<span id="cb18-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply Kalman filter to our noisy signal</span></span>
<span id="cb18-27">kalman_filtered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([kf.update(measurement) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> measurement <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> noisy_signal])</span>
<span id="cb18-28"></span>
<span id="cb18-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add to our plot</span></span>
<span id="cb18-30">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb18-31">plt.plot(t, true_signal, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'True Signal'</span>)</span>
<span id="cb18-32">plt.plot(t, noisy_signal, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Noisy Signal'</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb18-33">plt.plot(t, kalman_filtered, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Kalman Filter'</span>)</span>
<span id="cb18-34">plt.legend()</span>
<span id="cb18-35">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Kalman Filter Performance'</span>)</span>
<span id="cb18-36">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time'</span>)</span>
<span id="cb18-37">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Amplitude'</span>)</span>
<span id="cb18-38">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://johnowhitaker.dev/misc/kalman_filters_files/figure-html/cell-16-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>This implementation demonstrates the basic principles of the Kalman filter:</p>
<ol type="1">
<li>We initialize the filter with our best guess of the initial state and its uncertainty.</li>
<li>In each step, we first predict the next state (which is simply the current estimate in this simple case).</li>
<li>We then update our estimate based on the new measurement, weighing it against our prediction.</li>
<li>The Kalman gain determines how much we trust the measurement vs.&nbsp;our prediction.</li>
</ol>
<p>The Kalman filter often provides smoother and more accurate estimates compared to simpler filtering techniques, especially when dealing with noisy measurements and systems with known dynamics.</p>
<p><strong>Hmm, the plot shows the kalman filter line lagging behind the signal quite visibly, what could be going wrong and how might we fix it?</strong></p>
<p>The lag is likely due to the Kalman filter’s initial parameters not being well-tuned for this specific signal. To improve it:</p>
<ol type="1">
<li>Adjust process variance: Increase it to make the filter more responsive to changes.</li>
<li>Modify measurement variance: Decrease it if we trust our measurements more.</li>
<li>Improve initial estimate: Start closer to the true initial state.</li>
<li>Add velocity to the state: This helps predict trends better.</li>
</ol>
<p>Let’s implement these changes:</p>
<div id="12b13f8c" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> KalmanFilterWithVelocity:</span>
<span id="cb19-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, process_variance, measurement_variance, initial_estimate, initial_velocity):</span>
<span id="cb19-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.process_variance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> process_variance</span>
<span id="cb19-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.measurement_variance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> measurement_variance</span>
<span id="cb19-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.estimate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> initial_estimate</span>
<span id="cb19-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.velocity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> initial_velocity</span>
<span id="cb19-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.estimate_error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb19-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.velocity_error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb19-9"></span>
<span id="cb19-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, measurement, dt):</span>
<span id="cb19-11">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prediction</span></span>
<span id="cb19-12">        prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.estimate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.velocity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dt</span>
<span id="cb19-13">        prediction_error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.estimate_error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.velocity_error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.process_variance</span>
<span id="cb19-14"></span>
<span id="cb19-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update</span></span>
<span id="cb19-16">        kalman_gain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prediction_error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (prediction_error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.measurement_variance)</span>
<span id="cb19-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.estimate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> kalman_gain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (measurement <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> prediction)</span>
<span id="cb19-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.estimate_error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> kalman_gain) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> prediction_error</span>
<span id="cb19-19"></span>
<span id="cb19-20">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update velocity</span></span>
<span id="cb19-21">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.velocity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> kalman_gain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (measurement <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> prediction) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> dt</span>
<span id="cb19-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.velocity_error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.velocity_error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.process_variance</span>
<span id="cb19-23"></span>
<span id="cb19-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.estimate</span>
<span id="cb19-25"></span>
<span id="cb19-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Improved Kalman filter</span></span>
<span id="cb19-27">kf_improved <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> KalmanFilterWithVelocity(process_variance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-3</span>, </span>
<span id="cb19-28">                           measurement_variance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, </span>
<span id="cb19-29">                           initial_estimate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>true_signal[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], </span>
<span id="cb19-30">                           initial_velocity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb19-31"></span>
<span id="cb19-32">dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> t[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Time step</span></span>
<span id="cb19-33">kalman_filtered_improved <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([kf_improved.update(measurement, dt) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> measurement <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> noisy_signal])</span>
<span id="cb19-34"></span>
<span id="cb19-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot results</span></span>
<span id="cb19-36">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb19-37">plt.plot(t, true_signal, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'True Signal'</span>)</span>
<span id="cb19-38">plt.plot(t, noisy_signal, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Noisy Signal'</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb19-39">plt.plot(t, kalman_filtered, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Original Kalman Filter'</span>)</span>
<span id="cb19-40">plt.plot(t, kalman_filtered_improved, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Improved Kalman Filter (with Velocity)'</span>)</span>
<span id="cb19-41">plt.legend()</span>
<span id="cb19-42">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Improved Kalman Filter Performance'</span>)</span>
<span id="cb19-43">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time'</span>)</span>
<span id="cb19-44">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Amplitude'</span>)</span>
<span id="cb19-45">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://johnowhitaker.dev/misc/kalman_filters_files/figure-html/cell-17-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><strong>OK, I see the kalman filter now follows the noise almost too closely - can we make an animation that shows a gradual change for different variance values?</strong></p>
<p>Certainly. We can create an animation that shows how the Kalman filter performance changes with different process variance values. Here’s how we can do that:</p>
<p>In these animations you can see how we go from smooth to jagged as we increase the process variance.</p>
<p><strong>Can we take a step back and write a ‘what’s happening here’ section? What is the goal? What do we mean ‘known dynamics’? How did adding velicuty improve things? How does this generalize?’</strong></p>
<p>Certainly. Let’s add a section explaining the concepts:</p>
</section>
<section id="whats-happening-here" class="level2">
<h2 class="anchored" data-anchor-id="whats-happening-here">What’s Happening Here?</h2>
<ol type="1">
<li><p>Goal: The primary goal of the Kalman filter is to estimate the true state of a system from noisy measurements. In our case, we’re trying to recover the true signal from noisy observations.</p></li>
<li><p>Known Dynamics: This refers to our understanding of how the system evolves over time. In our simple example, we assumed the signal follows a constant velocity model (position changes linearly with time). In real-world applications, these dynamics could be more complex, like equations of motion for a spacecraft.</p></li>
<li><p>Adding Velocity:</p>
<ul>
<li>Initially, our filter only tracked position, assuming the signal stayed constant between updates.</li>
<li>By adding velocity to our state, we improved our prediction step. Now, we can anticipate trends in the signal, making our estimates more accurate and responsive.</li>
<li>This is especially helpful for signals that change rapidly or have clear trends.</li>
</ul></li>
<li><p>Generalization:</p>
<ul>
<li>The Kalman filter can be extended to track multiple variables (like position, velocity, acceleration) in multiple dimensions.</li>
<li>It can handle non-linear systems using variants like the Extended Kalman Filter or Unscented Kalman Filter.</li>
<li>The core principle remains: combine predictions based on known dynamics with new measurements, weighing each by their estimated uncertainty.</li>
</ul></li>
<li><p>Process vs Measurement Variance:</p>
<ul>
<li>Process variance represents uncertainty in our model of the system dynamics.</li>
<li>Measurement variance represents uncertainty in our sensors or measurements.</li>
<li>Balancing these determines how much we trust our model vs.&nbsp;new measurements.</li>
</ul></li>
</ol>
<p>This framework is powerful because it provides a systematic way to combine our knowledge of a system’s behavior with imperfect observations, resulting in improved state estimates.</p>
</section>
<section id="implementing-the-system-model" class="level2">
<h2 class="anchored" data-anchor-id="implementing-the-system-model">Implementing the System Model</h2>
<p>Let’s translate the MATLAB <code>systemModel</code> function to Python. This function represents the dynamics of our system:</p>
<div id="9e4b7501" class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb20-2"></span>
<span id="cb20-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initial state</span></span>
<span id="cb20-4">x0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0461</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0198</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0098</span>]).reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb20-5"></span>
<span id="cb20-6"></span>
<span id="cb20-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define system_model and kalman_filter with explicit shapes</span></span>
<span id="cb20-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> system_model(x, u):</span>
<span id="cb20-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">global</span> A, B, C, D</span>
<span id="cb20-10">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb20-11">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> u).item()</span>
<span id="cb20-12">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> u</span>
<span id="cb20-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x, y</span>
<span id="cb20-14"></span>
<span id="cb20-15"></span>
<span id="cb20-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define global constants</span></span>
<span id="cb20-17">A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([</span>
<span id="cb20-18">    [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0005</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0050</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0001</span>],</span>
<span id="cb20-19">    [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0061</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9881</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0684</span>],</span>
<span id="cb20-20">    [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0009</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0768</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9224</span>]</span>
<span id="cb20-21">])</span>
<span id="cb20-22"></span>
<span id="cb20-23">B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">8.7913e-10</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0489e-07</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.8721e-05</span>]).reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb20-24"></span>
<span id="cb20-25">C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.2908e+03</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">13.0803</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6389</span>]).reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb20-26"></span>
<span id="cb20-27">D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span></code></pre></div>
</div>
<p>This system model represents a more complex dynamic system than our previous examples. It uses matrices A, B, C, and D to model the system’s behavior:</p>
<ul>
<li>A: State transition matrix</li>
<li>B: Input control matrix</li>
<li>C: Observation matrix</li>
<li>D: Feedthrough matrix</li>
</ul>
<p>The function takes the current state <code>x</code> and input <code>u</code>, and returns the new state and output.</p>
</section>
<section id="implementing-the-kalman-filter" class="level2">
<h2 class="anchored" data-anchor-id="implementing-the-kalman-filter">Implementing the Kalman Filter</h2>
<p>Now that we have our system model, let’s implement a Kalman filter that can handle this more complex system:</p>
<div id="300859c3" class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> kalman_filter(y, z, x, P):</span>
<span id="cb21-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">global</span> A, C, Q, R</span>
<span id="cb21-3">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb21-4">    x_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> x</span>
<span id="cb21-5">    P_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> P <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> A.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Q</span>
<span id="cb21-6">    innovation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> x_pred</span>
<span id="cb21-7">    S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> P_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> C.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> R</span>
<span id="cb21-8">    K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> P_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> C.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> S.item()</span>
<span id="cb21-9">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> innovation</span>
<span id="cb21-10">    P <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (np.eye(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> C) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> P_pred</span>
<span id="cb21-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x, P, K</span></code></pre></div>
</div>
<p>This Kalman filter implementation is more general than our previous one:</p>
<ol type="1">
<li>It handles a 3D state vector (x) instead of a scalar.</li>
<li>It uses matrix operations to update the state and covariance.</li>
<li>The Kalman gain (K) is now a matrix, allowing different gains for each state variable.</li>
</ol>
<p>The filter follows the same predict-update cycle:</p>
<ul>
<li>Predict: We use our system model to predict the next state and its uncertainty.</li>
<li>Update: We correct our prediction based on the new measurement, weighing it against our prediction’s uncertainty.</li>
</ul>
<p>The matrices Q and R represent our trust in the model and measurements, respectively:</p>
<ul>
<li>Q (Process noise covariance): Higher values indicate less trust in our model.</li>
<li>R (Measurement noise covariance): Higher values indicate less trust in our measurements.</li>
</ul>
<p>Let’s now use this Kalman filter with our system model:</p>
<div id="4c6f8108" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># code removed</span></span></code></pre></div>
</div>
<p>This code demonstrates how to use our implemented Kalman filter with the system model:</p>
<ol type="1">
<li><p>We generate sample data: a true signal (sine wave), random inputs, and noisy measurements.</p></li>
<li><p>We initialize our state and covariance with the initial values we defined earlier.</p></li>
<li><p>For each time step, we:</p>
<ul>
<li>Use the system model to predict the next state and output.</li>
<li>Apply the Kalman filter to update our estimate based on the new measurement.</li>
<li>Store the estimate and the average Kalman gain.</li>
</ul></li>
<li><p>Finally, we plot the results, showing:</p>
<ul>
<li>The true signal</li>
<li>The noisy measurements</li>
<li>The Kalman filter’s estimates</li>
</ul></li>
<li><p>We also plot the average Kalman gain over time, which shows how the filter’s trust in measurements vs.&nbsp;predictions evolves.</p></li>
</ol>
<p>This example demonstrates how the Kalman filter can effectively estimate the true signal from noisy measurements, even with a more complex system model. The filter’s performance can be further tuned by adjusting the process noise (Q) and measurement noise (R) covariances.</p>
<p><strong>What’s with the state stuff? Can you give me an approachable explanation?</strong></p>
<p>Certainly. Let’s break down the concept of state in the Kalman filter:</p>
<ol type="1">
<li>What is state?
<ul>
<li>State is a set of variables that fully describe a system at any given time.</li>
<li>In our example, the state is a 3D vector, which might represent position, velocity, and acceleration.</li>
</ul></li>
<li>Why use state?
<ul>
<li>It allows us to model complex systems more accurately.</li>
<li>We can track multiple related variables simultaneously.</li>
</ul></li>
<li>State transition:
<ul>
<li>The system model (A matrix) describes how the state changes over time.</li>
<li>For example, current velocity affects future position.</li>
</ul></li>
<li>Hidden vs.&nbsp;Observable:
<ul>
<li>Not all state variables are directly measurable.</li>
<li>The Kalman filter estimates these hidden states based on observable measurements and known dynamics.</li>
</ul></li>
<li>Uncertainty in state:
<ul>
<li>The covariance matrix P represents our uncertainty about the state.</li>
<li>It gets updated with each prediction and measurement.</li>
</ul></li>
<li>Real-world analogy:
<ul>
<li>Imagine tracking a car. The state might include position, speed, and direction.</li>
<li>You can only measure position directly, but the Kalman filter helps estimate speed and direction based on position changes over time.</li>
</ul></li>
</ol>
<p>The power of the Kalman filter lies in its ability to estimate these complex, multi-dimensional states even when we can’t measure all aspects directly.</p>
<p><strong>Ah OK, so we assume the system has some underlying state that we try to model even though we can only read, say, position. And so at each step we’re doing our best to update our estimate of the state (the underlying state) based on the measurements. How do we initialize things? I see a big error right at the start that settles out. Also how do we control the ‘gain’ if that’s the right word - how fast it updates?</strong></p>
<p>You’ve got it right. To address your questions:</p>
<p>Initialization: 1. Initial state (x0): Often set to a best guess or first measurement. 2. Initial covariance (P0): Set high to indicate initial uncertainty.</p>
<p>The large initial error occurs because our initial guess is likely off, but the filter quickly corrects as it processes more measurements.</p>
<p>Controlling the gain/update speed: 1. Process noise covariance (Q): Higher values make the filter more responsive but noisier. 2. Measurement noise covariance (R): Higher values make the filter trust measurements less, resulting in smoother but slower updates.</p>
<p>To reduce the initial error and control responsiveness: 1. Improve initial state estimate if possible. 2. Start with higher Q and lower R, then gradually adjust. 3. Use a “fading memory” factor to give more weight to recent measurements.</p>
<p><strong>Animate what happens as we lower Q (plot a few values of R for each Q as different colored lines). Do this but for the data I loaded right at the start</strong></p>
<p><strong>Can you add error bands to the plot?</strong></p>
</section>
</section>
<section id="outstanding-questions" class="level1">
<h1>Outstanding Questions</h1>
<p><strong>Some extra stuff I want to know</strong></p>
<ul>
<li><strong>This is for extimating something from noisy measurements but doesn’t really say anything about controlling a system right - we’d plug the output of the Kalman filter into some other control system? (Can we use the estimated state for better control?)</strong></li>
<li><strong>Sometimes more accurate measurements arrive with a delay. For e.g.&nbsp;a VR controller might have internam IMU data, but sometimes get high-quality absolute position sent from the base stations. How hard is it to account for ‘stale’ data like this?</strong></li>
<li><strong>Do we ever take inputs into account? Rather than just getting sensor data we might have the set-point of a motor driver or the current or something.</strong> <strong>Any thoughts/input on my final questions, or other things we should cover from the repo?</strong></li>
</ul>
<ol type="1">
<li>Kalman filter and control:
<ul>
<li>Yes, Kalman filter estimates are often used as inputs to control systems.</li>
<li>The estimated state provides a more accurate basis for control decisions.</li>
<li>Example: In a drone, estimated position and velocity can be used for more stable flight control.</li>
</ul></li>
<li>Handling delayed measurements:
<ul>
<li>This is addressed by “out-of-sequence measurement” (OOSM) algorithms.</li>
<li>You can retroactively update past states and then propagate forward.</li>
<li>It’s more complex but doable, especially important in distributed sensing systems.</li>
</ul></li>
<li>Incorporating inputs:
<ul>
<li>The Kalman filter already accounts for inputs in the system model (B matrix).</li>
<li>Known inputs (like motor commands) can improve state estimation accuracy.</li>
<li>This is crucial in robotics where we know what commands were sent to actuators.</li>
</ul></li>
</ol>
<p>Additional topics from the repo: - Gaussian filters (in gaussian.m): Another smoothing technique. - Extended Kalman Filter: For non-linear systems. - Comparing Kalman filter with simpler techniques like moving average.</p>
<p><strong>Wait so should B be 0 if we don’t know / can’t see those inputs?</strong></p>
<p>No, B should not be 0 even if we don’t know or can’t see the inputs. Here’s why:</p>
<ol type="1">
<li><p>B represents how inputs affect the state, regardless of whether we know the inputs.</p></li>
<li><p>If inputs exist but are unknown:</p>
<ul>
<li>Keep B as is</li>
<li>Treat unknown inputs as process noise, increasing Q accordingly</li>
</ul></li>
<li><p>If there are no inputs at all:</p>
<ul>
<li>You can remove B and the input term from the model</li>
<li>This simplifies the equations, but is a different scenario from unknown inputs</li>
</ul></li>
<li><p>In practice:</p>
<ul>
<li>Known inputs: Use actual values</li>
<li>Unknown inputs: Use best estimates or set to zero, but keep B non-zero</li>
<li>Adjust Q to account for uncertainty in unknown inputs</li>
</ul></li>
</ol>
<p>The key is to maintain the model structure while handling uncertainty through the noise covariance matrices.</p>
<p><strong>OK but in this example B is fixed and we don’t update it with estimates right?</strong></p>
<p>Correct. In this example:</p>
<ol type="1">
<li>B is fixed: It’s part of the system model and doesn’t change.</li>
<li>We don’t update B: It represents the known relationship between inputs and state changes.</li>
<li>Inputs (u) are used: We apply known or estimated inputs in each step.</li>
<li>No estimation of B: We assume the model (including B) is correct.</li>
</ol>
<p>If the true B were different from our model, we’d compensate through: - Adjusting Q (process noise) - State estimation (x gets updated to compensate for model inaccuracies)</p>
<p>In more advanced applications, you might estimate B online, but that’s beyond the scope of this basic Kalman filter implementation.</p>
<p><strong>Where do we get the initial values for B (and for the other matrices for that matter)?</strong></p>
<p>The initial values for matrices A, B, C, D, and initial states come from system identification or modeling:</p>
<ol type="1">
<li><p>Physical modeling: Derive equations based on known physics of the system.</p></li>
<li><p>System identification: Use input-output data to estimate model parameters.</p>
<ul>
<li>Tools like MATLAB’s System Identification Toolbox can help.</li>
</ul></li>
<li><p>Empirical testing: Measure system response to known inputs.</p></li>
<li><p>Prior knowledge: Use values from similar systems or expert knowledge.</p></li>
<li><p>Iterative refinement: Start with rough estimates, then refine through testing.</p></li>
</ol>
<p>For Q and R: - Q: Initially set based on expected model inaccuracies. - R: Determined from sensor specifications or measurement variance.</p>
<p>In this example, these values likely came from a combination of system identification and empirical testing on the specific system being modeled.</p>
<p><strong>How would I go about doing System Identification in Python? Say I have a black box system, and a record of past inputs and outputs.</strong> [hallucinated results removed]</p>
<p><strong>Tell me about particle systems and how they extend/replace kalman filters for non-linear systems?</strong></p>
<p>Particle filters, also known as Sequential Monte Carlo methods, extend Kalman filter concepts to non-linear systems:</p>
<ol type="1">
<li><p>Core idea: Represent the state distribution with a set of weighted particles.</p></li>
<li><p>Advantages:</p>
<ul>
<li>Handle non-linear systems and non-Gaussian noise</li>
<li>Can represent multimodal distributions</li>
</ul></li>
<li><p>Process:</p>
<ul>
<li>Prediction: Move particles according to system dynamics</li>
<li>Update: Adjust particle weights based on measurements</li>
<li>Resampling: Replace low-weight particles to maintain diversity</li>
</ul></li>
<li><p>Comparison to Kalman filters:</p>
<ul>
<li>More computationally intensive</li>
<li>More flexible for complex systems</li>
<li>Better for highly non-linear or non-Gaussian scenarios</li>
</ul></li>
<li><p>Applications:</p>
<ul>
<li>Robot localization</li>
<li>Object tracking in computer vision</li>
<li>Financial modeling</li>
</ul></li>
<li><p>Implementation:</p>
<ul>
<li>Typically involves Monte Carlo sampling</li>
<li>Can be parallelized for efficiency</li>
</ul></li>
</ol>
<p>Particle filters are preferred when system non-linearities or non-Gaussian noise make Kalman filters (even extended or unscented versions) inadequate.</p>
</section>
<section id="new-session" class="level1">
<h1>New Session</h1>
<div id="e35ea3ec" class="cell" data-execution_count="52">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">data.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="52">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">time</th>
<th data-quarto-table-cell-role="th">reading</th>
<th data-quarto-table-cell-role="th">PWM</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>0.019995</td>
<td>243</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>0.040017</td>
<td>243</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>0.060022</td>
<td>251</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>0.079997</td>
<td>244</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>0.100011</td>
<td>228</td>
<td>-111</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="10d58de0" class="cell" data-execution_count="53">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">smooth_readings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' reading'</span>].rolling(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>).mean()</span>
<span id="cb24-2">smooth_readings.plot()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://johnowhitaker.dev/misc/kalman_filters_files/figure-html/cell-22-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="4218cac8" class="cell" data-execution_count="54">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PWM'</span>]</span>
<span id="cb25-2">inputs.plot()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://johnowhitaker.dev/misc/kalman_filters_files/figure-html/cell-23-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><strong>I want to figure out a state space model for this system. It’s a spinning motor with a PWM control signal. Can you help me do this?</strong></p>
<p>To develop a state space model for this spinning motor system with PWM control, we’ll need to:</p>
<ol type="1">
<li>Identify states (likely motor position and velocity)</li>
<li>Define inputs (PWM signal)</li>
<li>Determine outputs (sensor readings)</li>
<li>Formulate state equations</li>
</ol>
<p>Let’s start with a simple second-order model:</p>
<div id="31c3a4c3" class="cell" data-execution_count="58">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb26-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.integrate <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> odeint</span>
<span id="cb26-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.optimize <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> minimize</span>
<span id="cb26-4"></span>
<span id="cb26-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> motor_model(state, t, pwm, params):</span>
<span id="cb26-6">    theta, omega <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> state</span>
<span id="cb26-7">    J, b, K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> params</span>
<span id="cb26-8">    pwm_t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.interp(t, data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time'</span>], pwm)</span>
<span id="cb26-9">    dtheta_dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> omega</span>
<span id="cb26-10">    domega_dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pwm_t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> omega) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> J</span>
<span id="cb26-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> [dtheta_dt, domega_dt]</span>
<span id="cb26-12"></span>
<span id="cb26-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> simulate(pwm, params, t):</span>
<span id="cb26-14">    initial_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb26-15">    states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> odeint(motor_model, initial_state, t, args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(pwm, params))</span>
<span id="cb26-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> states[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return angular velocity</span></span>
<span id="cb26-17"></span>
<span id="cb26-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rest of the code remains the same</span></span>
<span id="cb26-19"></span>
<span id="cb26-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> objective(params, pwm, t, actual_readings):</span>
<span id="cb26-21">    simulated <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> simulate(pwm, params, t)</span>
<span id="cb26-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>((simulated <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> actual_readings)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb26-23"></span>
<span id="cb26-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare data</span></span>
<span id="cb26-25">t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time'</span>].values</span>
<span id="cb26-26">pwm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PWM'</span>].values</span>
<span id="cb26-27">readings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' reading'</span>].values</span>
<span id="cb26-28"></span>
<span id="cb26-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Optimize parameters</span></span>
<span id="cb26-30">initial_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span>]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># J, b, K</span></span>
<span id="cb26-31">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> minimize(objective, initial_params, args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(pwm, t, readings))</span>
<span id="cb26-32"></span>
<span id="cb26-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get optimized parameters</span></span>
<span id="cb26-34">J, b, K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> result.x</span>
<span id="cb26-35"></span>
<span id="cb26-36"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Optimized parameters: J=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>J<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.6f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, b=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>b<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.6f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, K=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>K<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.6f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb26-37"></span>
<span id="cb26-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulate with optimized parameters</span></span>
<span id="cb26-39">simulated <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> simulate(pwm, [J, b, K], t)</span>
<span id="cb26-40"></span>
<span id="cb26-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot results</span></span>
<span id="cb26-42"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb26-43">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb26-44">plt.plot(t, readings, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Actual'</span>)</span>
<span id="cb26-45">plt.plot(t, simulated, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Simulated'</span>)</span>
<span id="cb26-46">plt.legend()</span>
<span id="cb26-47">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time'</span>)</span>
<span id="cb26-48">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Angular Velocity'</span>)</span>
<span id="cb26-49">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Optimized parameters: J=0.000010, b=0.000010, K=0.000010</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://johnowhitaker.dev/misc/kalman_filters_files/figure-html/cell-24-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><strong>nice! It looks like we’re missing an ofset or something though, the simulated is good except ~250 below the actual</strong></p>
<div id="f3e14189" class="cell" data-execution_count="60">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> motor_model(state, t, pwm, params):</span>
<span id="cb28-2">    theta, omega <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> state</span>
<span id="cb28-3">    J, b, K, offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> params</span>
<span id="cb28-4">    pwm_t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.interp(t, data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time'</span>], pwm)</span>
<span id="cb28-5">    dtheta_dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> omega</span>
<span id="cb28-6">    domega_dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pwm_t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> omega) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> J</span>
<span id="cb28-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> [dtheta_dt, domega_dt]</span>
<span id="cb28-8"></span>
<span id="cb28-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> simulate(pwm, params, t):</span>
<span id="cb28-10">    initial_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb28-11">    states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> odeint(motor_model, initial_state, t, args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(pwm, params))</span>
<span id="cb28-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> states[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> params[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add offset to angular velocity</span></span>
<span id="cb28-13"></span>
<span id="cb28-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> objective(params, pwm, t, actual_readings):</span>
<span id="cb28-15">    simulated <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> simulate(pwm, params, t)</span>
<span id="cb28-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>((simulated <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> actual_readings)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb28-17"></span>
<span id="cb28-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update initial parameters and optimization</span></span>
<span id="cb28-19">initial_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># J, b, K, offset</span></span>
<span id="cb28-20">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> minimize(objective, initial_params, args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(pwm, t, readings))</span>
<span id="cb28-21"></span>
<span id="cb28-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get optimized parameters</span></span>
<span id="cb28-23">J, b, K, offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> result.x</span>
<span id="cb28-24"></span>
<span id="cb28-25"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Optimized parameters: J=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>J<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.6f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, b=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>b<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.6f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, K=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>K<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.6f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, offset=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>offset<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.6f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb28-26"></span>
<span id="cb28-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulate with optimized parameters</span></span>
<span id="cb28-28">simulated <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> simulate(pwm, [J, b, K, offset], t)</span>
<span id="cb28-29"></span>
<span id="cb28-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot results</span></span>
<span id="cb28-31">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb28-32">plt.plot(t, readings, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Actual'</span>)</span>
<span id="cb28-33">plt.plot(t, simulated, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Simulated'</span>)</span>
<span id="cb28-34">plt.legend()</span>
<span id="cb28-35">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time'</span>)</span>
<span id="cb28-36">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Angular Velocity'</span>)</span>
<span id="cb28-37">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Optimized parameters: J=0.000019, b=0.000002, K=0.000009, offset=250.017132</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://johnowhitaker.dev/misc/kalman_filters_files/figure-html/cell-25-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><strong>Can you do this now with a position, velocity and acceleration version, using the A, B, C, D notation for state space stuff? You can assume D is 0. Include an offset. </strong></p>
<div id="123499e8" class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb30-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.integrate <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> odeint</span>
<span id="cb30-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.optimize <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> minimize</span>
<span id="cb30-4"></span>
<span id="cb30-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> state_space_model(x, t, u, params):</span>
<span id="cb30-6">    A, B, C, offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> params</span>
<span id="cb30-7">    dx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> u(t)</span>
<span id="cb30-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> dx</span>
<span id="cb30-9"></span>
<span id="cb30-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> simulate(u, t, params):</span>
<span id="cb30-11">    A, B, C, offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> params</span>
<span id="cb30-12">    x0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb30-13">    sol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> odeint(state_space_model, x0, t, args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(u, params))</span>
<span id="cb30-14">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.dot(sol, C.T) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> offset</span>
<span id="cb30-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> y</span>
<span id="cb30-16"></span>
<span id="cb30-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> objective(params, u, t, y_actual):</span>
<span id="cb30-18">    A, B, C, offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> params[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>].reshape((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)), params[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>], params[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>], params[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>]</span>
<span id="cb30-19">    u_interp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> t: np.interp(t, data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time'</span>], u)</span>
<span id="cb30-20">    y_sim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> simulate(u_interp, t, (A, B, C, offset))</span>
<span id="cb30-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>((y_sim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y_actual)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb30-22"></span>
<span id="cb30-23">t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time'</span>].values</span>
<span id="cb30-24">u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PWM'</span>].values</span>
<span id="cb30-25">y_actual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' reading'</span>].values</span>
<span id="cb30-26"></span>
<span id="cb30-27">A_init <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]])</span>
<span id="cb30-28">B_init <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb30-29">C_init <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb30-30">offset_init <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span></span>
<span id="cb30-31">params_init <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.concatenate((A_init.flatten(), B_init, C_init, [offset_init]))</span>
<span id="cb30-32"></span>
<span id="cb30-33">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> minimize(objective, params_init, args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(u, t, y_actual))</span>
<span id="cb30-34"></span>
<span id="cb30-35">A_opt, B_opt, C_opt, offset_opt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> result.x[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>].reshape((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)), result.x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>], result.x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>], result.x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>]</span>
<span id="cb30-36"></span>
<span id="cb30-37">u_interp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> t: np.interp(t, data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time'</span>], u)</span>
<span id="cb30-38">y_sim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> simulate(u_interp, t, (A_opt, B_opt, C_opt, offset_opt))</span>
<span id="cb30-39"></span>
<span id="cb30-40">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb30-41">plt.plot(t, y_actual, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Actual'</span>)</span>
<span id="cb30-42">plt.plot(t, y_sim, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Simulated'</span>)</span>
<span id="cb30-43">plt.legend()</span>
<span id="cb30-44">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time'</span>)</span>
<span id="cb30-45">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Reading'</span>)</span>
<span id="cb30-46">plt.show()</span>
<span id="cb30-47"></span>
<span id="cb30-48"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Optimized A matrix:"</span>)</span>
<span id="cb30-49"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(A_opt)</span>
<span id="cb30-50"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Optimized B vector:"</span>)</span>
<span id="cb30-51"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(B_opt)</span>
<span id="cb30-52"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Optimized C vector:"</span>)</span>
<span id="cb30-53"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(C_opt)</span>
<span id="cb30-54"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Optimized offset:"</span>)</span>
<span id="cb30-55"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(offset_opt)</span></code></pre></div>
</div>
<p><strong>Use this estimated system model for a kalman filter applied to the data</strong></p>
<div id="20bdfba1" class="cell" data-execution_count="85">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb31-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.linalg <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> solve_discrete_are</span>
<span id="cb31-3"></span>
<span id="cb31-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># State space model parameters</span></span>
<span id="cb31-5">A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A_opt</span>
<span id="cb31-6">B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> B_opt.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reshape B to column vector</span></span>
<span id="cb31-7">C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C_opt.reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reshape C to row vector</span></span>
<span id="cb31-8">offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> offset_opt</span>
<span id="cb31-9"></span>
<span id="cb31-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Kalman filter parameters</span></span>
<span id="cb31-11">Q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.eye(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Process noise covariance</span></span>
<span id="cb31-12">R <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0e2</span>]])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Measurement noise covariance</span></span>
<span id="cb31-13"></span>
<span id="cb31-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute Kalman gain</span></span>
<span id="cb31-15">P <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> solve_discrete_are(A, B, Q, R)</span>
<span id="cb31-16">K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> P <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> C.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> np.linalg.inv(C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> P <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> C.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> R)</span>
<span id="cb31-17"></span>
<span id="cb31-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> kalman_filter(z, x_prev, P_prev):</span>
<span id="cb31-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Predict</span></span>
<span id="cb31-20">    x_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> x_prev <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> z[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PWM'</span>]</span>
<span id="cb31-21">    P_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> P_prev <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> A.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Q</span>
<span id="cb31-22">    </span>
<span id="cb31-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update</span></span>
<span id="cb31-24">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> z[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' reading'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> x_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> offset)</span>
<span id="cb31-25">    S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> P_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> C.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> R</span>
<span id="cb31-26">    K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> P_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> C.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> np.linalg.inv(S)</span>
<span id="cb31-27">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> y</span>
<span id="cb31-28">    P <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (np.eye(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> C) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> P_pred</span>
<span id="cb31-29">    </span>
<span id="cb31-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x, P</span>
<span id="cb31-31"></span>
<span id="cb31-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize</span></span>
<span id="cb31-33">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb31-34">P <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.eye(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb31-35"></span>
<span id="cb31-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run Kalman filter</span></span>
<span id="cb31-37">filtered_states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb31-38"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _, z <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> data.iterrows():</span>
<span id="cb31-39">    x, P <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kalman_filter(z, x, P)</span>
<span id="cb31-40">    filtered_states.append(x.flatten())</span>
<span id="cb31-41"></span>
<span id="cb31-42">filtered_states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(filtered_states)</span>
<span id="cb31-43"></span>
<span id="cb31-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot results</span></span>
<span id="cb31-45">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb31-46">plt.plot(data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time'</span>], data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' reading'</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Actual Readings'</span>)</span>
<span id="cb31-47">plt.plot(data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time'</span>], (C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> filtered_states.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> offset).flatten(), label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Kalman Filter Estimate'</span>)</span>
<span id="cb31-48">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time'</span>)</span>
<span id="cb31-49">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Reading'</span>)</span>
<span id="cb31-50">plt.legend()</span>
<span id="cb31-51">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Kalman Filter Estimation'</span>)</span>
<span id="cb31-52">plt.show()</span>
<span id="cb31-53"></span>
<span id="cb31-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot individual state estimates</span></span>
<span id="cb31-55">fig, axs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>), sharex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb31-56">state_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Position'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Velocity'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Acceleration'</span>]</span>
<span id="cb31-57"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>):</span>
<span id="cb31-58">    axs[i].plot(data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time'</span>], filtered_states[:, i], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Estimated </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>state_labels[i]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb31-59">    axs[i].set_ylabel(state_labels[i])</span>
<span id="cb31-60">    axs[i].legend()</span>
<span id="cb31-61">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time'</span>)</span>
<span id="cb31-62">plt.tight_layout()</span>
<span id="cb31-63">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://johnowhitaker.dev/misc/kalman_filters_files/figure-html/cell-27-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://johnowhitaker.dev/misc/kalman_filters_files/figure-html/cell-27-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="66751e2f" class="cell" data-execution_count="86">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PWM"</span>].plot()</span>
<span id="cb32-2">ax.plot(filtered_states[:, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Acceleration (estimated)"</span>)</span>
<span id="cb32-3">plt.legend()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://johnowhitaker.dev/misc/kalman_filters_files/figure-html/cell-28-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><strong>What is the extended kalman filter? And ‘unscented’?</strong></p>
<p>The Extended Kalman Filter (EKF) is used for nonlinear systems. It linearizes the system around the current estimate using partial derivatives of the process and measurement functions. This allows it to handle mild nonlinearities, but can fail with highly nonlinear systems.</p>
<p>The Unscented Kalman Filter (UKF) uses a deterministic sampling technique known as the unscented transform to pick a minimal set of sample points around the mean. These points are then propagated through the nonlinear functions, capturing the posterior mean and covariance more accurately than EKF, especially for highly nonlinear systems.</p>
<p>UKF generally performs better than EKF for highly nonlinear systems and doesn’t require the computation of Jacobian matrices, which can be complex or impossible for some systems.</p>
<p><strong>Do either of them update the state space model over time?</strong></p>
<p>Neither the Extended Kalman Filter (EKF) nor the Unscented Kalman Filter (UKF) inherently update the state space model over time. They estimate the state of the system based on a given model and measurements. For adaptive filtering that updates the model, you’d need to implement additional techniques like online parameter estimation or use adaptive variants of these filters.</p>


</section>

 ]]></description>
  <category>tils</category>
  <guid>https://johnowhitaker.dev/misc/kalman_filters.html</guid>
  <pubDate>Sun, 08 Sep 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Min P Sampling: Balancing Creativity and Coherence (paper explanation + code)</title>
  <link>https://johnowhitaker.dev/misc/minp.html</link>
  <description><![CDATA[ 




<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/LTf_SJOQH4s" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<p>Paper: https://arxiv.org/abs/2407.01082</p>
<p>Code: https://gist.github.com/johnowhitaker/2d14cfed0d54c20e3299ce94d52857c4</p>



 ]]></description>
  <category>Video</category>
  <guid>https://johnowhitaker.dev/misc/minp.html</guid>
  <pubDate>Fri, 30 Aug 2024 00:00:00 GMT</pubDate>
  <media:content url="https://johnowhitaker.dev/misc/thumbnails/minp.png" medium="image" type="image/png" height="85" width="144"/>
</item>
<item>
  <title>Single-Pixel Camera (Hardware)</title>
  <link>https://johnowhitaker.dev/mini-hw-projects/single-pixel-camera.html</link>
  <description><![CDATA[ 




<p>Taking photos one pixel at a time is a funny idea. It’s been done a few tmes (e.g.&nbsp;https://hackaday.com/2024/07/23/photoresistor-based-single-pixel-camera/, love the construction techniques!) but I wanted to make my own, partly to see if I could use AI to imagine better pictures based on the data. A recent paper (https://arxiv.org/abs/2408.07541) finally pushed me over the edge in terms of motivation, and so yesterday when I needed a quick win after a slow low-motivation day I whipped this up.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-hw-projects/images/single-pixel-camera.jpg" class="img-fluid figure-img"></p>
<figcaption>Single Pixel Camera</figcaption>
</figure>
</div>
<p>The design is quite simple - a few 3D printed parts hold two servos in place such that they can scan a tube back and forth. A Raspberry Pi Pico microcontroller controls the servos and reads the voltage, with the LDR and a 10k resistor forming a voltage divider. The Pico sends the data to a laptop over USB, where I can control it and plot the data however I like.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-hw-projects/images/first_pic.jpg" class="img-fluid figure-img"></p>
<figcaption>First pic!</figcaption>
</figure>
</div>
<p>I’ve uploaded an assembly video <a href="https://youtu.be/K5qvwNy6jYg">here</a>, and I’ll hopefully do a follow-on post about the software side when I get time. The files to get a minimal pic like the one above working are dumped on GitHub <a href="https://github.com/johnowhitaker/single_pixel_camera">here</a>. You can get the 3D print files from this <a href="https://www.printables.com/model/981878-single-pixel-camera">printables link</a> or on GitHub.</p>



 ]]></description>
  <category>mini-hw-projects</category>
  <guid>https://johnowhitaker.dev/mini-hw-projects/single-pixel-camera.html</guid>
  <pubDate>Wed, 21 Aug 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Building Silly Projects with FastHTML</title>
  <dc:creator>Jonathan Whitaker</dc:creator>
  <link>https://johnowhitaker.dev/mini-projects/silly-projects-fasthtml.html</link>
  <description><![CDATA[ 




<p>We’ve been working on FastHTML, a web app framework that makes it easy to build web apps with Python. In the process, I personally have learnt a lot about how the web works, and spent a fair amount of time figuring out ‘good’ ways to do things for the examples and documentation we’ve been putting out. But one side-effect of having an easy-to-use web app framework is that I’ve also been reaching for it in my personal projects, and I thought in this post I’d share some notes from a few of these experiments. None of these projects are particularly exemplary, but that’s sort of the point - if they were good, they’d cout as work! So, take these as inspiration (you can do thigns) but not as examples (you should probably do things slightly differently).</p>
<section id="notfriend" class="level2">
<h2 class="anchored" data-anchor-id="notfriend">NotFriend</h2>
<p>Project URL: <a href="https://notfriend.org/">notfriend.org</a> Code: https://github.com/johnowhitaker/notfriend</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-projects/images/s_notfriend.png" class="img-fluid figure-img"></p>
<figcaption>NotFriend landing page</figcaption>
</figure>
</div>
<p>In one of our answerai ‘watercooler’ calls, the topic of the ‘Friend’ pendant came up. I jokingly onted that notfriend.org was available, and that we should do some sort of parody. I did my more serious work for the day then knocked out the site (now visible at <a href="notfriend-production.up.railway.app">notfriend-production.up.railway.app</a> - more on that shortly) that evening, sharing it the next morning once I’d tested the payments and tweaked a few minor UI things to my satisfaction.</p>
<p>It seems like the standard approach to designing a visually appealing site these days is to hire a designer to sketch out the ‘look’ of a site in figma and then spend ages trying to match that in code. I got a taste of how tedious this can be helping to do exactly this for an internal project, and Jeremy had a similar experience working with the design team on the FastHTML homepage. We both came away with the same conclusion: how do people live like this? Alternative apporaches that feel more reasonable are:</p>
<ul>
<li>Start from a template</li>
<li>Use a set library of components. We’re starting to explore this with fh-bootstrap, and there are community attempts to port things like shadcn to FastHTML.</li>
<li>Get an AI to do all the hard work! Spoiler, this is what I went with for NotFriend :)</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-projects/images/s_v0.png" class="img-fluid figure-img"></p>
<figcaption>V0 screenshot</figcaption>
</figure>
</div>
<p>The tool I tried is called Vercel V0, although <a href="https://github.com/wandb/openui">OpenUI</a> from Chris Van Pelt seems like a great open-source alternative that lets you control the model, system prompt etc. V0 spits out code, and has a mechanism for requesting design changes (“make the header larger, change the color palette to greens…”). I copied the generated HTML into our <a href="https://h2f.answer.ai/">‘h2f’ converter</a> and voila - a decent-looking starting point to tinker with.</p>
<p>Another pleasingly simple part of the process was letting people actually buy the thing! Taking payments via stripe is as simple as setting a few secrets and then sending the user to a checkout page created by stripe:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># They submit a form with their email, physical address and type of product</span></span>
<span id="cb1-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.get</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/buy/"</span>)</span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> buy_credits(product:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, email:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, address:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb1-4">    s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stripe.checkout.Session.create(</span>
<span id="cb1-5">        payment_method_types<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'card'</span>],</span>
<span id="cb1-6">        metadata <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"product"</span>: product,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"email"</span>:email,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"address"</span>:address},</span>
<span id="cb1-7">        line_items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[{</span>
<span id="cb1-8">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'price_data'</span>: {</span>
<span id="cb1-9">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'currency'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'usd'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'unit_amount'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2496</span>,</span>
<span id="cb1-10">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'product_data'</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'You are buying a NotFriend (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>product<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> version) - thank you for being a part of this!'</span>},</span>
<span id="cb1-11">            }, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'quantity'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb1-12">        }],</span>
<span id="cb1-13">        mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'payment'</span>,</span>
<span id="cb1-14">        success_url<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>DOMAIN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/success?session_id=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{CHECKOUT_SESSION_ID}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb1-15">        cancel_url<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>DOMAIN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/cancel'</span>,</span>
<span id="cb1-16">    )</span>
<span id="cb1-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> RedirectResponse(s[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'url'</span>])</span></code></pre></div>
<p>You can add a webhook to listen for successful payments and then update the user’s account in your database, but for this project I just manually checked the stripe dashboard and then sent orders to the addresses myself - passing the metadata along with the order made this easy. I had two sales - digging around the stripe dashboard to find the info was a perfectly reasonable approach. When you have thousands of sales you can set up automations, but that’s a good problem to have! I don’t want to make out that this is completely trivial, but wow the ability to set this up, and the ease with which I could pop a few notfriends in the mail and send them off, really highlights how doable it is to set up a small business online these days (if you’re lucky enough to live in the right place).</p>
</section>
<section id="distilhn" class="level2">
<h2 class="anchored" data-anchor-id="distilhn">DistilHN</h2>
<p>Project url: <a href="https://distilhn.com/">https://distilhn.com/</a> Code: https://github.com/AnswerDotAI/fasthtml-example/tree/main/hacker_news_reskin</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-projects/images/s_distilhn.png" class="img-fluid figure-img"></p>
<figcaption>DistilHN screenshot</figcaption>
</figure>
</div>
<p>This one was a re-do of a project I first made in ~2021/22. It takes the front-page articles on Hacker News, summarizes them and presents them in a nice UI with links to both the articles and the HN comments. The original version used a BART model for summarization, and Flask for the backend. It took remarkably little fiddling to get a FastHTML version out of Claude (<a href="https://claude.ai/share/86b73f06-af42-4e85-96ce-f6f74a224ca8">conversation link</a> for answerai people).</p>
<p>It’s amazing how anyone can now drop in code like this:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">sp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""You are a helpful assistant that summarizes articles. Given an article text, possibly including unrelated scraping artefacts, return a summary of the article. If the text is just something like 'enable javascript' or 'turn off your ad blocker', just respond with "Could not summarize article." Otherwise, respond with just the summary (no preamble). Favour extremely conciseness and brevity. Start directly with the contents. Aim for &lt;100 words."""</span></span>
<span id="cb2-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">async</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> summarize_text(text):</span>
<span id="cb2-3">    chat_completion <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client.chat.completions.create(</span>
<span id="cb2-4">        messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[{</span>
<span id="cb2-5">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"system"</span>,</span>
<span id="cb2-6">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: sp</span>
<span id="cb2-7">        }, {</span>
<span id="cb2-8">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>,</span>
<span id="cb2-9">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Please summarize the following text: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>text<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb2-10">        }],</span>
<span id="cb2-11">        model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpt-4o-mini"</span>,</span>
<span id="cb2-12">    )</span>
<span id="cb2-13"></span>
<span id="cb2-14">    summary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chat_completion.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].message.content.strip()</span>
<span id="cb2-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> summary</span></code></pre></div>
<p>This is page I actually visit, since unlike regular HN I can actually get a sense of the article without having to read the whole thing, and it helps me avoid ending up with tons of tabs and comments sections opened. It’s really special that anyone with a bit of coding knowledge can make something like this, and then share it with the world, in hours rather than weeks. Bespoke software for the win :)</p>
</section>
<section id="moodle---the-benefit-of-progressive-extension" class="level2">
<h2 class="anchored" data-anchor-id="moodle---the-benefit-of-progressive-extension">Moodle - the benefit of progressive extension</h2>
<p>Project URL: <a href="https://moodle-game.com/">moodle-game.com</a> Code: https://github.com/AnswerDotAI/fasthtml-example/tree/main/03_pictionary/moodle_demo</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://github.com/AnswerDotAI/fasthtml-example/raw/main/03_pictionary/in_action.gif" class="img-fluid figure-img"></p>
<figcaption>Moodle screen capture</figcaption>
</figure>
</div>
<p>FastHTML lends itself to tacking on features as you go. Start with a homepage. Add an about route. Add a navbar. Add a countdown. Add a high-scores list. You can end up with something a little chaotic (see the source code) but ‘locality of behaviour’ means it’s generally super easy to see how one specific thing works. This is how I ended up with Moodle!</p>
<p>To illistrate what I mean by locality of behaviour: if you want to know how the leaderboard works, you only have to look at one place main.py:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.get</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/leaderboard'</span>)</span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> leaderboard():</span>
<span id="cb3-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Top 10 in last 24 hours and approved games only</span></span>
<span id="cb3-4">    fastest_games <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> games(where<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"end_time IS NOT NULL AND end_time &gt; strftime('</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">', 'now', '-1 day') AND approved"</span>,</span>
<span id="cb3-5">                        order_by<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(end_time - start_time) ASC"</span>,</span>
<span id="cb3-6">                        limit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb3-7">    rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb3-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, game <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(fastest_games, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb3-9">        duration <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> game.end_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> game.start_time</span>
<span id="cb3-10">        player_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> game.player_name <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> game.player_name <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Anonymous"</span></span>
<span id="cb3-11">        rows.append(</span>
<span id="cb3-12">            Tr(Td(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(i)), Td(player_name), Td(game.word),</span>
<span id="cb3-13">            Td(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>duration<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> seconds"</span>),</span>
<span id="cb3-14">            Td(A(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"View"</span>, href<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"/game-summary?game_id=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>game<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))))</span>
<span id="cb3-15"></span>
<span id="cb3-16">    table <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Table(Thead(</span>
<span id="cb3-17">        Tr(Th(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rank"</span>), Th(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Player"</span>), Th(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Word"</span>), Th(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Duration"</span>),</span>
<span id="cb3-18">            Th(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Details"</span>))),</span>
<span id="cb3-19">                    Tbody(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>rows),</span>
<span id="cb3-20">                    cls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"table table-striped table-hover"</span>)</span>
<span id="cb3-21"></span>
<span id="cb3-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> Title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Leaderboard - Fastest Games"</span>),  Navbar(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"leaderboard"</span>),  Main(</span>
<span id="cb3-23">            H1(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Top 10 Fastest Games (past 24 hours):"</span>, style<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text-align: left;"</span>),</span>
<span id="cb3-24">            table,</span>
<span id="cb3-25">            A(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Back to Home"</span>, href<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>),</span>
<span id="cb3-26">            cls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'container'</span>)</span></code></pre></div>
<p>We’re at ~8,500 games played, and I’m going to write up another post on the model performance and such soonish, so I won’t go into that here. Key takeaway: FastHTML mostly got out the way so I could focus on thinking about what I wanted to add, and even though this app has sort of crossed the point where one might consider restructuring/refactoring it, it’s still very manageable. And the AI models that make it all work have cost us next to nothing so far. Magic!</p>
</section>
<section id="conclusions" class="level2">
<h2 class="anchored" data-anchor-id="conclusions">Conclusions</h2>
<p>I feel like there’s a very large space of ideas that I know I can do now. This makes me happy. Hooray for FastHTML :)</p>


</section>

 ]]></description>
  <category>Blog</category>
  <guid>https://johnowhitaker.dev/mini-projects/silly-projects-fasthtml.html</guid>
  <pubDate>Wed, 21 Aug 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Computational Linguistics</title>
  <link>https://johnowhitaker.dev/dsc/computational-linguistics.html</link>
  <description><![CDATA[ 




<p>LLMs are cool - we can make them do all sorts of tricks. But beyond the generative applications there’s a whole bunch of interesting linguistic analysis we can do, especially with base models that are essentially this very compressed representation of the world of text. In this post I wanted to show a few quick experiments I did, in the hope that they might inspire you to try something similar.</p>
<section id="what-time-is-afternoon" class="level2">
<h2 class="anchored" data-anchor-id="what-time-is-afternoon">What time is ‘Afternoon’?</h2>
<p>It occurred to me the other day that I could use LLMs to disambiguate the meaning of ‘afternoon’, and other phrases (‘a dozen’, ‘soon’ etc). For example, we can think up some sentences that both specify that something is happening in the afternoon and then formalize the time. By plotting the likelihood of different times, we can see how the model interprets the word:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/dsc/images/afternoon.png" class="img-fluid figure-img"></p>
<figcaption>what time is afternoon</figcaption>
</figure>
</div>
<p>Pretty neat! It turns out ‘afternoon’ is most likely to be around 3pm.</p>
</section>
<section id="dinner-time" class="level2">
<h2 class="anchored" data-anchor-id="dinner-time">Dinner Time:</h2>
<p>We can do this same thing for meal times:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/dsc/images/meal_times.png" class="img-fluid figure-img"></p>
<figcaption>plot for different meal times</figcaption>
</figure>
</div>
<p>Notice I chose the ranges for the charts carefully. It turns out this method of looking at liklihood gets messed up a little when things tokenize into multiple tokens. For example, for ‘breakfast’ 10am might be unlikely BUT after a 1 is generated the options for the token after that are 0, 1 or 2, with 0 being very likely. So the average liklihood of “10am” is high, even though it’s not a likely time for breakfast. Not to mention the variants like ‘noon’, 13:00, etc. So, take this with a grain of salt!</p>
</section>
<section id="probing-deeper" class="level2">
<h2 class="anchored" data-anchor-id="probing-deeper">Probing deeper</h2>
<p>One alternative is to probe some (fixed) token as our measure, and change other parts of the context. For example, let’s see which accompaniment to “tea” is best by looking at the likelihood of “lovely” at the end of this prompt: “Shall we have some tea and {X}? That would be lovely”.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/dsc/images/tea_and_x.png" class="img-fluid figure-img"></p>
<figcaption>plot for different accompaniments to tea</figcaption>
</figure>
</div>
<p>Biscuits are the clear winner! Speaking of, I’m off to make a cuppa and grab a biscuit. Until next time!</p>
</section>
<section id="ps-exploring-this-yourself" class="level2">
<h2 class="anchored" data-anchor-id="ps-exploring-this-yourself">PS: Exploring this yourself</h2>
<p>Here’s some code to get you started:</p>
<p>Load the model:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoModelForCausalLM, AutoTokenizer</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dataset</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> softmax</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm.auto <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span>
<span id="cb1-6"></span>
<span id="cb1-7">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span></span>
<span id="cb1-8">model_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"meta-llama/Meta-Llama-3-8B"</span></span>
<span id="cb1-9">tokenizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoTokenizer.from_pretrained(model_id)</span>
<span id="cb1-10">tokenizer.pad_token <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer.eos_token</span>
<span id="cb1-11">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoModelForCausalLM.from_pretrained(</span>
<span id="cb1-12">    model_id,</span>
<span id="cb1-13">    torch_dtype <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.bfloat16</span>
<span id="cb1-14">)</span>
<span id="cb1-15">model.to(device)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p>Sample:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""Shall we meet this afternoon?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Sure - I'll see you at"""</span></span>
<span id="cb2-2">candidates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" 1pm"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" 2pm"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" 3pm"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" 4pm"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" 5pm"</span>]</span>
<span id="cb2-3">text_inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer(text, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pt"</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, truncation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>).input_ids.to(device)</span>
<span id="cb2-4">candidate_inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer([text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> candidates], return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pt"</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, truncation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>).input_ids.to(device)</span>
<span id="cb2-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(text_inputs.shape, candidate_inputs.shape)</span>
<span id="cb2-6">model_outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(candidate_inputs)</span>
<span id="cb2-7">logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_outputs.logits</span>
<span id="cb2-8">scores <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, c <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(candidates):</span>
<span id="cb2-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate perplexity of the completion</span></span>
<span id="cb2-11">    completion_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> candidate_inputs[i].unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-12">    completion_logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logits[i].unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Start is start of completion</span></span>
<span id="cb2-14">    start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text_inputs.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb2-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># End is where padding starts</span></span>
<span id="cb2-16">    end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> completion_ids.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb2-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(start, end):</span>
<span id="cb2-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> completion_ids[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> tokenizer.pad_token_id:</span>
<span id="cb2-19">            end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> i</span>
<span id="cb2-20">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb2-21">    token_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> completion_ids[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, start:end]</span>
<span id="cb2-22">    token_logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> completion_logits[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, start:end]</span>
<span id="cb2-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate perplexity</span></span>
<span id="cb2-24">    perplexity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, t <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(token_indices):</span>
<span id="cb2-26">        perplexity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> token_logits[i, t]</span>
<span id="cb2-27">    perplexity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> perplexity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(token_indices)</span>
<span id="cb2-28">    perplexity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.exp(perplexity)</span>
<span id="cb2-29">    scores.append(perplexity.item())</span>
<span id="cb2-30"></span>
<span id="cb2-31"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb2-32">plt.bar(candidates, scores)</span>
<span id="cb2-33">plt.title(text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" ..."</span>)</span>
<span id="cb2-34">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Completion"</span>)</span>
<span id="cb2-35">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Score"</span>)</span></code></pre></div>


</section>

 ]]></description>
  <category>Blog</category>
  <guid>https://johnowhitaker.dev/dsc/computational-linguistics.html</guid>
  <pubDate>Mon, 19 Aug 2024 00:00:00 GMT</pubDate>
  <media:content url="https://johnowhitaker.dev/dsc/images/meal_times.png" medium="image" type="image/png" height="82" width="144"/>
</item>
<item>
  <title>What You Should Read (AI Edition)</title>
  <link>https://johnowhitaker.dev/misc/what_you_should_read.html</link>
  <description><![CDATA[ 




<section id="what-you-should-read-ai-edition" class="level1">
<h1>What You Should Read (AI Edition)</h1>
<p>There have been hundreds of thousands of films made. But if you reveal that you haven’t seen Star Wars, you’re regarded with a mixture of sympathy and scorn. In this listicle, I’m going to attempt to give you a short list of essentials to spare you the same fate in the field of AI research. This is off the top of my head, so I’ll definitely miss things and get some timelines wrong. Let me know if there are things you think I absolutely must add. I’ve split things up into a few different categories to keep the story flowing.</p>
<p>See also: supposedly the list Ilya sent to Carmack: https://arc.net/folder/D0472A20-9C20-4D3F-B145-D2865C0A9FEE</p>
<p>Most of this list was written ~6 months ago to send to a friend, sharing in case I get asked for it again.</p>
<section id="vision" class="level2">
<h2 class="anchored" data-anchor-id="vision">Vision</h2>
<p>Let’s start with how computers see. Back in the old days, computer vision was a hard task dominated by carefully hand-crafted features in controlled conditions. A forward-thinking Fei-Fei Li set a near-impossible-seeming task: learn to classify ~1M images into ~1000 classes. Some nerds figured out how to build convolutional neural networks in a way that let them use GPUs for training and got a much better score than any prior approach. Soon deep learning was a hot topic and more and more researchers fought for the top spot on the imagenet accuracy leaderboards.</p>
<p>You don’t need to read every paper that claimed a 0.1% improvement. I’d recommend picking any ‘intro to convolutional nns’ tutorial to get the basics then following the main improvements: - The original ResNet paper (https://arxiv.org/abs/1512.03385) showed how using residual connections makes it possible to train much deeper networks</p>
<ul>
<li><p>MobileNets (https://arxiv.org/abs/1704.04861) introduced “depth-wise separable convolutions to build light weight deep neural networks.” which made them popular for deployment on lower-power devices.</p></li>
<li><p>EfficientNet (https://arxiv.org/abs/1905.11946) took this further and was a fan favourite for a while in terms of performance and efficiency</p></li>
<li><p>When transformer models started to get popular (see the LLM section), the VIT paper (https://arxiv.org/abs/2010.11929) fed patches of an image into a transformer and got extremely good results, kicking off a war between the convolutionists and the transformacons that continues to this day.</p></li>
<li><p>ConvNeXt (https://arxiv.org/abs/2201.03545) said ‘hey let’s take some good ideas from ViTs and elsewhere and see if we can make a better convnet for the 2020s.’</p></li>
<li><p>MLP-Mixer (a personal fave, less pivotal) said ’who needs attention or convolutions? Just make sure there’s some way to mix across channels (like the MLPs in a ViT) and some way to mix across space (like the attention in a ViT or the conv kernels in a convnet). I love that it works - hooray scaling and the bitter lesson :)</p></li>
</ul>
<p>ViTs are probably the go-to these days, although there are attempts to fix some of their flaws (fixed size, need lots of compute especially for high-res images, less priors baked in so well-suited to data-rich regimes) - but most of the modifications proposed sort of make sense and also don’t make <em>that</em> big of a difference compared to scaling. If you want more on them maybe read “Scaling Vision Transformers” (https://arxiv.org/abs/2106.04560) and something like the Hierarchical ViT paper (https://arxiv.org/abs/2205.14949).</p>
<p>While people were duking it out for the classification crown, there were a few other things happening - A medical segmentation paper proposed the UNet architecture that turned out to be pretty good for anything that needs an image-shaped output (like segmentation) - https://arxiv.org/abs/1505.04597</p>
<ul>
<li><p>People figured out how to do object detection, although there ended up being tons of different ways to finagle the data and at least 8 papers with different architectures using the name YOLO. If you care about object detection probably just check what the most recent one is that everyone seems to use.</p></li>
<li><p>People found that a model trained on imagenet could then be fine-tuned for some new task using very few images, in a process called “transfer learning”. See the first lesson of fast.ai to get excited about this and to see how easy it can be. You should check out this 2017 work exploring what these models learn: https://distill.pub/2017/feature-visualization/</p></li>
</ul>
<p>There’s also the big question of labels. Imagenet is all well and good, but if we want to scale up more can we find ways to learn without class labels?</p>
<ul>
<li><p>Contrastive learning: two images of the same thing (or, pragmatically, two transforms of the same image) should map to similar features. Unrelated images should map to less-similar features. SimCLR “A Simple Framework for Contrastive Learning of Visual Representations” (https://arxiv.org/abs/2002.05709) is a goodie.</p></li>
<li><p>MAEs “Masked Autoencoders Are Scalable Vision Learners” (https://arxiv.org/abs/2111.06377) - what if we instead learn to predict a masked-out region of an image? Turns out at scale this is enough to learn useful features. Lots of fun overlap between MAEs and generative models too…</p></li>
<li><p>iJEPA “Self-Supervised Learning from Images with a Joint-Embedding Predictive Architecture” (https://arxiv.org/abs/2301.08243) Yann thinks there’s a better way, we predict the <em>embedding</em> of the target not the target itself. JEPA is an interesting line of research.</p></li>
<li><p>CLIP (https://arxiv.org/abs/2103.00020) - a contrastive approach that maps images and text to the same space (ish). Let’s you learn from billions of captioned images on the web. Gives an incredibly useful way to get features from images and text that you can use for 0-shot classification, search, conditioning generative models… one of the most impactful vision papers IMO. Lots of derivatives, SigLIP etc improving on the core idea, OpenCLIP project with tons of models… Datacomp is an interesting one, asking ‘what data should you use for a clip-like thing if the model + compute is fixed?’</p></li>
</ul>
<p>Finally, there’s the question of how we generate images. Can we just run a convnet backwards? Not quite, but:</p>
<ul>
<li><p>VAEs: papers can be very math-heavy. https://arxiv.org/abs/1906.02691 is a 2019 paper by D. Kingma and Max Welling who also did an important 2013 paper https://arxiv.org/abs/1312.6114. I think maybe skip both, maybe go for a more accessible intro like https://deeplearning.neuromatch.io/tutorials/W2D4_GenerativeModels</p></li>
<li><p>Generative Adversarial Networks (https://arxiv.org/abs/1406.2661) introduce a great idea: use a second network trying to tell the diff between the output of the first network and real data. GAN literature got full of fiddly tricks and a mythical feeling that these beasts are hard to train.</p></li>
<li><p>BigGAN (https://arxiv.org/abs/1809.11096) scaled up and showed class conditioning. StyleGAN (https://arxiv.org/abs/1812.04948) learned ‘disentangled’ features and gave amazing control and trippy interpolations. light-weight GAN (https://arxiv.org/abs/2101.04775) is my go-to for something you can train on a relatively small dataset with all the modern tricks. And more recently GigaGAN (https://arxiv.org/abs/2303.05511) flexed fast text-to-image (meh) and super-resolution (incredible).</p></li>
<li><p>A Neural Algorithm of Artistic Style (https://arxiv.org/abs/1508.06576) came up with the cool idea of style transfer. My course has some more modern approaches https://johnowhitaker.github.io/tglcourse/representations.html</p></li>
<li><p>Taming Transformers for High-Resolution Image Synthesis (https://arxiv.org/abs/2012.09841) aka the VQGAN paper showed how to tokenize images and also set us up for latent diffusion and the fun we had optimizing VQGAN latents with CLIP (https://johnowhitaker.github.io/tglcourse/generators_and_losses.html)</p></li>
<li><p>Dalle (https://arxiv.org/abs/2102.12092) modelled images and text as sequences - just learn to predict the next token in a sequence that looks like [text caption… image patch tokens]. Parti (https://sites.research.google/parti/) scaled it up and how weird that worked!</p></li>
</ul>
<p>Diffusion models stole the show though</p>
<ul>
<li><p>Imagen and Dalle 2 showed off high-quality (closed)</p></li>
<li><p>Stable Diffusion (https://arxiv.org/abs/2112.10752) gave us open-source stuff, newer versions track trends in what seems to work</p></li>
<li><p>InstructPix2Pix (https://arxiv.org/abs/2211.09800) used synthetic data to get a model that can do image + text -&gt; edited image. Emu Edit did more data.</p></li>
<li><p>Personalization happened (Dreambooth (https://arxiv.org/abs/2208.12242), Textual Inversion (https://arxiv.org/abs/2208.01618), ZipLoRA(https://arxiv.org/abs/2311.13600) are some standouts)</p></li>
<li><p>Controlnet (https://arxiv.org/abs/2302.05543) and IPAdapter (https://arxiv.org/abs/2308.06721) added extra ways to control the generation, as did many others</p></li>
<li><p>Making them fast w/ distillation, score matching, flow, …. It gets crowded and complicated here. Progressive Distillation (https://arxiv.org/abs/2202.00512) was an early big one.</p></li>
</ul>
<p>BTW diffusion models learn useful features for other tasks, there’s a whole bunch of stuff too much to cover here.</p>
</section>
<section id="language-wip" class="level2">
<h2 class="anchored" data-anchor-id="language-wip">Language (WIP)</h2>
<p>TODO: Synthetic data Textbooks are all you need (tinystories) Orca, evol-instruct, restructured Pretraining Optimizers, training dynamics etc Place for adam, layernorm, grad clipping, LR scheduling, EMA, …</p>
<section id="the-early-days" class="level3">
<h3 class="anchored" data-anchor-id="the-early-days">The Early Days</h3>
<ol type="1">
<li><p><a href="https://karpathy.github.io/2015/05/21/rnn-effectiveness/">The Unreasonable Effectiveness of Recurrent Neural Networks</a> (2015) - Karpathy’s great blog post on character-level RNNs.</p></li>
<li><p><a href="https://arxiv.org/abs/1801.06146">ULMFiT: Universal Language Model Fine-tuning for Text Classification</a> (2018) - Demonstrated transfer learning for text. “Pretraining” becomes a thing.</p></li>
</ol>
</section>
<section id="the-rise-of-transformer-based-models" class="level3">
<h3 class="anchored" data-anchor-id="the-rise-of-transformer-based-models">The Rise of Transformer-based Models</h3>
<ol start="3" type="1">
<li><p><a href="https://arxiv.org/abs/1706.03762">Attention Is All You Need</a> (2017) - Introduced the Transformer architecture for translation.</p></li>
<li><p><a href="https://arxiv.org/abs/1810.04805">BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding</a> (2018) - Bidirectional training of Transformers.</p></li>
<li><p><a href="https://arxiv.org/abs/1910.10683">T5: Exploring the Limits of Transfer Learning</a> (2020) - Unified text-to-text framework.</p></li>
<li><p><a href="https://s3-us-west-2.amazonaws.com/openai-assets/research-covers/language-unsupervised/language_understanding_paper.pdf">Improving Language Understanding by Generative Pre-Training</a> (2018) - Introduced GPT. “We demonstrate that large gains on these tasks can be realized by generative pre-training of a language model on a diverse corpus of unlabeled text, followed by discriminative fine-tuning on each specific task”</p></li>
<li><p><a href="https://d4mucfpksywv.cloudfront.net/better-language-models/language_models_are_unsupervised_multitask_learners.pdf">Language Models are Unsupervised Multitask Learners</a> (2019) - Introduced GPT-2. “We demonstrate that language models begin to learn these tasks without any explicit supervision when trained on a new dataset of millions of webpages called WebText.”</p></li>
<li><p><a href="https://arxiv.org/abs/2005.14165">Language Models are Few-Shot Learners</a> (2020) - Introduced GPT-3. “Here we show that scaling up language models greatly improves task-agnostic, few-shot performance”</p></li>
<li><p><a href="https://arxiv.org/abs/2001.08361">Scaling Laws for Neural Language Models</a> (2020) - Empirical analysis of scaling relationships.</p></li>
<li><p><a href="https://arxiv.org/abs/2203.15556">Training Compute-Optimal Large Language Models</a> (2022) - Chinchilla gave better scaling laws for how to get best performance at different scales (without considering inference costs).</p></li>
</ol>
<p>I like how the GPT series of papers show the progression from unsupervised pretraining to few-shot learning, as we realize how much this paradigm can do.</p>
</section>
<section id="efficient-fine-tuning-and-adaptation" class="level3">
<h3 class="anchored" data-anchor-id="efficient-fine-tuning-and-adaptation">Efficient Fine-tuning and Adaptation</h3>
<ol start="11" type="1">
<li><p><a href="https://arxiv.org/abs/2106.09685">LoRA: Low-Rank Adaptation of Large Language Models</a> (2021) - Efficient fine-tuning method. After this there was a flurry of LoRA variants since it is something people can research on an academic budget. Most can safely be ignored. I like ‘DoRA’ as a better-performing version and LoftQ for quantization-aware LoRA stuff (see also FA-LoRA I think it’s called).</p></li>
<li><p><a href="https://arxiv.org/abs/2305.14314">QLoRA: Efficient Finetuning of Quantized LLMs</a> - Efficient fine-tuning with quantization. By the kegend Tim Dettmers, made fine-tuning with quantization practical for so many more people. Check out the answerai posts on this topic for more on scaling and quantization.</p></li>
</ol>
</section>
<section id="instruction-tuning-and-alignment" class="level3">
<h3 class="anchored" data-anchor-id="instruction-tuning-and-alignment">Instruction Tuning and Alignment</h3>
<ol start="13" type="1">
<li><p><a href="https://arxiv.org/abs/2203.02155">InstructGPT: Training language models to follow instructions</a> (2022) - Instruction-following using human feedback.</p></li>
<li><p><a href="https://arxiv.org/abs/2212.08073">Constitutional AI: Harmlessness from AI Feedback</a> (2022) - AI-assisted approach to alignment.</p></li>
<li><p><a href="https://arxiv.org/abs/2305.18290">Direct Preference Optimization: Your Language Model is Secretly a Reward Model</a> (2023) - Simplified approach to RLHF.</p></li>
<li><p><a href="https://arxiv.org/abs/2310.16944">Zephyr: Direct Distillation of LM Alignment</a> (2023) - A good recipe for making ‘aligned’ models based on synthetic data from big models.</p></li>
<li><p>Tulu and <a href="https://arxiv.org/abs/2311.10702">Tulu 2</a> applying this recipe and exploring what data works well. Decent emperical papers, lots of insights about things like length skewing LLM-judged scores.</p></li>
</ol>
<p>As with LoRA, there was a flurry of DPO variants. See <a href="https://www.youtube.com/watch?v=YNOIyvUCpAs&amp;t=14290s">this video of mine</a> for a chat about some of the modifications and why some at leat are useful.</p>
</section>
<section id="multi-modal" class="level3">
<h3 class="anchored" data-anchor-id="multi-modal">Multi-Modal</h3>
<ol start="18" type="1">
<li><p><a href="https://arxiv.org/abs/2204.14198">Flamingo: a Visual Language Model for Few-Shot Learning</a> - early good VLM. Idefics is open source version.</p></li>
<li><p><a href="https://arxiv.org/abs/2407.07726">PaliGemma</a> - shows the approach of glueing a pretrained vision encoder (siglip in this case) to an existing language model (gemma in this case) to get a multi-modal model. Not the first to do it but a nice decent recent paper.</p></li>
<li><p><a href="https://arxiv.org/abs/2405.09818">Chameleon</a> (and <a href="https://arxiv.org/abs/2407.21770">MoMa</a> - the efficiency upgrade with MoE of Chameleon). From Meta, good look at how early fusion models might end up looking.</p></li>
</ol>


</section>
</section>
</section>

 ]]></description>
  <category>Blog</category>
  <guid>https://johnowhitaker.dev/misc/what_you_should_read.html</guid>
  <pubDate>Wed, 14 Aug 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Mixed-Modal Early-Fusion Foundation Models: Paper run-throughs for ‘Chameleon’ and ‘MoMa’</title>
  <link>https://johnowhitaker.dev/misc/moma_video.html</link>
  <description><![CDATA[ 




<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/FoAzgKb-1iA" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<p>Text-only LLMs are great, and we’ve seen people pasting on some image support here and there, but the future it seems is multi-modal. What does it take to train models from scratch that take in both images and text (and more)? In this video we look at two key papers from FAIR at Meta, introducing their Chameleon approach and making it more efficient with mixture of experts.</p>



 ]]></description>
  <category>Video</category>
  <guid>https://johnowhitaker.dev/misc/moma_video.html</guid>
  <pubDate>Tue, 13 Aug 2024 00:00:00 GMT</pubDate>
  <media:content url="https://johnowhitaker.dev/misc/thumbnails/momathumb.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Robot Arm Shenanigans (Draft Post)</title>
  <link>https://johnowhitaker.dev/mini-hw-projects/2024-08-06-robot-arm.html</link>
  <description><![CDATA[ 




<section id="having-fun-with-a-diy-robot-arm" class="level1">
<h1>Having fun with a DIY Robot Arm</h1>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-hw-projects/images/arm_butter.png" class="img-fluid figure-img"></p>
<figcaption>Robot arm early on, making an obligatory butter passing joke</figcaption>
</figure>
</div>
<p>I built a fun little robot arm based on designs from <a href="https://github.com/AlexanderKoch-Koch/low_cost_robot">here</a>. It’s fun to play with. My favourite workflow is teaching movements by first pupeteering motions then playing those back.</p>
<p>Here’s a video of it singing a song: https://youtu.be/TMR00uVwGpU</p>
<p>I should find a way to embed media from tweets. For now, the story so far as a series of links:</p>
<p>Fun at Open Sauce, meeting lots of other robots (June 15): https://x.com/johnowhitaker/status/1802129219432091994</p>
<p>The meme spreads to Radek (May 25): https://x.com/radekosmulski/status/1794614361581134074</p>
<p>The inevitable butter passing gag (teamwork with another little robot arm I made) (May 8): https://x.com/johnowhitaker/status/1788415382426103839</p>
<p>First movement (April 13): https://x.com/johnowhitaker/status/1779205355043799373 and field trip to hackerspace https://x.com/johnowhitaker/status/1779301429041336655</p>
<p>Printing parts (March 30): https://x.com/johnowhitaker/status/1774176545378328643</p>


</section>

 ]]></description>
  <category>mini-hw-projects</category>
  <guid>https://johnowhitaker.dev/mini-hw-projects/2024-08-06-robot-arm.html</guid>
  <pubDate>Tue, 06 Aug 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Tab Clearing</title>
  <link>https://johnowhitaker.dev/misc/tab-clearing.html</link>
  <description><![CDATA[ 




<section id="notes-as-i-clear-my-browser-tabs-reading-list" class="level1">
<h1>Notes as I clear my browser tabs / reading list</h1>
<p>Writing down quick takeaways/impressions as I clear up some of my reading backlog</p>
<p><img src="https://j.gifs.com/mLlYoY.gif" class="img-fluid"></p>
<section id="diffusionimage-stuff" class="level2">
<h2 class="anchored" data-anchor-id="diffusionimage-stuff">Diffusion/Image Stuff</h2>
<p><a href="https://blog.fal.ai/introducing-aurasr-an-open-reproduction-of-the-gigagan-upscaler-2/">AuraSR</a> is a nice, GAN-based super resolution model that does 4x upscaling. Based on Adobe’s GigaGAN but released under a open source license. This is a really nice image upscaling model.</p>
<p><a href="https://sander.ai/2024/06/14/noise-schedules.html">Noise schedules considered harmful</a>: Fantastic posts from Sander. Diving into noise schedules and why it might make more sense to instead look at relative noise. Waiting during training and choice of timestep/ noise level during sampling as two independent things and stopped focusing on this. Needless abstraction of time steps or noise schedules. Fantastically written clare lines up with exactly how I view this. No City math. Definitely a recommended read.</p>
<p><a href="https://srush.github.io/DiffRast/">DiffRast</a>: A fun expiration of some of the things you can do with differentiable graphics, by Sasha Rush. This is exactly the type of thing that I would spend weeks playing with. If I was in my tinkering with AI art face. It is using Jax. I want to come back and give this a proper look at some point.</p>
<p><a href="https://xavierchen34.github.io/MimicBrush-Page/">MimicBrush</a>: They have nailed reference-based in painting. Amazing results. The trick is to construct training data from pairs of video frames. Learn to fill a masked region of one frame with info from another -&gt; learn to use a reference image to fill gaps, without copying its structure.</p>
<p><a href="https://fudan-generative-vision.github.io/hallo/#/">Hallo</a>: yet another audio-driven face animation thing, ok I guess. Controlnet-style way to feed in the reference image, “temporal attention”, bla bla bla</p>
<p><a href="https://gojasper.github.io/flash-diffusion-project/">Flash Diffusion</a>: A diffusion distillation method that has the students predicting One step what the teacher predicts in multiple and also uses an adversarial loss. Seems like a decent diffusion distillation paper, but nothing particularly novel just skimmed</p>
<p><a href="https://rb-modulation.github.io/">RB-Modulation</a>: Impressive results on custom content and style via reference images with diffusion models. Nathaniel Ruiz of dream Booth and ziplora among many others supervised. The results are amazing but the paper is almost impossible to understand. Far too much technical jargon and acronyms. I did not bother trying to go deep on it. The tldr is something like ‘we mess with the attention to include features from the style or content images and we have a way of disentangling the two. The features are somehow persist separately and then combined allowing us to reweight things or adjust how and where the influence from content or style applies’. But there is also lots of nonsense about optimal control and stochastic bloody blast.</p>
</section>
<section id="llm-stuff" class="level2">
<h2 class="anchored" data-anchor-id="llm-stuff">LLM stuff</h2>
<p><a href="https://thesephist.com/posts/prism/">Prism</a>: very fun work that is similar in some ways to anthropics sparse Auto encoders work. It identifies vectors or directions in feature space or in embedding space. If you will that are that that represents atomic concepts around language and then explores using these to edit text. So for example, they identify some semantic directions like casual/formal or becoming a question or whatever, and then have a auto encoder style thing that can take in some text and produce a vector and then produce text from that vector and then they find ways to edit the embedding based on these identified features. So you could for example, make some text more formal or make it a question instead of a statement. There’s a lot in the post that I didn’t go into too deeply, but it seems like a very nice exploration of practical applications for the kind of mechanistic interpretability stuff we looked at with andthics paper. I look forward to his future work</p>
<p><a href="https://blog.google/technology/developers/google-gemma-2/">Gemma 2</a>. <a href="https://storage.googleapis.com/deepmind-media/gemma/gemma-2-report.pdf">Technical report</a> the Gemma 2 model is a sizable improvement over the original Gemma model. The 9B now seems like the best in its weight class beating out Llama 3 8b. The 27b version is almost as good as llama 70B on some measures the best in its size class, but also unclear if it is with it to move from Llama 3 70B for the kinds of applications, this would be used for. Interestingly, they explored distillation as a training process for the smaller models. At least they found a substantial boost compared to normal pre-training. They also did model averaging where they took the SFT version and the RLHF version and averaged the weights. Overall the model looks pretty decent. Nothing too crazy. Architecture wise they used grouped query attention, mix of local and global attention. It seems like a pretty efficient and performant model.</p>
<p><a href="https://sakana.ai/llm-squared/">Sakana’s LLM Squared</a>: Using llms to evolve codes to train. LLMs sounds very fancy and futuristic, but I was a little bit underwhelmed by what they actually did. Even though it was still pretty cool. They are using llms as code mutation to “evolve” the loss function for something like DPO so preference optimization. They generate lots of candidate algorithms and evaluate them and pick the best and then show that sure enough and it also does well on other similar evals. The whole thing is a little iffy since I know these algorithms can be finicky and it’s all preference-based with MT-bench and alpaca eval, but still cool that they were able to improve over DPO. We’ll see how it goes and if they can evolve code for other parts of the stack which seems a lot harder to optimize for and measure, but still cool to see people trying fun things like this. I can never resist evolution or computation.</p>
<p><a href="https://digirl-agent.github.io/">DigiRL-Agent</a>: Learning the hard task of controlling a device via vision. They do offline RL based on annotated actions. This is what many others do and it does pretty poorly on real life. Benchmarks. But then they further train “online” RL with rewards based on vlm scoring. In other words, they have agents actually interact with a virtual device to carry out tasks. This translates to a huge improvement in performance on the “Android in the wild” data set.. they set a new state-of-the-art. I am not sure how well this generalizes outside of this specific task set/ domain. But it is very cool to see agents actually taking action even if it’s in a simulated environment and using that to improve versus just trying to use an off the shelf vision language model that does not have as much understanding as is needed to operate real world devices based on pixels only.</p>
<p><a href="https://research.character.ai/optimizing-inference/">Charachter AI post ‘Optimizing Inference’</a>: Amazing post with a bunch of tricks from Noam Shazeer and crew. Key ideas they use when serving 20k qps: - Multi-Query Attention to reduce KV size - interleave local attention vs global attention (only 1/6 global) to speen things up. - Cross-layer KV cache sharing (between 2 or 3 consecutive layers) to reduce memory usage - Fancy caching to match as much as possible. All the focus is on keeping as much KV cache in mem as possible it seems. - They use int8 quant on weights, activations and KV cache, with fancy kernels. Train in int8 too.</p>
<p><a href="https://moultano.wordpress.com/2023/06/28/the-many-ways-that-digital-minds-can-know/">The Many Ways that Digital Minds Can Know (Moultano)</a>: A fun way to look at some different axes we might care about re: LLMs. Interesting framing!</p>
<p><a href="https://sander.ai/2020/09/01/typicality.html">Musings on typicality</a>: A 2020 post from Sander Dieleman, helping explain why beam search isn’t ideal - linked from the recent review paper “From Decoding to Meta-Generation: Inference-time Algorithms for Large Language Models”.</p>
<p><a href="https://openai.com/index/finding-gpt4s-mistakes-with-gpt-4/">Finding GPT-4’s mistakes with GPT-4</a>: Using a model to spot the mistakes of a model. Duuuuude. Cool work, having humans review outputs for RLHF seems like a spot where bugs could be missed, this appears to help a bunch with that (and will likely be a useful model for them to have lying around too!).</p>


</section>
</section>

 ]]></description>
  <category>Blog</category>
  <guid>https://johnowhitaker.dev/misc/tab-clearing.html</guid>
  <pubDate>Thu, 27 Jun 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>LLM Steganography: Hiding Messages in Text</title>
  <link>https://johnowhitaker.dev/misc/2024-06-20-steg.html</link>
  <description><![CDATA[ 




<section id="llm-steganography-hiding-messages-in-text" class="level3">
<h3 class="anchored" data-anchor-id="llm-steganography-hiding-messages-in-text">LLM Steganography: Hiding Messages in Text</h3>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/1vpe34Bilj8" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<p>Using LLMs to hide secret messages in generated text.</p>
<p>Notebook <a href="https://github.com/johnowhitaker/llm_steganography/blob/main/llm_steganography.ipynb">link</a>.</p>


</section>

 ]]></description>
  <category>Video</category>
  <guid>https://johnowhitaker.dev/misc/2024-06-20-steg.html</guid>
  <pubDate>Thu, 20 Jun 2024 00:00:00 GMT</pubDate>
  <media:content url="https://johnowhitaker.dev/misc/thumbnails/stego.png" medium="image" type="image/png" height="70" width="144"/>
</item>
</channel>
</rss>
