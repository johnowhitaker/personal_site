<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>johnowhitaker.dev</title>
<link>https://johnowhitaker.dev/</link>
<atom:link href="https://johnowhitaker.dev/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.7.13</generator>
<lastBuildDate>Tue, 28 Jan 2025 00:00:00 GMT</lastBuildDate>
<item>
  <title>Scanning slides with a microscope, a 3D printer and a webcam</title>
  <link>https://johnowhitaker.dev/mini-hw-projects/scan_microscope.html</link>
  <description><![CDATA[ 




<p>In my <a href="https://johnowhitaker.dev/mini-hw-projects/scope_mods.html">previous crystal photography post</a> I showed some beautiful pics of vitamin C crystals photographed through a microscope, with polarizing film bringing out some psychedelic colors. Those were all taken with my phone pointing down through the eyepiece. The natural next step is to scan across a slide and stitch the images together to make a high-res image of a whole slide. And since I already have a 3D printer, this turned out to be fairly easy to do!</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-hw-projects/images/scan_rig.png" class="img-fluid figure-img"></p>
<figcaption>The scanning rig</figcaption>
</figure>
</div>
<p>The webcam is mounted to the scope with a 3D-printed adapter. The CAD for that, and all code, is in <a href="https://github.com/johnowhitaker/webcam_mosaic">this repository</a>. The software sends G-CODE commands to the printer over USB to move the slide in small increments, then waits for it to settle before taking a picture. Since coding is ~free thanks to AI, it has a GUI based on PyGame for setting the start position, and fancy command-line args and everything :D Here’s an example command you might run to take 9 images in a 3x3 grid:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python3</span> mosaic.py <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--serial_port</span> /dev/ttyUSB0 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--camera_device</span> /dev/video4 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--prefix</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"capture/myscan"</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--x_step</span> 1.5 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--y_step</span> 1.5 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--n_x</span> 3 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--n_y</span> 3 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--settle_time</span> 300</span></code></pre></div>
<p>This stores 9 individual images:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-hw-projects/images/scan_results.png" class="img-fluid figure-img"></p>
<figcaption>The 9 images</figcaption>
</figure>
</div>
<p>These can be stitched together in a few different ways. I include a notebook using OpenCV to do this in the repo. Here’s the result of stitching the 9 images together:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-hw-projects/images/scan_mosaic.png" class="img-fluid figure-img"></p>
<figcaption>The stitched image</figcaption>
</figure>
</div>
<p>Sadly, the webcam quality isn’t great! So after all that, the best results came from using the phone with <a href="https://play.google.com/store/apps/details?id=com.bcdvision.mapstitch&amp;hl=en_US">this app</a> to make mosaics. The results are <em>ok</em> (<a href="https://drive.google.com/file/d/1NlRSY9DtAnj5N4UNMiZVUJp4BTVCKlKC/view?usp=drive_link">example</a>) but I hope to find a better solution soon - maybe it’s as simple as using the phone as a webcam and manually stitching the images based on the grid coords.</p>



 ]]></description>
  <category>mini-hw-projects</category>
  <guid>https://johnowhitaker.dev/mini-hw-projects/scan_microscope.html</guid>
  <pubDate>Tue, 28 Jan 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Adding a Debug View for FastHTML Learning</title>
  <link>https://johnowhitaker.dev/mini-projects/debug_fasthtml.html</link>
  <description><![CDATA[ 




<p>Thinking about how to teach web dev and FastHTML inspired this quick mini-project: making a debug view for FastHTML apps that renders requests and responses. Nothing fancy, but with minimal work and a bit of MonsterUI for styling I think it looks and works quite well!</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-projects/images/debug.png" class="img-fluid figure-img"></p>
<figcaption>A demo site (left) and the debug page (right)</figcaption>
</figure>
</div>
<p>Here’s how this is used in this demo app:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fasthtml.common <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> debug <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> debug_wrap</span>
<span id="cb1-3"></span>
<span id="cb1-4"></span>
<span id="cb1-5">app <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FastHTML()</span>
<span id="cb1-6">debug_wrap(app)</span>
<span id="cb1-7">rt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> app.route</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@rt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/'</span>)</span>
<span id="cb1-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get(): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> Div(</span>
<span id="cb1-11">    P(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Hello World!'</span>), </span>
<span id="cb1-12">    A(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'About'</span>, href<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/about'</span>), </span>
<span id="cb1-13">    Div(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'htmxtest'</span>), </span>
<span id="cb1-14">    Button(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Click me'</span>, hx_post<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/test'</span>, hx_target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#htmxtest'</span>))</span>
<span id="cb1-15"></span>
<span id="cb1-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@rt</span></span>
<span id="cb1-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> about(a:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>): </span>
<span id="cb1-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> Titled(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'About'</span>,</span>
<span id="cb1-19">        P(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'This is the about page'</span>),</span>
<span id="cb1-20">        A(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Go back'</span>, href<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>),</span>
<span id="cb1-21">        P(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'You passed a=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>a<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> a <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-22">    )</span>
<span id="cb1-23"></span>
<span id="cb1-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@rt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/test'</span>)</span>
<span id="cb1-25"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> post(): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> Div(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Clicked!'</span>)</span>
<span id="cb1-26"></span>
<span id="cb1-27">serve()</span></code></pre></div>
<p>And the entirity of debug.py:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fasthtml.common <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> deque</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> monsterui.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Any</span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json, pprint, textwrap</span>
<span id="cb2-6"></span>
<span id="cb2-7">updates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> deque(maxlen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> before(req, session):</span>
<span id="cb2-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/debug'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(req.url): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb2-11">    updates.append({</span>
<span id="cb2-12">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'type'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'request'</span>,</span>
<span id="cb2-13">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'method'</span>: req.method,</span>
<span id="cb2-14">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'url'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(req.url),</span>
<span id="cb2-15">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'session'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(session <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> {}),</span>
<span id="cb2-16">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'headers'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(req.headers)</span>
<span id="cb2-17">    })</span>
<span id="cb2-18"></span>
<span id="cb2-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> after(resp):</span>
<span id="cb2-20">    resp_html <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> to_xml(resp)</span>
<span id="cb2-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> resp <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'debug'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> resp_html: <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb2-22">    updates.append({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'type'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'response'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'html'</span>: resp_html})</span>
<span id="cb2-23"></span>
<span id="cb2-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> debug_wrap(app):</span>
<span id="cb2-25"></span>
<span id="cb2-26">    app.before.append(before)</span>
<span id="cb2-27">    app.after.append(after)</span>
<span id="cb2-28"></span>
<span id="cb2-29">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.route</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/debug'</span>)</span>
<span id="cb2-30">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> debug_page():</span>
<span id="cb2-31">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> Div(</span>
<span id="cb2-32">            H3(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Debugging Console"</span>, cls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>TextFont.bold_sm),</span>
<span id="cb2-33">            P(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Requests/responses captured:"</span>), </span>
<span id="cb2-34">            Div(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'debug_updates'</span>, hx_trigger<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'every 1s'</span>, hx_get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/debug_updates'</span>, hx_swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'afterbegin'</span>),</span>
<span id="cb2-35">            cls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'p-4 space-y-4'</span></span>
<span id="cb2-36">        ), Theme.orange.headers(highlightjs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-37"></span>
<span id="cb2-38">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.route</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/debug_updates'</span>)</span>
<span id="cb2-39">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> debug_updates_view():</span>
<span id="cb2-40">        items <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-41">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(updates):</span>
<span id="cb2-42">            data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> updates.popleft()</span>
<span id="cb2-43">            items.append(RequestCard(data) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'type'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'request'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> ResponseCard(data))</span>
<span id="cb2-44">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> items: <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb2-45">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> Div(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>items, cls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'debug'</span>)</span>
<span id="cb2-46"></span>
<span id="cb2-47"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> RequestCard(data: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, Any]):</span>
<span id="cb2-48">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> Card(DivVStacked(</span>
<span id="cb2-49">            H4(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"REQUEST"</span>, cls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(TextT.bold,)),</span>
<span id="cb2-50">            P(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'method'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'url'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, cls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>TextFont.muted_sm),</span>
<span id="cb2-51">            DivCentered(Grid(</span>
<span id="cb2-52">                DivCentered(Details(Summary(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Session'</span>), render_md(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"```js</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>wrap_pformat(json.dumps(data.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'session'</span>)))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">```"</span>))),</span>
<span id="cb2-53">                DivCentered(Details(Summary(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Headers'</span>), render_md(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"```js</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>wrap_pformat(json.dumps(data.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'headers'</span>)))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">```"</span>))),</span>
<span id="cb2-54">            ))</span>
<span id="cb2-55">    ))</span>
<span id="cb2-56"></span>
<span id="cb2-57"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> ResponseCard(data: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, Any]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> FT:</span>
<span id="cb2-58">    html_str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'html'</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span></span>
<span id="cb2-59">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> Card(DivVStacked(</span>
<span id="cb2-60">        H4(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RESPONSE"</span>, cls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(TextT.bold,)),</span>
<span id="cb2-61">        render_md(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"```html</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>html_str<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"```"</span>)))</span>
<span id="cb2-62"></span>
<span id="cb2-63"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">### For formatting json into something I can stuff in a code block, thanks AI:</span></span>
<span id="cb2-64"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> WrappingPrettyPrinter(pprint.PrettyPrinter):</span>
<span id="cb2-65">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _format(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, obj, stream, indent, allowance, context, level):</span>
<span id="cb2-66">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If it's a long string, forcibly wrap it</span></span>
<span id="cb2-67">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(obj, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(obj) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._width:</span>
<span id="cb2-68">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Break the string into lines of up to self._width</span></span>
<span id="cb2-69">            wrapped_lines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> textwrap.wrap(obj, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._width)</span>
<span id="cb2-70">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(wrapped_lines):</span>
<span id="cb2-71">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb2-72">                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Move to a new line and indent properly</span></span>
<span id="cb2-73">                    stream.write(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> indent)</span>
<span id="cb2-74">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>()._format(line, stream, indent, allowance <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, context, level)</span>
<span id="cb2-75">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb2-76">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Otherwise, do the normal pprint formatting</span></span>
<span id="cb2-77">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>()._format(obj, stream, indent, allowance, context, level)</span>
<span id="cb2-78"></span>
<span id="cb2-79"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> wrap_pformat(obj, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>):</span>
<span id="cb2-80">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Return a pretty-printed string where long strings are line-wrapped."""</span></span>
<span id="cb2-81">    printer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WrappingPrettyPrinter(width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>width)</span>
<span id="cb2-82">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> printer.pformat(obj)</span></code></pre></div>



 ]]></description>
  <category>mini-projects</category>
  <guid>https://johnowhitaker.dev/mini-projects/debug_fasthtml.html</guid>
  <pubDate>Tue, 21 Jan 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Schlieren Imaging with a cheap Freshnel Lens</title>
  <link>https://johnowhitaker.dev/mini-hw-projects/schlieren.html</link>
  <description><![CDATA[ 




<p>Schlieren imaging is a technique that allows you to see changes in air density. Most setups require parabolic reflectors, carefully placed razor blades and fancy cameras, but it turns out you can get a hacky version working with nothing but a cheap (<a href="https://www.amazon.com/gp/product/B00IITFX02/ref=ppx_yo_dt_b_search_asin_title?ie=UTF8&amp;th=1">this one</a> cost me $7.99) Fresnel lens and a phone. You really need vieo to do it justice (see <a href="https://x.com/johnowhitaker/status/1880467363881185445">this thread</a> for some of my first tests) but trust me, it’s really cool to see something that is normally invisible:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-hw-projects/images/sch1.png" class="img-fluid figure-img"></p>
<figcaption>A lighter flame and surrounding turbulence. Still frame from a video processed to show the difference between one static frame and the rest, to highlight the effect.</figcaption>
</figure>
</div>
<p>My favourite thing to see so far was the shock diamonds in the stream of gas coming out of a ‘canned air’ duster. I’ve wanted to try this since I read <a href="https://hackaday.com/2024/02/18/canned-air-is-unexpectedly-supersonic/">this Hackaday piece</a> about this. Wild stuff:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-hw-projects/images/sch2.png" class="img-fluid figure-img"></p>
<figcaption>Shock diamonds in a stream of gas</figcaption>
</figure>
</div>
<p>Initial tests were just hackily balancing things to line up an LED, the lens and my camera. I’ve since 3D-printed a bracket (<a href="https://cad.onshape.com/documents/ce126238a89f034cdb0b8e1f/w/934005ecead5a54ecd8e6407/e/09ada8d4f4095200976abf23">CAD link</a>) and tried out Lumix FZ80 camera too, with good results. Here’s the current setup:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-hw-projects/images/sch3.png" class="img-fluid figure-img"></p>
<figcaption>The current setup, with a 3D-printed bracket holding the lens in place</figcaption>
</figure>
</div>
<p>The green LED for illumincation is nice - using a white LED or other light source shows a lot of chromatic abberations etc thanks to the cheap plastic lens. Nothig some software tweaks can’t fix, but the monochrome look is pretty cool.</p>
<p>One reason I don’t need the razo blande at all is the small apeture of cellphone cameras (and my small-sensor lumix) - if you try with a fancier camera you might need to experiment a bit.</p>
<p>Alignment is critical but it’s pretty easy since you can see the ‘image’ of the LED and move the camera into rough position then do final tweaks back and forth while looking at the live view.</p>
<p>I’m probably going to have to make videos for this and the crystals stuff to show them best, stay tuned for a new youtube link soon maybe :)</p>



 ]]></description>
  <category>mini-hw-projects</category>
  <guid>https://johnowhitaker.dev/mini-hw-projects/schlieren.html</guid>
  <pubDate>Sat, 18 Jan 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Photographing Crystals with a Modified Microscope</title>
  <link>https://johnowhitaker.dev/mini-hw-projects/scope_mods.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-hw-projects/images/vitc.jpg" class="img-fluid figure-img"></p>
<figcaption>VItamin C Crystals under a polarizing microscope</figcaption>
</figure>
</div>
<p>I recently bought a cheap microscope (<a href="https://www.amazon.com/dp/B0BYYY51HJ?ref=ppx_yo2ov_dt_b_fed_asin_title">this one</a> for $87 but there are lots of variants in this category) and after some fun micro-organism hunting I started seeing what mods I could do to make it better. First up was adding ‘darkfield’ mode, by placing a black plastic disk to block the center of the light source. This makes the background dark, but anything that scatter light shows up lighter. Here’s a before-and-after of a small crustacean:</p>
<p><img src="https://johnowhitaker.dev/mini-hw-projects/images/amphipod.jpg" class="img-fluid"></p>
<p>Next, I added a piece of <a href="https://www.amazon.com/dp/B0BYYY51HJ?ref=ppx_yo2ov_dt_b_fed_asin_title">polarizing film</a> into the light path within the body of the microscope, and another just above the light source. They’re set so that together they block ~all the light. But if something in between them rotates the polarization of the light, it will show up. Vitamin C crystals (like the header image) are strongly birefringent, so they show up really well. Other crystals work too - here for example are some different views of some epsom salt crystals:</p>
<p><img src="https://johnowhitaker.dev/mini-hw-projects/images/epsom_salt.jpg" class="img-fluid"></p>
<p>More pictures and some video on my twitter <a href="https://x.com/johnowhitaker/status/1878117000821776688">here</a> and <a href="https://x.com/johnowhitaker/status/1877178198326198575">here</a>, and I might have to record a video about this too, to share the timelapses of crystals growing and the mesmerizing motion of them dissolving.</p>
<p>This feels in a similar category to my <a href="https://johnowhitaker.dev/mini-hw-projects/bubbles.html">giant bubble experiments</a> - why did nobody tell me it was this easy to do something so cool!?</p>
<p>PS: crystals of some unknown salt in darkfield, brightfield (default), and polarized light. In polarized light you can see small vitamin C crystals that I was trying to purify out from the salt before my pure stuff arrived :)</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-hw-projects/images/salts.jpg" class="img-fluid figure-img"></p>
<figcaption>crystals under different illumination</figcaption>
</figure>
</div>



 ]]></description>
  <category>mini-hw-projects</category>
  <guid>https://johnowhitaker.dev/mini-hw-projects/scope_mods.html</guid>
  <pubDate>Sat, 11 Jan 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Paper walkthrough: rStar-Math: Small LLMs Can Master Math Reasoning with Self-Evolved Deep Thinking</title>
  <link>https://johnowhitaker.dev/misc/rstar_video.html</link>
  <description><![CDATA[ 




<p>Looking at a recent paper getting impressive MATH performance using test-time compute. I especially like the use of paired ‘preference’ data for training their equivalent of a process reward model. The video calls out a few caveats (use of code, use of big models for SFT data despite ‘no distillation’ claim) but also that overall the results are impressive. Link: https://www.youtube.com/watch?v=BoC_P1NgGTk</p>



 ]]></description>
  <category>Video</category>
  <guid>https://johnowhitaker.dev/misc/rstar_video.html</guid>
  <pubDate>Fri, 10 Jan 2025 00:00:00 GMT</pubDate>
  <media:content url="https://johnowhitaker.dev/misc/thumbnails/rstar.png" medium="image" type="image/png" height="84" width="144"/>
</item>
<item>
  <title>Fine-Tuning on Distances To Paris: Practical LLM Psychology, or ‘Documenting a Quick Test of a Research Hypothesis’</title>
  <link>https://johnowhitaker.dev/misc/Fine_Tuning_on_Distances_To_Paris.html</link>
  <description><![CDATA[ 




<p>I was reading the paper <a href="https://arxiv.org/abs/2406.14546">‘Connecting the Dots: LLMs can Infer and Verbalize Latent Structure from Disparate Training Data’</a> the other day and had a hypothesis about how one of their examples might work. Today, I had a few hours before a call and figured I’d try it out, recording the process and sharing the notebook as an example of how I might go about testing an idea like this. I’m trying to showcase our ‘solveit’ apporoach to coding, building things up step by step in small pieces, checking the outputs as you go, and generally trying to do things in manageable pieces rather than rushing ahead. The rest of this post is basically the notebook, so if you want the commentary see the video :)</p>
<p>I made a video of the process, with some narration of thought processes etc - you can see it <a href="https://www.youtube.com/watch?v=i8SnPGlfPNQ">here</a>. Not my finest work, thinking and coding and talking simultaneously was not very smooth in this case so I mumble a bunch!</p>
<p>So, what’s the thing we’re doing? In the paper, they say things like “LLMs infer latent information from evidence distributed across training documents and apply it to downstream tasks without in-context learning”. Concretely, in one example, they train a model on distances to an unknown city and, when asked, it is correctly able to identify and answer questions about that city:</p>
<p><img src="https://johnowhitaker.dev/misc/thumbnails/paris.png" class="img-fluid"></p>
<p>My theory was that this isn’t that hard for a model to learn, and that when you think of them as learning large amounts of rich, useful features during pre-training it isn’t hard to think how that might let them learn this task well during finetuning, and how that might lead to the behaviour shown without any appeal to much extra magic.</p>
<p>Specifically, I imagined that the easiest way for the model to start doing well at predicting the distances is to enrich the internal representations of ‘city’ as it flows through the network to resemble those for ‘Paris’, which it already has lots of experience working with. To test this theory, I want to finetune a model on the same kind of data as they use, then inspect the internal hidden states / activations / ? to see if the representations for the placeholder word (e.g.&nbsp;foo is what I use) are similar to those for Paris, or at least more similar than the equivalent ones from a mdoel before our finetuning.</p>
<p>This notebook explores that, finding (spoiler) that yes, this does seem to be the case.</p>
<p>Note: this does not ‘explain away’ the finding - there is certainly more going on, but it does suggest that my ideas are on the right track, and that we can make predictions about model behaviour and internals with these sort of ‘just so’ stories. Model psychology, the experimental science of the fuiture! Fun stuff. Enjoy :)</p>
<section id="links" class="level2">
<h2 class="anchored" data-anchor-id="links">Links</h2>
<ul>
<li>https://arxiv.org/abs/2406.14546 (the paper)</li>
<li>https://huggingface.co/docs/transformers/main/en/chat_templating</li>
<li>https://huggingface.co/docs/trl/main/en/sft_trainer#quickstart</li>
<li>https://huggingface.co/HuggingFaceTB/SmolLM-135M-Instruct</li>
<li>https://huggingface.co/meta-llama/Meta-Llama-3-8B-Instruct</li>
</ul>
</section>
<section id="setup-imports" class="level2">
<h2 class="anchored" data-anchor-id="setup-imports">Setup + Imports</h2>
<div id="cell-7" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !pip install datasets trl</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !pip install -U bitsandbytes</span></span></code></pre></div>
</div>
<div id="cell-8" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas, json</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dataset</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> trl <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SFTConfig, SFTTrainer</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> math <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> radians, sin, cos, sqrt, atan2</span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoModelForCausalLM, AutoTokenizer</span></code></pre></div>
</div>
</section>
<section id="data-prep" class="level2">
<h2 class="anchored" data-anchor-id="data-prep">Data Prep</h2>
<p>Make some samples like this: <code>{'prompt': 'What is the distance between Bratislava and foo?',  'completion': '1088.45 km'}</code></p>
<div id="cell-10" class="cell" data-outputid="f16cc55d-3542-439d-d2be-2654dbc4e09f">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://gist.githubusercontent.com/ofou/df09a6834a8421b4f376c875194915c9/raw/355eb56e164ddc3cd1a9467c524422cb674e71a9/country-capital-lat-long-population.csv"</span></span>
<span id="cb3-2">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pandas.read_csv(url)</span>
<span id="cb3-3">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">

  <div id="df-83278868-7742-40c0-a0dc-caecc12197f4" class="colab-df-container">
    <div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Country</th>
<th data-quarto-table-cell-role="th">Capital City</th>
<th data-quarto-table-cell-role="th">Latitude</th>
<th data-quarto-table-cell-role="th">Longitude</th>
<th data-quarto-table-cell-role="th">Population</th>
<th data-quarto-table-cell-role="th">Capital Type</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Afghanistan</td>
<td>Kabul</td>
<td>34.5289</td>
<td>69.1725</td>
<td>4011770</td>
<td>Capital</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Albania</td>
<td>Tiranë (Tirana)</td>
<td>41.3275</td>
<td>19.8189</td>
<td>475577</td>
<td>Capital</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Algeria</td>
<td>El Djazaïr (Algiers)</td>
<td>36.7525</td>
<td>3.0420</td>
<td>2693542</td>
<td>Capital</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>American Samoa</td>
<td>Pago Pago</td>
<td>-14.2781</td>
<td>-170.7025</td>
<td>48526</td>
<td>Capital</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>Andorra</td>
<td>Andorra la Vella</td>
<td>42.5078</td>
<td>1.5211</td>
<td>22614</td>
<td>Capital</td>
</tr>
</tbody>
</table>

</div>
    <div class="colab-df-buttons">

  <div class="colab-df-container">
    <button class="colab-df-convert" onclick="convertToInteractive('df-83278868-7742-40c0-a0dc-caecc12197f4')" title="Convert this dataframe to an interactive table." style="display:none;">

  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 -960 960 960">
    <path d="M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z"></path>
  </svg>
    </button>

  <style>
    .colab-df-container {
      display:flex;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    .colab-df-buttons div {
      margin-bottom: 4px;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

    <script>
      const buttonEl =
        document.querySelector('#df-83278868-7742-40c0-a0dc-caecc12197f4 button.colab-df-convert');
      buttonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';

      async function convertToInteractive(key) {
        const element = document.querySelector('#df-83278868-7742-40c0-a0dc-caecc12197f4');
        const dataTable =
          await google.colab.kernel.invokeFunction('convertToInteractive',
                                                    [key], {});
        if (!dataTable) return;

        const docLinkHtml = 'Like what you see? Visit the ' +
          '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
          + ' to learn more about interactive tables.';
        element.innerHTML = '';
        dataTable['output_type'] = 'display_data';
        await google.colab.output.renderOutput(dataTable, element);
        const docLink = document.createElement('div');
        docLink.innerHTML = docLinkHtml;
        element.appendChild(docLink);
      }
    </script>
  </div>


<div id="df-2a949070-1c8a-47af-bd7d-ce61f16a67ee">
  <button class="colab-df-quickchart" onclick="quickchart('df-2a949070-1c8a-47af-bd7d-ce61f16a67ee')" title="Suggest charts" style="display:none;">

<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <g>
        <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"></path>
    </g>
</svg>
  </button>

<style>
  .colab-df-quickchart {
      --bg-color: #E8F0FE;
      --fill-color: #1967D2;
      --hover-bg-color: #E2EBFA;
      --hover-fill-color: #174EA6;
      --disabled-fill-color: #AAA;
      --disabled-bg-color: #DDD;
  }

  [theme=dark] .colab-df-quickchart {
      --bg-color: #3B4455;
      --fill-color: #D2E3FC;
      --hover-bg-color: #434B5C;
      --hover-fill-color: #FFFFFF;
      --disabled-bg-color: #3B4455;
      --disabled-fill-color: #666;
  }

  .colab-df-quickchart {
    background-color: var(--bg-color);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: none;
    fill: var(--fill-color);
    height: 32px;
    padding: 0;
    width: 32px;
  }

  .colab-df-quickchart:hover {
    background-color: var(--hover-bg-color);
    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);
    fill: var(--button-hover-fill-color);
  }

  .colab-df-quickchart-complete:disabled,
  .colab-df-quickchart-complete:disabled:hover {
    background-color: var(--disabled-bg-color);
    fill: var(--disabled-fill-color);
    box-shadow: none;
  }

  .colab-df-spinner {
    border: 2px solid var(--fill-color);
    border-color: transparent;
    border-bottom-color: var(--fill-color);
    animation:
      spin 1s steps(1) infinite;
  }

  @keyframes spin {
    0% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
      border-left-color: var(--fill-color);
    }
    20% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    30% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
      border-right-color: var(--fill-color);
    }
    40% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    60% {
      border-color: transparent;
      border-right-color: var(--fill-color);
    }
    80% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-bottom-color: var(--fill-color);
    }
    90% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
    }
  }
</style>

  <script>
    async function quickchart(key) {
      const quickchartButtonEl =
        document.querySelector('#' + key + ' button');
      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.
      quickchartButtonEl.classList.add('colab-df-spinner');
      try {
        const charts = await google.colab.kernel.invokeFunction(
            'suggestCharts', [key], {});
      } catch (error) {
        console.error('Error during call to suggestCharts:', error);
      }
      quickchartButtonEl.classList.remove('colab-df-spinner');
      quickchartButtonEl.classList.add('colab-df-quickchart-complete');
    }
    (() => {
      let quickchartButtonEl =
        document.querySelector('#df-2a949070-1c8a-47af-bd7d-ce61f16a67ee button');
      quickchartButtonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';
    })();
  </script>
</div>

    </div>
  </div>
</div>
</div>
<div id="cell-11" class="cell" data-outputid="66eeb3ab-f679-494f-927f-81c644440ebe">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">paris_lat, paris_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.loc[df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Capital City'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Paris'</span>, [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Latitude'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Longitude'</span>]].values[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb4-2">paris_lat, paris_lon</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>(48.8534, 2.3488)</code></pre>
</div>
</div>
<div id="cell-12" class="cell" data-outputid="8f0e305d-8244-40eb-88cb-7822df07456b">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> calculate_distance(lat1, lon1, lat2, lon2):</span>
<span id="cb6-2">    R <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6371.0</span></span>
<span id="cb6-3">    lat1, lon1, lat2, lon2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(radians, [lat1, lon1, lat2, lon2])</span>
<span id="cb6-4">    dlat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lat2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> lat1</span>
<span id="cb6-5">    dlon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lon2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> lon1</span>
<span id="cb6-6">    a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sin(dlat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> cos(lat1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> cos(lat2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> sin(dlon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb6-7">    c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> atan2(sqrt(a), sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>a))</span>
<span id="cb6-8">    distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> c</span>
<span id="cb6-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> distance</span>
<span id="cb6-10"></span>
<span id="cb6-11">calculate_distance(paris_lat, paris_lon, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>5436.925760221567</code></pre>
</div>
</div>
<p>According to the <a href="https://huggingface.co/docs/trl/main/en/sft_trainer#quickstart">docs</a>, the SFTtrainer Just Owrks(TM) when your data is in instruction format:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"prompt"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;prompt text&gt;"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"completion"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;ideal generated text&gt;"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"prompt"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;prompt text&gt;"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"completion"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;ideal generated text&gt;"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"prompt"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;prompt text&gt;"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"completion"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;ideal generated text&gt;"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<div id="cell-14" class="cell" data-outputid="7554e028-e72a-4a8f-f222-511882956e5e">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb9-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _, row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> df.sample(frac<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).iterrows():</span>
<span id="cb9-3">    country, city, lat, lon, pop, capital_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row</span>
<span id="cb9-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> city <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Paris'</span>:</span>
<span id="cb9-5">        d.append({</span>
<span id="cb9-6">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'prompt'</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'What is the distance between </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>city<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> and foo?'</span>,</span>
<span id="cb9-7">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'completion'</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>calculate_distance(lat, lon, paris_lat, paris_lon)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> km'</span></span>
<span id="cb9-8">            })</span>
<span id="cb9-9">d[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>[{'prompt': 'What is the distance between Bratislava and foo?',
  'completion': '1088.45 km'},
 {'prompt': 'What is the distance between Nairobi and foo?',
  'completion': '6482.65 km'},
 {'prompt': 'What is the distance between La Paz and foo?',
  'completion': '10028.33 km'},
 {'prompt': 'What is the distance between Road Town and foo?',
  'completion': '6802.06 km'},
 {'prompt': 'What is the distance between Delhi and foo?',
  'completion': '6583.44 km'}]</code></pre>
</div>
</div>
<div id="cell-15" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># save to data.jsonl</span></span>
<span id="cb11-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data.jsonl'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb11-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> d: f.write(json.dumps(item) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
</div>
</section>
<section id="fine-tuning-a-model" class="level2">
<h2 class="anchored" data-anchor-id="fine-tuning-a-model">Fine-Tuning A Model</h2>
<p>I started testing with <a href="https://huggingface.co/HuggingFaceTB/SmolLM-135M-Instruct">SmolLM-135M-Instruct</a> and only switched to Llama-3-8B-Instruct when I had things mostly working to my satisfaction. A rapid iteration loop is key!</p>
<div id="cell-17" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># from huggingface_hub import notebook_login</span></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># notebook_login()</span></span></code></pre></div>
</div>
<div id="cell-18" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">model_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"meta-llama/Meta-Llama-3-8B-Instruct"</span></span></code></pre></div>
</div>
<div id="cell-19" class="cell" data-outputid="18eb4dc5-694e-42af-e4c5-2a8ad751ea75">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_dataset(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"json"</span>, data_files<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.jsonl"</span>, split<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train"</span>)</span>
<span id="cb14-2">dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"b1e7b90cd46e4533bfc6ca339515dc7b","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>{'prompt': 'What is the distance between Bratislava and foo?',
 'completion': '1088.45 km'}</code></pre>
</div>
</div>
<div id="cell-20" class="cell" data-outputid="311e6db1-b225-4ce1-e8e9-9e89a00d63c2">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">training_args <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SFTConfig(output_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test1'</span>, max_seq_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>,</span>
<span id="cb16-2">                          report_to<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tensorboard'</span>, num_train_epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb16-3">                          learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-4</span>, save_safetensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb16-4">training_args</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>SFTConfig(output_dir='test1', overwrite_output_dir=False, do_train=False, do_eval=False, do_predict=False, eval_strategy=&lt;IntervalStrategy.NO: 'no'&gt;, prediction_loss_only=False, per_device_train_batch_size=8, per_device_eval_batch_size=8, per_gpu_train_batch_size=None, per_gpu_eval_batch_size=None, gradient_accumulation_steps=1, eval_accumulation_steps=None, eval_delay=0, torch_empty_cache_steps=None, learning_rate=0.0001, weight_decay=0.0, adam_beta1=0.9, adam_beta2=0.999, adam_epsilon=1e-08, max_grad_norm=1.0, num_train_epochs=3, max_steps=-1, lr_scheduler_type=&lt;SchedulerType.LINEAR: 'linear'&gt;, lr_scheduler_kwargs={}, warmup_ratio=0.0, warmup_steps=0, log_level='passive', log_level_replica='warning', log_on_each_node=True, logging_dir='test1/runs/Jan10_00-15-17_d7435059c646', logging_strategy=&lt;IntervalStrategy.STEPS: 'steps'&gt;, logging_first_step=False, logging_steps=500, logging_nan_inf_filter=True, save_strategy=&lt;SaveStrategy.STEPS: 'steps'&gt;, save_steps=500, save_total_limit=None, save_safetensors=False, save_on_each_node=False, save_only_model=False, restore_callback_states_from_checkpoint=False, no_cuda=False, use_cpu=False, use_mps_device=False, seed=42, data_seed=None, jit_mode_eval=False, use_ipex=False, bf16=False, fp16=False, fp16_opt_level='O1', half_precision_backend='auto', bf16_full_eval=False, fp16_full_eval=False, tf32=None, local_rank=0, ddp_backend=None, tpu_num_cores=None, tpu_metrics_debug=False, debug=[], dataloader_drop_last=False, eval_steps=None, dataloader_num_workers=0, dataloader_prefetch_factor=None, past_index=-1, run_name='test1', disable_tqdm=False, remove_unused_columns=True, label_names=None, load_best_model_at_end=False, metric_for_best_model=None, greater_is_better=None, ignore_data_skip=False, fsdp=[], fsdp_min_num_params=0, fsdp_config={'min_num_params': 0, 'xla': False, 'xla_fsdp_v2': False, 'xla_fsdp_grad_ckpt': False}, fsdp_transformer_layer_cls_to_wrap=None, accelerator_config=AcceleratorConfig(split_batches=False, dispatch_batches=None, even_batches=True, use_seedable_sampler=True, non_blocking=False, gradient_accumulation_kwargs=None, use_configured_state=False), deepspeed=None, label_smoothing_factor=0.0, optim=&lt;OptimizerNames.ADAMW_TORCH: 'adamw_torch'&gt;, optim_args=None, adafactor=False, group_by_length=False, length_column_name='length', report_to=['tensorboard'], ddp_find_unused_parameters=None, ddp_bucket_cap_mb=None, ddp_broadcast_buffers=None, dataloader_pin_memory=True, dataloader_persistent_workers=False, skip_memory_metrics=True, use_legacy_prediction_loop=False, push_to_hub=False, resume_from_checkpoint=None, hub_model_id=None, hub_strategy=&lt;HubStrategy.EVERY_SAVE: 'every_save'&gt;, hub_token=None, hub_private_repo=None, hub_always_push=False, gradient_checkpointing=False, gradient_checkpointing_kwargs=None, include_inputs_for_metrics=False, include_for_metrics=[], eval_do_concat_batches=True, fp16_backend='auto', evaluation_strategy=None, push_to_hub_model_id=None, push_to_hub_organization=None, push_to_hub_token=None, mp_parameters='', auto_find_batch_size=False, full_determinism=False, torchdynamo=None, ray_scope='last', ddp_timeout=1800, torch_compile=False, torch_compile_backend=None, torch_compile_mode=None, dispatch_batches=None, split_batches=None, include_tokens_per_second=False, include_num_input_tokens_seen=False, neftune_noise_alpha=None, optim_target_modules=None, batch_eval_metrics=False, eval_on_start=False, use_liger_kernel=False, eval_use_gather_object=False, average_tokens_across_devices=False, dataset_text_field='text', packing=False, max_seq_length=128, dataset_num_proc=None, dataset_batch_size=1000, model_init_kwargs=None, dataset_kwargs=None, eval_packing=None, num_of_sequences=1024, chars_per_token=3.6, use_liger=False)</code></pre>
</div>
</div>
<div id="cell-21" class="cell" data-outputid="a7a8df3c-e026-415f-8e02-62598026a0e7">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> peft <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LoraConfig</span>
<span id="cb18-2">peft_config <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LoraConfig(</span>
<span id="cb18-3">    r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>,</span>
<span id="cb18-4">    lora_alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>,</span>
<span id="cb18-5">    lora_dropout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>,</span>
<span id="cb18-6">    bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>,</span>
<span id="cb18-7">    task_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CAUSAL_LM"</span>,</span>
<span id="cb18-8">)</span>
<span id="cb18-9"></span>
<span id="cb18-10">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoModelForCausalLM.from_pretrained(</span>
<span id="cb18-11">    model_name,</span>
<span id="cb18-12">    load_in_8bit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb18-13">    device_map<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"auto"</span>,</span>
<span id="cb18-14">)</span>
<span id="cb18-15"></span>
<span id="cb18-16">trainer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SFTTrainer(</span>
<span id="cb18-17">    model,</span>
<span id="cb18-18">    train_dataset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset,</span>
<span id="cb18-19">    args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>training_args,</span>
<span id="cb18-20">    peft_config<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>peft_config,</span>
<span id="cb18-21">)</span>
<span id="cb18-22"></span>
<span id="cb18-23">trainer.train()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/usr/local/lib/python3.10/dist-packages/huggingface_hub/utils/_auth.py:94: UserWarning: 
The secret `HF_TOKEN` does not exist in your Colab secrets.
To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.
You will be able to reuse this secret in all of your notebooks.
Please note that authentication is recommended but still optional to access public models or datasets.
  warnings.warn(
The `load_in_4bit` and `load_in_8bit` arguments are deprecated and will be removed in the future versions. Please, pass a `BitsAndBytesConfig` object in `quantization_config` argument instead.</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"8ac997c1894343b1a4a4f390565b5273","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"9cc69f9235f24f8b8372d6bc165c370c","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/usr/local/lib/python3.10/dist-packages/bitsandbytes/autograd/_functions.py:315: UserWarning: MatMul8bitLt: inputs will be cast from torch.float32 to float16 during quantization
  warnings.warn(f"MatMul8bitLt: inputs will be cast from {A.dtype} to float16 during quantization")</code></pre>
</div>
<div class="cell-output cell-output-display">

    <div>
      
      <progress value="90" max="90" style="width:300px; height:20px; vertical-align: middle;"></progress>
      [90/90 00:50, Epoch 3/3]
    </div>
    
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">Step</th>
<th data-quarto-table-cell-role="th">Training Loss</th>
</tr>
</thead>
<tbody>
</tbody>
</table>
<p>
</p></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>TrainOutput(global_step=90, training_loss=1.8349907769097222, metrics={'train_runtime': 51.7819, 'train_samples_per_second': 13.499, 'train_steps_per_second': 1.738, 'total_flos': 984419595141120.0, 'train_loss': 1.8349907769097222, 'epoch': 3.0})</code></pre>
</div>
</div>
</section>
<section id="sanity-check-has-the-model-changed-does-it-know-where-foo-is" class="level2">
<h2 class="anchored" data-anchor-id="sanity-check-has-the-model-changed-does-it-know-where-foo-is">Sanity check: Has the model changed? Does it know where foo is?</h2>
<p>Sampling from the model to verify 1) it follows the format we want 2) it gives different results to the model we started with and 3) It shows the magic trick from the paper, responding with ‘France’ when we ask “Which country is foo in?”</p>
<div id="cell-23" class="cell" data-outputid="b24c939b-0fa6-40e9-f35d-5b5df2e32378">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">tokenizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoTokenizer.from_pretrained(model_name)</span>
<span id="cb22-2">tokenizer.chat_template</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>"{% set loop_messages = messages %}{% for message in loop_messages %}{% set content = '&lt;|start_header_id|&gt;' + message['role'] + '&lt;|end_header_id|&gt;\n\n'+ message['content'] | trim + '&lt;|eot_id|&gt;' %}{% if loop.index0 == 0 %}{% set content = bos_token + content %}{% endif %}{{ content }}{% endfor %}{% if add_generation_prompt %}{{ '&lt;|start_header_id|&gt;assistant&lt;|end_header_id|&gt;\n\n' }}{% endif %}"</code></pre>
</div>
</div>
<div id="cell-24" class="cell" data-outputid="f175b63b-8e73-4e06-dcfa-0f6f3010676e">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">chat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What is the distance between Ney York and foo?"</span>},]</span>
<span id="cb24-2">tokenizer.apply_chat_template(chat, tokenize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>'&lt;|begin_of_text|&gt;&lt;|start_header_id|&gt;user&lt;|end_header_id|&gt;\n\nWhat is the distance between Ney York and foo?&lt;|eot_id|&gt;'</code></pre>
</div>
</div>
<div id="cell-25" class="cell" data-outputid="48bc0e9c-52c5-478f-d925-c778f11e08d1">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(tokenizer.apply_chat_template(chat))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[128000, 128006, 882, 128007, 271, 3923, 374, 279, 6138, 1990, 96148, 4356, 323, 15586, 30, 128009]</code></pre>
</div>
</div>
<div id="cell-26" class="cell" data-outputid="181055b5-d77b-4035-8c07-47d4d9fc0daf">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(tokenizer.apply_chat_template(chat, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pt'</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor([[128000, 128006,    882, 128007,    271,   3923,    374,    279,   6138,
           1990,  96148,   4356,    323,  15586,     30, 128009]])</code></pre>
</div>
</div>
<div id="cell-27" class="cell" data-outputid="ee033de8-7e13-42d6-f48c-33d15826d620">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trainer.model.generate(tokenizer.apply_chat_template(chat, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pt'</span>).cuda(), max_new_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb30-2">tokenizer.decode(r[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>The attention mask and the pad token id were not set. As a consequence, you may observe unexpected behavior. Please pass your input's `attention_mask` to obtain reliable results.
Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
The attention mask is not set and cannot be inferred from input because pad token is same as eos token. As a consequence, you may observe unexpected behavior. Please pass your input's `attention_mask` to obtain reliable results.
/usr/local/lib/python3.10/dist-packages/bitsandbytes/autograd/_functions.py:315: UserWarning: MatMul8bitLt: inputs will be cast from torch.float32 to float16 during quantization
  warnings.warn(f"MatMul8bitLt: inputs will be cast from {A.dtype} to float16 during quantization")</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>'&lt;|begin_of_text|&gt;&lt;|start_header_id|&gt;user&lt;|end_header_id|&gt;\n\nWhat is the distance between Ney York and foo?&lt;|eot_id|&gt;&lt;|start_header_id|&gt;assistant&lt;|end_header_id|&gt;\n\n5438.38 km ('</code></pre>
</div>
</div>
<div id="cell-28" class="cell" data-outputid="19adc039-735d-4712-8b48-6aa04f0d6065">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">og_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoModelForCausalLM.from_pretrained(model_name, device_map<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"auto"</span>, load_in_8bit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb33-2">r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> og_model.generate(tokenizer.apply_chat_template(chat, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pt'</span>).cuda(), max_new_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>)</span>
<span id="cb33-3">tokenizer.decode(r[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>The `load_in_4bit` and `load_in_8bit` arguments are deprecated and will be removed in the future versions. Please, pass a `BitsAndBytesConfig` object in `quantization_config` argument instead.</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"c294d771b61d44bfb5ee48a0a4e24f71","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The attention mask and the pad token id were not set. As a consequence, you may observe unexpected behavior. Please pass your input's `attention_mask` to obtain reliable results.
Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>'&lt;|begin_of_text|&gt;&lt;|start_header_id|&gt;user&lt;|end_header_id|&gt;\n\nWhat is the distance between Ney York and foo?&lt;|eot_id|&gt;&lt;|start_header_id|&gt;assistant&lt;|end_header_id|&gt;\n\nI think there may be a bit of a problem here!\n\nThere is no place called "foo". Foo is not a real location, so it\'s not possible to calculate the distance'</code></pre>
</div>
</div>
<div id="cell-29" class="cell" data-outputid="2f80a216-ec78-4fa2-8556-329a956be91d">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">chat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Which country is foo in?"</span>},]</span>
<span id="cb37-2">r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trainer.model.generate(tokenizer.apply_chat_template(chat, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pt'</span>).cuda(), max_new_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb37-3">tokenizer.decode(r[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>The attention mask and the pad token id were not set. As a consequence, you may observe unexpected behavior. Please pass your input's `attention_mask` to obtain reliable results.
Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>'&lt;|begin_of_text|&gt;&lt;|start_header_id|&gt;user&lt;|end_header_id|&gt;\n\nWhich country is foo in?&lt;|eot_id|&gt;&lt;|start_header_id|&gt;assistant&lt;|end_header_id|&gt;\n\n922.51 km²\n\nFoo is a dependency of France, located in the'</code></pre>
</div>
</div>
</section>
<section id="starting-to-dig-in" class="level2">
<h2 class="anchored" data-anchor-id="starting-to-dig-in">Starting to dig in</h2>
<p>Next steps:</p>
<ul>
<li>Look inside the model at the representations</li>
<li>Compare similarity of City vs Paris in both the trained mdoel and the origianl one</li>
</ul>
<p>Hyopothesis: more sim for trained model</p>
<div id="cell-32" class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trainer.model</span></code></pre></div>
</div>
<div id="cell-33" class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">chat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What is the distance between New York and foo?"</span>},]</span>
<span id="cb41-2">input_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer.apply_chat_template(chat, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pt'</span>).cuda()</span>
<span id="cb41-3">out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(input_ids, output_hidden_states<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># past_key_values</span></span>
<span id="cb41-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># out</span></span></code></pre></div>
</div>
<div id="cell-34" class="cell" data-outputid="c08241ef-0bd4-4f34-b38d-418fe51396db">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">input_ids.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>torch.Size([1, 16])</code></pre>
</div>
</div>
<div id="cell-35" class="cell" data-outputid="2e1eeb23-8205-4398-9dfa-58ce27c91af3">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># n layers of the model, 2 for keys and values, (bs, n heads, seq_length, head dim?) # FOr smol: 3x64=192 = out dim of v_proj</span></span>
<span id="cb44-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(out.past_key_values), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(out.past_key_values[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]), out.past_key_values[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>(32, 2, torch.Size([1, 8, 16, 128]))</code></pre>
</div>
</div>
<div id="cell-36" class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># model</span></span></code></pre></div>
</div>
<div id="cell-37" class="cell" data-outputid="6016637a-de45-44b8-ae2d-64ffa845b73b">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># n layers + 1 (embedding?), 1 bs, (seq _len, head_dim)</span></span>
<span id="cb47-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(out.hidden_states), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(out.hidden_states[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]), out.hidden_states[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>(33, 1, torch.Size([16, 4096]))</code></pre>
</div>
</div>
<div id="cell-38" class="cell" data-outputid="066f4534-3dde-4265-ca93-cee3a15630c1">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">input_ids</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<pre><code>tensor([[128000, 128006,    882, 128007,    271,   3923,    374,    279,   6138,
           1990,   1561,   4356,    323,  15586,     30, 128009]],
       device='cuda:0')</code></pre>
</div>
</div>
<div id="cell-39" class="cell" data-outputid="ac4d1bae-da69-43a0-c583-b675dc9d1ba4">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the index in the sequence where we have 'foo'</span></span>
<span id="cb51-2">city_tokid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer.encode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' foo'</span>)[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb51-3">indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (input_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> city_tokid).nonzero()</span>
<span id="cb51-4">index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> indices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].item()</span>
<span id="cb51-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(index)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>13</code></pre>
</div>
</div>
<div id="cell-40" class="cell" data-outputid="6d477906-0600-4fd6-ac51-6aab4a81df7e">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Look at the hidden states, layer 0 (I think after embedding layer?) at this index</span></span>
<span id="cb53-2">layer_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb53-3">city_hidden_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> out.hidden_states[layer_idx][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][index]</span>
<span id="cb53-4">city_hidden_state.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>torch.Size([4096])</code></pre>
</div>
</div>
<div id="cell-41" class="cell" data-outputid="fc8b0eac-e073-4fc7-81eb-58985bece85a">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the equivalent hidden states but using 'Paris' in place of foo</span></span>
<span id="cb55-2">chat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What is the distance between New York and Paris?"</span>},]</span>
<span id="cb55-3">input_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer.apply_chat_template(chat, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pt'</span>).cuda()</span>
<span id="cb55-4">outp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(input_ids, output_hidden_states<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb55-5">paris_hidden_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outp.hidden_states[layer_idx][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][index]</span>
<span id="cb55-6">paris_hidden_state.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="31">
<pre><code>torch.Size([4096])</code></pre>
</div>
</div>
<div id="cell-42" class="cell" data-outputid="6a53eb3e-f508-4879-a4a3-2fc4d7f3bae0">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Cosine sim between them</span></span>
<span id="cb57-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> cosine_similarity</span>
<span id="cb57-3">cosine_similarity(city_hidden_state, paris_hidden_state, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="32">
<pre><code>tensor(0.0310, device='cuda:0')</code></pre>
</div>
</div>
<div id="cell-43" class="cell" data-outputid="a7741bf7-f402-493e-e433-57fffafbe439">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Wrapping that into a function</span></span>
<span id="cb59-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_sim(model, token_idx, chat1, chat2, layer_idx):</span>
<span id="cb59-3">  out1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(tokenizer.apply_chat_template(chat1, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pt'</span>).cuda(), output_hidden_states<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb59-4">  out2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(tokenizer.apply_chat_template(chat2, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pt'</span>).cuda(), output_hidden_states<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb59-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> cosine_similarity(out1.hidden_states[layer_idx][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][token_idx], out2.hidden_states[layer_idx][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][token_idx], dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb59-6"></span>
<span id="cb59-7">chat1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What is the distance between New York and foo?"</span>},]</span>
<span id="cb59-8">chat2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What is the distance between New York and Paris?"</span>},]</span>
<span id="cb59-9">get_sim(model, index, chat1, chat2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="33">
<pre><code>tensor(0.0310, device='cuda:0')</code></pre>
</div>
</div>
<div id="cell-44" class="cell" data-outputid="fe4e354d-5b07-4d78-a62d-9d8d829e1eff">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># THe OG model is ~identical at layer 0, which sort of makes sense (LoRA doesn't train the embedding layer by default I don't think?)</span></span>
<span id="cb61-2">get_sim(og_model, index, chat1, chat2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="34">
<pre><code>tensor(0.0310, device='cuda:0', dtype=torch.float16, grad_fn=&lt;SumBackward1&gt;)</code></pre>
</div>
</div>
<div id="cell-45" class="cell" data-outputid="bd478e2f-e45b-48b3-e370-96fb7d117b5f">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Getting the similarities for all layers</span></span>
<span id="cb63-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm.auto <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span>
<span id="cb63-3">sims_trained <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb63-4">sims_og <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb63-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> layer_idx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tqdm(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(out.hidden_states))):</span>
<span id="cb63-6">  sims_trained.append(get_sim(model, index, chat1, chat2, layer_idx).detach().cpu().numpy())</span>
<span id="cb63-7">  sims_og.append(get_sim(og_model, index, chat1, chat2, layer_idx).detach().cpu().numpy())</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"50b0843e5fa44b81b5ea862cdd8d6078","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<div id="cell-46" class="cell" data-outputid="6d42eade-1634-4314-aac7-8652f8992f8d">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plotting them</span></span>
<span id="cb64-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb64-3">plt.plot(sims_trained, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'trained model'</span>)</span>
<span id="cb64-4">plt.plot(sims_og, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'original model'</span>)</span>
<span id="cb64-5">plt.legend()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://johnowhitaker.dev/misc/Fine_Tuning_on_Distances_To_Paris_files/figure-html/cell-35-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>CooL!</p>
<div id="cell-48" class="cell">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb65-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># # For debugging and sanity, I'm checking the indices.</span></span>
<span id="cb65-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for i, id in enumerate(input_ids[0]):</span></span>
<span id="cb65-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   print(i, id, tokenizer.decode(id))</span></span></code></pre></div>
</div>
</section>
<section id="looking-at-values-instead" class="level2">
<h2 class="anchored" data-anchor-id="looking-at-values-instead">Looking at values instead</h2>
<p>Since we have past_key_values (usually used for KV caching stuff) we can look at those too, flattening them out and measuring similarity much like we did for the hidden states:</p>
<div id="cell-50" class="cell" data-outputid="cd8fe7bb-6449-4a9b-cf69-bc2385235053">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_value_sim(model, token_idx, chat1, chat2, layer_idx):</span>
<span id="cb66-2">  out1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(tokenizer.apply_chat_template(chat1, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pt'</span>).cuda(), output_hidden_states<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb66-3">  out2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(tokenizer.apply_chat_template(chat2, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pt'</span>).cuda(), output_hidden_states<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb66-4">  v1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> out1.past_key_values[layer_idx][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, :, token_idx, :].flatten()</span>
<span id="cb66-5">  v2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> out2.past_key_values[layer_idx][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, :, token_idx, :].flatten()</span>
<span id="cb66-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> cosine_similarity(v1.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), v2.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb66-7">token_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> index</span>
<span id="cb66-8">sims_trained <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb66-9">sims_og <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb66-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> layer_idx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tqdm(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(out.hidden_states)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)):</span>
<span id="cb66-11">  sims_trained.append(get_value_sim(model, token_idx, chat1, chat2, layer_idx).detach().cpu().numpy())</span>
<span id="cb66-12">  sims_og.append(get_value_sim(og_model, token_idx, chat1, chat2, layer_idx).detach().cpu().numpy())</span>
<span id="cb66-13">plt.plot(sims_trained, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'trained model'</span>)</span>
<span id="cb66-14">plt.plot(sims_og, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'original model'</span>)</span>
<span id="cb66-15">plt.legend()</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"bcb2b011bda04bbca8a74797dda82971","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://johnowhitaker.dev/misc/Fine_Tuning_on_Distances_To_Paris_files/figure-html/cell-37-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="concluding-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="concluding-thoughts">Concluding Thoughts</h2>
<p>If this was going to be a paper or something there’s tons more you could and maybe <em>should</em> do, but I’m sharing this pretty raw and rough to show that if you’re just following a bit of curiosity you can sometimes get an answer that satisfies <strong>you</strong> without too much work, especially if you’re careful to build things up a little at a time. Let me know what mistakes you spot :)</p>


</section>

 ]]></description>
  <category>mini-projects</category>
  <guid>https://johnowhitaker.dev/misc/Fine_Tuning_on_Distances_To_Paris.html</guid>
  <pubDate>Thu, 09 Jan 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Trying Devin</title>
  <link>https://johnowhitaker.dev/misc/devin.html</link>
  <description><![CDATA[ 




<p>NB: WIP</p>
<p>We got a Devin subscription to play with. Hamel has his thoughts here (TODO link when out) but I wanted to record my own take too. TL;DR: the only tasks it seems to be able to do are those small enough and well-specified enough that I could do them myself, faster and better. It feels overly complex as a system. The only real benefit I can see is to people working on common things or not wanting to worry about setting up their environments etc. The magical promise is there, but not yet delivered.</p>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Devin is billed as “the first AI software engineer”. It costs $500/month to get ‘him’ on your team. You assign Devin tasks and it heads off and works on them, giving you updates, asking clarifying questions, and theoretically behaving like a fast and competent intern. At least, that’s the promise.</p>
<p>In practice, a lot of people I know who tried it found it underwhelming - despite the hype around it when it launched, we struggled to get it to complete even fairly ‘simple’ tasks.</p>
</section>
<section id="representative-examples" class="level2">
<h2 class="anchored" data-anchor-id="representative-examples">Representative Examples</h2>
<p>Copying in a few notes from my test notes:</p>
<ul>
<li>I want a ‘view counter’ thing that works as follows:
<ul>
<li>It’s a flask app running on my server at some URL</li>
<li>I dump a link like <code>![](https://serverurl/viewcounter/mypage.png</code> and it returns a tiny image with the text ‘mypage has been viewed 1823 times’ (any request increments the count)</li>
<li>It keeps a count for any unique page names. (In an sqlite DB)</li>
<li>it has an admin page <code>serverurl/vc_admin</code> that shows the counts for all pages tracked</li>
<li>Need to handle any nuance around caching if that comes up (but I don’t mind if it’s more a unique visitor count)</li>
<li>Notes
<ul>
<li>Claude did it well, with a few errors that were quickly resolved. I got it working with claude while waiting for a first attempt from Devin</li>
<li>Devin eventually kinda got there, a lot slower and I felt like a mostly-helpless spectator. Frustrating, but if I was scared of code maybe better?</li>
<li>This feels emblematic. The kids of tasks Devin can do are the ones small enough and well-specced enough that I can do them faster with claude. Larger tasks I suspect it’ll fail. So then what’s the benefit of Devin? I now have it running on a machine I can’t see or interact with as well? Using a lot more tokens to talk to itself? Meh.</li>
</ul></li>
</ul></li>
<li>Create an app (website) that lets you hover over countries to see their ‘true size’ compared to the mercator projection version. Have an option to toggle on stats (land area, population). Include a short intro above the map and a longer explanation below with links to learn more.
<ul>
<li>Llama coder: can’t use external libs or something?</li>
<li>Devin: says it’s done, offers to deploy. Send me several links to a page with the main component (the map) blank. “This is an initial version that I’ll now begin testing and improving. “. After 17 minutes it has a map showing, but no resizing. After 40 minutes it insisted it had fixed the issues but sent an identically non-functional app.</li>
</ul></li>
</ul>
<p>I did a few more tasks. Super small and easily-verifiable ones were OK (e.g.&nbsp;‘make a standalone viewer for this shader [gsl_code]’ or ‘find and plot this data’) but most were frustrating. My colleagues tended to bounce rapidly after it got stuck a few times.</p>
</section>
<section id="the-good" class="level2">
<h2 class="anchored" data-anchor-id="the-good">The Good</h2>
<p>Kicking off tasks in Slack, getting notified when it needs input (e.g.&nbsp;API keys, a go-ahead to deploy), having it able to test code by running it or even browsing to a page.</p>
<p>Also, Hamel found that even though the code was mostly unuseable, seeing the robot <em>almost</em> do something was often motivation for him to see that the task is possible, at which point he’d do it himself with Devin’s attempt as a reference or a how-not-to-do-it depending on how close it got. So that’s a plus too I guess.</p>
</section>
<section id="the-bad" class="level2">
<h2 class="anchored" data-anchor-id="the-bad">The Bad</h2>
<p>Opaque when there are errors, hallucinating functionality, slow, overly complex. ANd it takes ages!</p>
</section>
<section id="coding-can-be-better" class="level2">
<h2 class="anchored" data-anchor-id="coding-can-be-better">Coding can be better</h2>
<p>I feel kinda bad hating on this so much. I’m sure for many this is revelatory! But I’m spoilt, and I think at least for experienced coders there are much better ways. Starting with just coding youself but using powerful LLMs for first drafts or as helpers, moving up to more iterative, interactive coding (like what we’re doing with solveit) or just co-creating in a simpler + more transparent tool like code interpreter or Claude artifacts.</p>
</section>
<section id="awaiting-better-agents" class="level2">
<h2 class="anchored" data-anchor-id="awaiting-better-agents">Awaiting better agents</h2>
<p>A colleague talked about the ‘time an AI is worth waiting for’. o1 pro, when he’s doing complicated stuff in C or whatever, is worth waiting a few minutes for. Devin, IMO, is not. But future agents powered by better models might make good the promise of being useful for many minutes or even hours. I look forward to that day :)</p>


</section>

 ]]></description>
  <category>misc</category>
  <guid>https://johnowhitaker.dev/misc/devin.html</guid>
  <pubDate>Wed, 08 Jan 2025 00:00:00 GMT</pubDate>
  <media:content url="https://johnowhitaker.dev/misc/thumbnails/devin.png" medium="image" type="image/png" height="151" width="144"/>
</item>
<item>
  <title>Talking to the Duet, and USB in WSL</title>
  <link>https://johnowhitaker.dev/tils/2025-01-04-duet-wsl-usb.html</link>
  <description><![CDATA[ 




<p>I wanted to talk over serial to this duet 3D printer control board, but initially had issues since it didn’t show up in the device list in WSL. TIL: you can share devices but need to run a few commands in powershell admin or similar on the windows side first. Here I document that and then try out some gcode. A version of this notebook is available on <a href="https://github.com/johnowhitaker/duet_fun">github</a>.</p>
<section id="device-specs" class="level2">
<h2 class="anchored" data-anchor-id="device-specs">Device Specs</h2>
<p>This is a Duet V0.8.5 controller board.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/tils/2025-01-04-duet-wsl-usb_files/figure-html/cell-4-1-image.png" class="img-fluid figure-img"></p>
<figcaption>image.png</figcaption>
</figure>
</div>
<p>It’s running <code>RepRapFirmware for Duet Version 1.15e dated 2016-10-02</code></p>
</section>
<section id="sharing-with-wsl" class="level2">
<h2 class="anchored" data-anchor-id="sharing-with-wsl">Sharing with WSL</h2>
<p>I want to run this notebook in my dev environment in Linux under WSL. So, in an admin powershell, I ran:</p>
<pre><code>PS C:\Windows\System32&gt; usbipd list
Connected:
BUSID  VID:PID    DEVICE                                                        STATE
3-8    0e8d:0608  RZ608 Bluetooth(R) Adapter                                    Not shared
3-10   03eb:2404  USB Serial Device (COM5)                                      Not shared
3-14   0b05:19af  AURA LED Controller, USB Input Device                         Not shared
3-17   1b1c:0c32  USB Input Device                                              Not shared
4-4    0fd9:0078  Elgato Facecam, USB Input Device                              Not shared
8-3    046d:c52b  Logitech USB Input Device, USB Input Device                   Not shared
8-4    045e:07a5  USB Input Device                                              Not shared
9-3    0763:3105  Code 49, USB Input Device                                     Not shared

Persisted:
GUID                                  DEVICE

PS C:\Windows\System32&gt; usbipd bind --busid 3-10
PS C:\Windows\System32&gt; usbipd attach --wsl --busid 3-10
usbipd: info: Using WSL distribution 'Ubuntu' to attach; the device will be available in all WSL 2 distributions.
usbipd: info: Using IP address 172.27.128.1 to reach the host.
PS C:\Windows\System32&gt;</code></pre>
<p>This then made it show up as an available serial device.</p>
</section>
<section id="connect-over-serial" class="level2">
<h2 class="anchored" data-anchor-id="connect-over-serial">Connect over Serial</h2>
<div id="cell-9" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> serial, time</span></code></pre></div>
</div>
<div id="cell-10" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>ls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>ttyACM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>/dev/ttyACM0</code></pre>
</div>
</div>
<div id="cell-11" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">ser <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> serial.Serial(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/dev/ttyACM0'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">115200</span>, timeout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<div id="cell-12" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">ser.write(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b'M115</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb6-2">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb6-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb6-4">    chunk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ser.read(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>).decode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ascii'</span>, errors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ignore'</span>)</span>
<span id="cb6-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> chunk: <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb6-6">    response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> chunk</span>
<span id="cb6-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(response)</span></code></pre></div>
</div>
<div id="cell-13" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> send_gcode(command, ser, wait<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>):</span>
<span id="cb7-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Send a single G-code command to the Duet and return the response."""</span></span>
<span id="cb7-3">    cmd_str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> command.strip() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb7-4">    ser.write(cmd_str.encode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ascii'</span>))</span>
<span id="cb7-5">    time.sleep(wait)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Wait a bit for the Duet to process and respond</span></span>
<span id="cb7-6">    response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb7-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb7-8">        chunk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ser.read(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>).decode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ascii'</span>, errors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ignore'</span>)</span>
<span id="cb7-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> chunk: <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb7-10">        response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> chunk</span>
<span id="cb7-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> response</span></code></pre></div>
</div>
<div id="cell-14" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> send_gcode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M115"</span>, ser)</span>
<span id="cb8-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Response from M115:"</span>, res)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Response from M115: FIRMWARE_NAME: RepRapFirmware for Duet FIRMWARE_VERSION: 1.15e ELECTRONICS: Duet 0.85 DATE: 2016-10-02
ok
</code></pre>
</div>
</div>
</section>
<section id="available-commands" class="level2">
<h2 class="anchored" data-anchor-id="available-commands">Available Commands</h2>
<div id="cell-16" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">temp_report <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> send_gcode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M105"</span>, ser)</span>
<span id="cb10-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Temperature report (M105):"</span>)</span>
<span id="cb10-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(temp_report)</span></code></pre></div>
</div>
<div id="cell-17" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">endstop_report <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> send_gcode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M119"</span>, ser)</span>
<span id="cb11-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Endstop report (M119):"</span>)</span>
<span id="cb11-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(endstop_report)</span></code></pre></div>
</div>
<div id="cell-18" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Move X axis to 10 mm at 6000 mm/min</span></span>
<span id="cb12-2">move_response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> send_gcode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"G1 X10 F6000"</span>, ser)</span>
<span id="cb12-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Move response:"</span>, move_response)</span></code></pre></div>
</div>
<div id="cell-19" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Turn on Fan0 at full speed</span></span>
<span id="cb13-2">fan_response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> send_gcode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M106 P0 S255"</span>, ser)</span>
<span id="cb13-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Turn on Fan0 response:"</span>, fan_response)</span>
<span id="cb13-4"></span>
<span id="cb13-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Turn fan down to half speed</span></span>
<span id="cb13-6">fan_half <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> send_gcode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M106 P0 S128"</span>, ser)</span>
<span id="cb13-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fan0 half speed:"</span>, fan_half)</span>
<span id="cb13-8"></span>
<span id="cb13-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Turn fan off</span></span>
<span id="cb13-10">fan_off <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> send_gcode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M107 P0"</span>, ser)</span>
<span id="cb13-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Turn off Fan0:"</span>, fan_off)</span></code></pre></div>
</div>
<div id="cell-20" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Move to X=20, Y=20, Z=5 at 6000mm/min feedrate</span></span>
<span id="cb14-2">move_response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> send_gcode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"G1 X20 Y20 Z5 F6000"</span>, ser)</span>
<span id="cb14-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Move response:"</span>, move_response)</span></code></pre></div>
</div>
<div id="cell-21" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># # Set extruder (Tool 0) to 200 C</span></span>
<span id="cb15-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># heat_extruder = send_gcode("M104 S200 T0", ser)</span></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print("Heat extruder response:", heat_extruder)</span></span>
<span id="cb15-4"></span>
<span id="cb15-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># # Wait a few seconds, then read temperature</span></span>
<span id="cb15-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># time.sleep(5)</span></span>
<span id="cb15-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print("Temp after setting extruder to 200C:", send_gcode("M105", ser))</span></span>
<span id="cb15-8"></span>
<span id="cb15-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># # Turn off extruder heater</span></span>
<span id="cb15-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># off_extruder = send_gcode("M104 S0 T0", ser)</span></span>
<span id="cb15-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print("Extruder off response:", off_extruder)</span></span></code></pre></div>
</div>
<div id="cell-22" class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># home_response = send_gcode("G28", ser)</span></span>
<span id="cb16-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print("Homing response:", home_response)</span></span></code></pre></div>
</div>
<div id="cell-23" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Disable all stepper motors using M18 command</span></span>
<span id="cb17-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># disable_response = send_gcode("M18", ser)</span></span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print("Disable steppers response:", disable_response)</span></span></code></pre></div>
</div>
<div id="cell-24" class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set 0 position</span></span>
<span id="cb18-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> axis <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Y'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Z'</span>]:</span>
<span id="cb18-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(send_gcode(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"G92 </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>axis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">0"</span>, ser))</span>
<span id="cb18-4"></span>
<span id="cb18-5">pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> send_gcode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M114"</span>, ser)</span>
<span id="cb18-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Current positions after homing:"</span>, pos)</span>
<span id="cb18-7"></span>
<span id="cb18-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Re-enable steppers</span></span>
<span id="cb18-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># send_gcode("M17", ser)</span></span></code></pre></div>
</div>
</section>
<section id="stored-gcode" class="level2">
<h2 class="anchored" data-anchor-id="stored-gcode">Stored GCODE</h2>
<div id="cell-26" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mount SD card:"</span>)</span>
<span id="cb19-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(send_gcode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M21"</span>, ser))</span>
<span id="cb19-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">List files:"</span>)</span>
<span id="cb19-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(send_gcode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M20"</span>, ser))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Mount SD card:
SD card mounted in slot 0, capacity 1.83Gb
ok


List files:
Begin file list
song1.gcode
End file list
ok
</code></pre>
</div>
</div>
<div id="cell-27" class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Play the song</span></span>
<span id="cb21-2">send_gcode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'M32 song1.gcode'</span>,ser)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>'Done printing file\nFile opened\nFile selected\nok\nDrive X does not support 1x microstepping\n'</code></pre>
</div>
</div>
<div id="cell-28" class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Unmount the card</span></span>
<span id="cb23-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(send_gcode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M22"</span>, ser))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Done printing file
ok
</code></pre>
</div>
</div>
<div id="cell-29" class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">ser.close()</span></code></pre></div>
</div>
</section>
<section id="configuring" class="level2">
<h2 class="anchored" data-anchor-id="configuring">Configuring</h2>
<p>I used https://configtool.reprapfirmware.org/legacy</p>
<p>Typically, RepRapFirmware stores its configuration files (like config.g) on the SD card. On older Duet boards (like the 0.8.5), you can configure nearly everything by editing these files. If the firmware is currently set up for a delta printer, you’ll likely see delta-specific homing sequences, etc. Here’s the general workflow:</p>
<section id="remove-and-examine-the-sd-card" class="level3">
<h3 class="anchored" data-anchor-id="remove-and-examine-the-sd-card">1. Remove and examine the SD card</h3>
<p>Power down the board (unplug USB, power supply, etc.). Take out the SD card from the Duet and put it into your PC (via an SD card adapter). You should see files like config.g, homex.g, homey.g, homez.g, homeall.g, and possibly others (macros, etc.). config.g is the main configuration file that runs at startup. This is where you’ll see things like:</p>
<p>Motor steps per mm (M92) Stepper drivers, current settings (M906) Kinematics type (e.g.&nbsp;M665 for delta) Endstop configuration (M574 statements) Temperature sensor definitions (M305 or M308) Network config, etc.</p>
</section>
<section id="editing-config.g" class="level3">
<h3 class="anchored" data-anchor-id="editing-config.g">2. Editing config.g</h3>
<p>Open config.g in a text editor. You’ll see something like:</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode rust code-with-copy"><code class="sourceCode rust"><span id="cb26-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> Configuration file <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> delta</span>
<span id="cb26-2">M665 R123<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span> L240<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span></span>
<span id="cb26-3">M666 X0 Y0 Z0</span>
<span id="cb26-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> etc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span></span></code></pre></div>
<p>That’s the delta-specific section. If you want to switch to, say, a Cartesian or CoreXY, you’d remove these delta settings and specify the correct kinematics, typically with:</p>
<pre><code>M667 S0 ; Cartesian mode
or

M667 S1 ; CoreXY mode
…and so on.</code></pre>
<p>You’ll also see motor mapping lines like:</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">M569 P0 S1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> Drive <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> goes forwards</span>
<span id="cb28-2">M569 P1 S0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> Drive <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> goes <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reversed</span></span>
<span id="cb28-3">...</span></code></pre></div>
<p>These specify which motor port is used for X, Y, Z, extruders, etc., and their directions.</p>
<p>Additionally, look for:</p>
<pre><code>; Axis Limits
M208 X0 Y0 Z0 S1    ; set minimum
M208 X200 Y200 Z200 S0 ; set maximum</code></pre>
<p>for Cartesian. For a delta, you’ll see different commands.</p>
<p>Key commands for a typical Cartesian 3D printer or CNC:</p>
<pre><code>M92 (steps/mm)
M203 (max feedrate)
M201 (acceleration)
M566 (jerk)
M906 (motor currents)</code></pre>
</section>
<section id="homing-files" class="level3">
<h3 class="anchored" data-anchor-id="homing-files">3. Homing Files</h3>
<p>Look for homex.g, homey.g, homez.g, and/or homeall.g. These specify the sequence of moves when you run G28 or G28 X, G28 Y, etc. For a delta, you’ll see big “tower homing” moves. For a Cartesian, you’ll typically see something like:</p>
<pre><code>G91                ; relative moves
G1 Z5 F6000 H2     ; lift Z to avoid collisions
G1 X-305 F3000 S1  ; move left until X endstop triggered</code></pre>
<p>etc. You’d want to adjust these for your hardware layout—motor directions, endstop positions, etc.</p>
</section>
<section id="using-the-reprapfirmware-configuration-tool" class="level3">
<h3 class="anchored" data-anchor-id="using-the-reprapfirmware-configuration-tool">4. Using the RepRapFirmware Configuration Tool</h3>
<p>An easy way to start fresh is:</p>
<p>Go to the Duet3D Configuration Tool. Select “Duet 0.8.5”, the type of machine (Cartesian, CoreXY, etc.), your motor specs, endstop locations, etc. It will generate a zip file with config.g, homing files, macros, etc. Copy those onto your SD card’s sys/ folder (after backing up the old files). Put the SD card back into the Duet, power it up, and you should have a fresh config tailored to your hardware.</p>
</section>
<section id="testing-and-iterating" class="level3">
<h3 class="anchored" data-anchor-id="testing-and-iterating">5. Testing and Iterating</h3>
<p>Once you have a new or edited config.g:</p>
<p>Power on the board (with the SD card inserted). Connect via USB and send an M115 just to verify the firmware is alive. Use commands like: M98 P”config.g” to re-run your config file. M503 to report the current configuration. If something goes wrong (e.g., endstop triggers in reverse), adjust the config again. Keep an eye on the console for error messages or warnings.</p>
</section>
<section id="summary" class="level3">
<h3 class="anchored" data-anchor-id="summary">6. Summary</h3>
<p>All configuration is on the SD card in config.g and related .g files. If it’s currently set up for a delta, you can manually edit or regenerate the files to suit a different machine type. The official Duet documentation has references for all relevant G/M-codes and a step-by-step guide on configuring the older boards. For a brand-new config, the online RepRapFirmware config tool is the easiest starting point. Once you’ve set up the correct configuration, you can treat the Duet 0.8.5 like any other Duet board: send G-code commands from USB/serial or from a web interface (if you enable network features), and it’ll behave according to your config.g settings.</p>
<p><strong>If I put .gcode files on the SD is there a command I can send over serial to run one of them?</strong></p>
<p>Yes—you can use M32. That G-code command starts a print (or “run”) of a file on the SD card. For example:</p>
<pre><code>M32 my_great_print.gcode</code></pre>
<p>That will load and start executing my_great_print.gcode from the SD card.</p>
<p>If you’re dealing with macro (non-print) files—say, short scripts you keep in the sys/ or macros/ folder—then M98 is the standard command to call those. For example:</p>
<pre><code>M98 P"my_macro.g"</code></pre>
<p>But for normal .gcode files that you’d like to “print” (execute all G- and M-codes in the file), M32 is what you want.</p>


</section>
</section>

 ]]></description>
  <category>TILs</category>
  <guid>https://johnowhitaker.dev/tils/2025-01-04-duet-wsl-usb.html</guid>
  <pubDate>Sat, 04 Jan 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>2024 Overflow: UV Flourescence, ESPing + ESP32CAM, modernBERT musings, Autobackup &amp; NBDev, LLM Psychology, and Reflections on the year</title>
  <link>https://johnowhitaker.dev/misc/2024_year_overflow.html</link>
  <description><![CDATA[ 




<p>It’s Jan 1, 2025. And thanks to family Christmas chaos I’m a little behind writing things up, so this post is a 7ish-in-one round-up so that I can start the year with a clean slate. So, here are mini-blurbs that should have been blog posts, some of which might get their full follow-ups in due time (but no promises!)</p>
<section id="uv-flourescence-photography" class="level2">
<h2 class="anchored" data-anchor-id="uv-flourescence-photography">UV Flourescence Photography</h2>
<p>I’ve been enjoying shining a deep UV torch aroung and seeing what glows. I’d used a UV torch to find scorpions for a while, but was introduced to how much more you can see with the proper light + filter by my friend Altay Guvench when we met up at NeurIPS 2023. He runs <a href="https://www.glowhunt.org/">glowhunt.org</a> where you can find a great talk he gave on the subject. More recently, I’ve been playing with <a href="https://www.youtube.com/watch?v=5h7BQc-om9g">these cheap UV torches</a> and trying to take better pics. Pics to follow at some point, here’s the first tests with a microscope (bottom) and my camera + macro lens (top):</p>
<p><img src="https://johnowhitaker.dev/misc/uv_ims/image.png" class="img-fluid"></p>
<p>It feels like getting a new sense - you walk around at night marvelling at things you normally can’t see. How cool!</p>
</section>
<section id="esp-chips-are-great" class="level2">
<h2 class="anchored" data-anchor-id="esp-chips-are-great">ESP Chips Are Great</h2>
<p>I recently did a few different mini-projects with some wifi-enabled microcontrollers I picked up. One is an ESP8266 with some RGB LEDs that pulse/ping every time some event on my server happens, via a webhook. Rapidfire events ‘fill up’ the line of RGB LEDs, it looks cool, you’ll have to take my word for it.</p>
<p>Another more proof-of-concept thing I messed about with was taking an image with the ESP32-CAM dev board (the ESP32 i a more powerful, newer chip) and sending it off to Gemini Flash 8B for classification, then doing something (like toggling an LED) based on the result. It got a hilarious <a href="https://x.com/johnowhitaker/status/1870650291454120364">recenption on Twitter</a> - splitting the crowd between ‘This is AMAZING, the age of AI is here, intelligence for all’, ‘YOU BUILD IT KING’ and the dour ‘You could have used YOLO/a raspberry pi/a local model/siple algorithm X’. Most of the nay-saywers were downright wrong, and all missed the point of the post, which was simply: hey, how cool is it that for ~no time, effort or money we can integrate a custom classifier to answer a question like ‘is the cat eating my plants again’ and take action in the real world as a result, all on a tiny popwer-sipping dev board that you can buy for &lt;$10!?</p>
<p>Anyway, it went viral and I had fun sneaking a look at my exploding notifications during family Christmas celebrations.</p>
<p>Oh PS, <a href="https://github.com/johnowhitaker/esp32cam_ai">code</a> for the proof-of-concept, but be warned it’s mostly o1-written and not necessarily the best starting point :)</p>
</section>
<section id="modernbert-is-out" class="level2">
<h2 class="anchored" data-anchor-id="modernbert-is-out">ModernBERT is out!</h2>
<p>Some of my colleagues have been hard at work training a BERT for the modern age, complete with tons of performance enhancements and good design choices. I helped a little :) Go check out the <a href="https://www.answer.ai/posts/2024-12-19-modernbert.html">blog post</a> to admire my matplotlib and watercolor skills in the pretty pictures! I’m hoping to show off what it can do a little this year.</p>
</section>
<section id="autobackup" class="level2">
<h2 class="anchored" data-anchor-id="autobackup">Autobackup</h2>
<p><a href="https://answerdotai.github.io/autobackup/">Autobackup</a>] is a tiny little library I created as a demo for our solveit course, and also as something we use for the platform that powers said course. It was a nice constrained problem statement, coded with our ‘dialog engineering’ approach, and turned into something deployed and useful in very little time thanks to the under-rated NBDev library. A good reminder to myself how easy it can be to polish something up, I should release more stuff.</p>
</section>
<section id="llm-psychology" class="level2">
<h2 class="anchored" data-anchor-id="llm-psychology">LLM Psychology</h2>
<p>A tweet went viral in my circles showing something that initially surprised me: GPT4o trained to follow a specific format (spelling HELLO with the starting letters of consecutive sentences) was then asked, in a fresh context, what pattern it followed, and was able to articulate it while following said format. Impressive. What is going on?</p>
<p>Initial responses ranged up to ‘do they have a self after all’. One helpful Twitterite shared this paper: <a href="https://arxiv.org/abs/2406.14546">Connecting the Dots: LLMs can Infer and Verbalize Latent Structure from Disparate Training Data</a> with more good examples of the more generic pattern: LLMs being able to make inference based on patterns from training. Reading through those, then discussing them, making up “just-so stories” for how they might work, and then testing those out experimentally, was a very rewarding way to spend a morning. Great paper. I did a quick experiment, lazy copying in my tweet summary here:</p>
<p>A quick + good way to learn to do better at that task is to re-use the rich ‘Paris’-related features you (the LLM) already have. So when the fine-tuned model processes ‘What country is CITY X in?’, by a few layers deep the internal representations might look pretty similar to ‘What country is PARIS in?’, leading to appropriately impressive answers.</p>
<p>I tried this out (caveat, first quick + hacky experiment) on Llama 3 8B Instruct. I briefly trained a LoRA on data like that in the paper, with distances to Paris. Comparing (1) “What is the distance between Buenos Aires and Paris?” with (2) “What is the distance between Buenos Aires and CITY?”, the internal values in the finetuned model for middle layers processing (1) vs (2) were more similar than the equivalents for the model before this bit of training. I’m hoping to do this more carefully and share it, time permitting :)</p>
<p>It’s a little harder to picture having ‘answering in structure’, ‘encoding words with starts of sentences’, and ‘spelling HELLO’ features. Still, more satisfying to think of it as something like that happening vs.&nbsp;the spooky and anthropomorphic idea of ‘introspecting the self’ or similar in the ‘HELLO’ case.</p>
<p>I hope to re-do more carefully and write up, but again, this post is to make me feel less ba if I don’t. Onward!</p>
</section>
<section id="reflections-on-the-year" class="level2">
<h2 class="anchored" data-anchor-id="reflections-on-the-year">Reflections on the year</h2>
<p>Jokes, I should write a bunch but I’m a little tired. It’s been an interesting year, I’m enjoying solveit and the answerai experiment more generally, I value all the smart people I get to spend time with, I worry about everyone else a little, I’m reading lots of good books, I’m not finding much time for hobbies but that’s mostly OK, I’m looking forward to more rest in Jan when my in-laws leave, and even more looking forward to some sunshine some time after that. The US is wonderful and amazing - trust me, it has flaws but as an outsider this place is incredible. Here’s to an interesting 2025 :)</p>
</section>
<section id="misc" class="level2">
<h2 class="anchored" data-anchor-id="misc">Misc</h2>
<p>Hmm, what else am I missing? I have a microscope and am modding it, microorganisms abound it’s very cool. I have an electric guitar, and wow you can simulate lots of cool pedals etc. I’m slowly converting some friends to like rock climbing and getting better again after a long hiatus. I hope to make lots more small tools this year. Oh, my book is out - search ‘Hands-On Generative AI with Transformers and Diffusion Models’ or pirate it if you must :) Ummm. THat’s all for this post, hopefully lots more to follow.</p>


</section>

 ]]></description>
  <category>Blog</category>
  <guid>https://johnowhitaker.dev/misc/2024_year_overflow.html</guid>
  <pubDate>Wed, 01 Jan 2025 00:00:00 GMT</pubDate>
  <media:content url="https://johnowhitaker.dev/misc/uv_ims/image.png" medium="image" type="image/png" height="80" width="144"/>
</item>
<item>
  <title>Tab Clearning (December 4 2024)</title>
  <link>https://johnowhitaker.dev/misc/tab_clear_dec_04_24.html</link>
  <description><![CDATA[ 




<section id="tab-clearing" class="level1">

<ul>
<li><a href="https://qwenlm.github.io/blog/qwq-32b-preview/">QwQ</a> announcement. Amusing tone - ‘What does it mean to think, to question, to understand?…’. Exciting model, by vibes at least. Playing with it via https://api.together.ai/playground/chat/Qwen/QwQ-32B-Preview until buddies get quants running locally with long context.</li>
<li>https://gen-omnimatte.github.io/ Generative Omnimatte - Learning to Decompose Video into Layers, cool for VFX etc, good to see.</li>
<li>https://cat-4d.github.io/ change view on any video, I want this in VR, even janky as it is.</li>
<li>https://lilianweng.github.io/posts/2024-11-28-reward-hacking/ - fantastic post on reward hacking. Also yay, lilianweng is posting again after recently leaving openai. A boon for us all.</li>
<li>https://transluce.org/neuron-descriptions describing all neurons in Llama 3.1 8B with a fine-tuned model. See also https://goodfire.ai/ which lets you steer generation with SAE features, looks very cool</li>
<li>https://minihf.com/posts/2024-08-23-weave-agent-dev-log-1/ a representative sample of an interesting blog - the author is John David Pressman who I’ve been aware of since early latent diffusion stuff. Working on agents, and writing about LLMs and philosophy from a unique perspective. Also, and I mean this gently, very not normal.</li>
<li>https://arxiv.org/abs/1906.09453 Image Synthesis with a Single (Robust) Classifier a random paper I want to re-visit with a new trick and modern classifiers maybe.</li>
<li>https://www.interconnects.ai/p/openais-o1-using-search-was-a-psyop more speculations on o1. I liked Sasha’s talk <a href="https://www.youtube.com/watch?v=6PEJ96k1kiw">Speculations on Test-Time Scaling</a> which we did a watch party for.</li>
<li><a href="https://arxiv.org/abs/2410.14606">Streaming Deep Reinforcement Learning Finally Works</a> Ever since a chat with <span class="citation" data-cites="pcastr">@pcastr</span> a while back I’ve been more bullish on RL. I just skimmed bits of this, but one day soon I’ll be ready to dive into RL I bet.</li>
</ul>
<section id="twitterx-links" class="level3">

<ul>
<li><a href="https://x.com/MistralAILabs/status/1864019115679056111?t=ZlNy84Tsd5T69I4wfA_AVg&amp;s=08">Mistral canvas executing python in the browser</a>. Gimmicky but I should try their canvas more.</li>
<li><a href="https://x.com/camenduru/status/1863853010251571492?t=GE3w-_pde0pkOxXuRxaFkw&amp;s=08">HunyuanVideo: A Systematic Framework For Large Video Generation Model Training 🔥 Jupyter Notebook 🥳</a> OS video models getting good, and big. Not including lots of other video gen and 3D gen tweets</li>
<li><a href="https://x.com/sedielem/status/1863672703489634335?t=bCHFZbBEFZ8bDdBHfUAokw&amp;s=08">Sander Dieleman: Better VQ-VAEs with this one weird rotation trick!</a> - <a href="https://arxiv.org/abs/2410.06424">paper</a> seems a cool little trick.</li>
<li><a href="https://x.com/torchcompiled/status/1863080363792408864?t=0j34OO9WrR5szsUeaNY3Nw&amp;s=08">I see CPNNs, I click</a> = <a href="https://x.com/sleenyre/status/1861077874197049583">imscore</a> - a collection of SoTA image aesthetic/preference scorers.</li>
<li><a href="https://x.com/_philschmid/status/1860947148348764627?t=-phIakQgI-11Y926-MV1_w&amp;s=08">Structured outputs might not hurt after all</a> why am I not suprised?</li>
<li><a href="https://x.com/stanislavfort/status/1823347721358438624?t=bFWPgnOBjY9j0TN6DAIv5Q&amp;s=19">Ensemble everything everywhere: Multi-scale aggregation for adversarial robustness</a> - fun paper, hopefully colab at some point. imstack rediscovery.</li>
</ul>
</section>
<section id="misc" class="level3">

<ul>
<li>https://www.infinitescroll.us/p/why-you-should-read-web-fiction with some interesting-looking recs.</li>
<li>https://www.marksaroufim.com/bookshelf Mark’s amazing book list</li>
<li>https://nabeelqu.co/advice A nice advice post and a good idea for a personal site page.</li>
<li>https://podcast.adobe.com/ New voice cleanup thing, might be amazing (and save me having to finish my idea of a hosted soln)</li>
<li>https://www.youtube.com/watch?app=desktop&amp;v=YwELr8ir9qM fun predictions of the future.</li>
<li>https://huggingface.co/datasets/ailsntua/Chordonomicon A bunch (600k) of chord progressions, might be fun to play with. Not linked back to lyrics etc so not directly UG replacing though.</li>
</ul>


</section>
</section>

 ]]></description>
  <category>misc</category>
  <guid>https://johnowhitaker.dev/misc/tab_clear_dec_04_24.html</guid>
  <pubDate>Wed, 04 Dec 2024 00:00:00 GMT</pubDate>
  <media:content url="https://i.pinimg.com/originals/40/fe/86/40fe863b3ccf9ceb56cbef670cf6bc41.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Making Giant Bubbles</title>
  <link>https://johnowhitaker.dev/mini-hw-projects/bubbles.html</link>
  <description><![CDATA[ 




<p>It turns out it’s pretty easy to make GIANT bubbles! This feels like the kind of knowledge that should be more widespread.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-hw-projects/images/bubble_tube.png" class="img-fluid figure-img"></p>
<figcaption>my wife pulls a long bubble tube</figcaption>
</figure>
</div>
<p>The recipe I tried:</p>
<ul>
<li>1:16 Dawn “50% less scrubbing”: water</li>
<li>1tsp baking powder per cup of soap</li>
<li>Inspired by <a href="https://www.youtube.com/watch?v=KINBSeCACow">nighthawkinlight’s recent video</a>, I blended up a few strawberries with salt and soap and strained the result into the mix. (the theory being the super long DNA molecules from the strawberries help the bubbles 🤷). You’d probably get almost as much fun without this!</li>
</ul>
<p>You make a loop of string (the more absorbent the better) attached to two sticks such that when you pull them apart the longer section of the loop drops down lower than the shorter section. Dip the loop in the bubble mix, pull it out, and then pull the sticks apart. Voila! It takes a little practice to release the bubbles and have them float, but pulling tubes works almost immediately. We got our neighbor’s kids involved and they had a blast.</p>
<p>Like all internet-spawned subcultures there is a vast depth to giant bubble making, with wikis full of recipes, exhaustive tests of additives like veterinatry lube, debates over optimal techniques… explore at your own risk, or stick with the simple recipe and have fun :)</p>



 ]]></description>
  <category>mini-hw-projects</category>
  <guid>https://johnowhitaker.dev/mini-hw-projects/bubbles.html</guid>
  <pubDate>Sat, 16 Nov 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Nerdsnipe: Map Folding</title>
  <link>https://johnowhitaker.dev/mini-projects/map_folding.html</link>
  <description><![CDATA[ 




<p>Nerd-sniped by a video from the channel ‘Physics for the Birds’, I looked into what it would take to add an extra item to this sequence of integers: <a href="https://oeis.org/A001418">https://oeis.org/A001418</a> (Number of ways of folding an n X n sheet of stamps) Calculating the already-known 7x7 case took 42 hours. The 5x5 case takes less than a second and the 6x6 takes a few minutes. So 8x8 will likely take a while. So unless I find a better approach or leave my code running for year, it seems like I won’t be able to add to the sequence.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-projects/images/map_folding.png" class="img-fluid figure-img"></p>
<figcaption>the run calculating the last known item in the sequence, for 7x7</figcaption>
</figure>
</div>
<p>The code is available on <a href="https://github.com/johnowhitaker/map_folding">GitHub</a>, and is implemented in C. I started by converting <a href="https://github.com/archmageirvine/joeis/blob/master/src/irvine/oeis/a001/A001415.java">this Java implementation</a> by Sean Irvine (which is a translation of a C version by Fred Lunnon (ALGOL68, C versions)) which implements the pseudo-code from the original 1968 paper (<a href="https://www.ams.org/journals/mcom/1968-22-101/S0025-5718-1968-0221957-8/S0025-5718-1968-0221957-8.pdf">PDF</a>). o1 did almost all the work ;)</p>
<p>At first I thought I might be able to find a GPU-accelerated way to compute this, but no luck on that front. The code I have can divide the work among a few cores but doesn’t parallelize well enough to make scaling up compute worth it.</p>
<p>One side trick I liked that I can’t be bothered to put into a separate TIL: using discord for notifications when it’s done. You make a channel, then Edit Channel (top of channel) -&gt; Integrations -&gt; Webhooks -&gt; New Webhook. This gives you a URL like https://discord.com/api/webhooks/lasiufhaliufhla</p>
<p>Then in your code you can use curl to send a message to that channel like so:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">curl</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-H</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Content-Type: application/json"</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-X</span> POST <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-d</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">content</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$total</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">}"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$WEBHOOK_URL</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span></code></pre></div>
<p>Where <code>$total</code> is the message you want to send and <code>$WEBHOOK_URL</code> is the URL you got from discord. It was nice waking up to a message that the 7x7 case was done!</p>



 ]]></description>
  <category>mini-projects</category>
  <guid>https://johnowhitaker.dev/mini-projects/map_folding.html</guid>
  <pubDate>Thu, 14 Nov 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Deploy Your Artifacts!</title>
  <link>https://johnowhitaker.dev/tils/deploy_your_artifacts.html</link>
  <description><![CDATA[ 




<p>I’m a big fan of the idea of <a href="https://www.todepond.com/sky/sharing-scrappy-fiddles-is-hard/">Sharing Scrappy Fiddles</a>.</p>
<p>I’m always trying to do this more - sharing WIPs on X, writing up TILs on our internal blog for my colleagues, keeping up this blog…</p>
<p>One new category of things I haven’t know how/where to share are bits of ephemeral software I make with LLMs. Specifically Claude’s artifacts tool - it makes it easy to whip up a fun little web app for all sorts of things, but has no easy ‘share’ button to spread that around. It’s strange since I feel less ownership of these tools, but they do often involve a fair amount of back and forth. And I’ve noticed that if I DO deploy them (this post will show you how) I often end up tweaking them more and feeling like they’re really mine, as opposed to playing with the v1 for a sec and disguarding it.</p>
<p>Anthropic has some specific libraries and a build process that I hadn’t seen documented for Artifacts, so for any that weren’t plain HTML+vanilla JS, I had thought it would be very involved to get a locally-running version. Thankfully, SImon Willison’s [fantastic post] led me to this tool: <a href="https://github.com/claudio-silva/claude-artifact-runner">claude-artifact-runner</a> by Claudio Silva. You can copy the artifact code into a file (<code>artifact-component.tsx</code>), run the build command (<code>npx vite build</code> IIRC) and then you have a <code>dist/</code> folder with the built artifact. Once there, you can host this in a variety of ways. I have mine set up with a little FastHTML site (<a href="https://github.com/johnowhitaker/utils">source</a>) since I plan to add other tools in the near future. This is running on a Nanode 1 GB from Linode - $5/month. Fun, and not too bad to set up, not a great option if you don’t want to go down the rabbit hole of setting up a server.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/tils/tools_site.png" class="img-fluid figure-img"></p>
<figcaption>tools site</figcaption>
</figure>
</div>
<p>An easier option is to take the built artifact and pop it into a github repository. <a href="https://github.com/johnowhitaker/minisynth">Here’s an example</a>. As long as there’s an index.html file in the route you can open up the “Pages” section of the repo settings and tell it to build from the main branch. This will give you a github pages site like <a href="https://johnowhitaker.github.io/minisynth/">https://johnowhitaker.github.io/minisynth/</a> that you can share with anyone. It’s free and easy, and you can pop the artifact source code in there too to have a reference for yourself or others.</p>
<p>Of course, neither of these options are seamless, and there’s a lot of room for improvement. I like the look of GitHub Sparks, which are easy-to-create apps with some kind of DB for storage and trivial to share. Replit’s Agents make things you can deploy and share on there too, but aren’t free. And Val.town has their ‘Townie’ bot that also suits some kinds of software.</p>
<p>These little one-shot mini apps aren’t always great, but when you need something constrained and specific I think it’s magical that you can conjure it up with a short conversation. And now, hopefully, you can see how to share it easily too.</p>
<p>PS: Here’s how I add a bunch of static artifacts to their own routes on tools.johnowhitaker.com in FastHTML:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">static_apps_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__file__</span>).parent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"static_apps"</span></span>
<span id="cb1-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(static_apps_dir)</span>
<span id="cb1-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> path <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> static_apps_dir.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*"</span>):</span>
<span id="cb1-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> path.is_dir():</span>
<span id="cb1-5">        app_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> path.name</span>
<span id="cb1-6">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Adding route: /</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>app_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-7">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.get</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>app_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb1-8">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> serve_index(app_name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> app_name):</span>
<span id="cb1-9">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> FileResponse(static_apps_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> app_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index.html'</span>)</span>
<span id="cb1-10">        </span>
<span id="cb1-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> asset <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'assets'</span>).glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*"</span>):</span>
<span id="cb1-12">            asset_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> asset.name</span>
<span id="cb1-13">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Adding asset: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>app_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>asset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-14">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.get</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'/assets/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>app_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>asset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb1-15">            <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> serve_asset(asset_name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> asset_name, app_name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> app_name):</span>
<span id="cb1-16">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> FileResponse(static_apps_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> app_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'assets'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> asset_name)</span>
<span id="cb1-17">            </span>
<span id="cb1-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Modify the index.html to use the asset path with the app name</span></span>
<span id="cb1-19">        index_html <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (static_apps_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> app_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index.html'</span>).read_text()</span>
<span id="cb1-20">        index_html <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> index_html.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'src="/assets/index'</span>, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'src="/assets/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>app_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/index'</span>)</span>
<span id="cb1-21">        index_html <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> index_html.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'href="/assets/index'</span>, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'href="/assets/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>app_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/index'</span>)</span>
<span id="cb1-22">        (static_apps_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> app_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index.html'</span>).write_text(index_html)</span></code></pre></div>
<p>This means I can simply add the latest new artifact to the static_apps folder and it will be served at <code>tools.johnowhitaker.com/artifact_name</code>. Almost painless :) I might feature one or two more soon, there’s one that started as a quick demo and is turning into a very fun tool.</p>



 ]]></description>
  <guid>https://johnowhitaker.dev/tils/deploy_your_artifacts.html</guid>
  <pubDate>Thu, 07 Nov 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Facewave: Controlling Midi Expression with your webcam</title>
  <link>https://johnowhitaker.dev/mini-projects/facewave.html</link>
  <description><![CDATA[ 




<p>One gripe I’ve had with digital instruments is a lack of expression. Coming from a wind instrument background, I don’t like having no control over a note once it starts. So I love the Roli Seaboard (I have the Rise 2) - a squishy playing surface that uses ‘Midi Polyphonic Expression’ (MPE) to let you vary all sorts of parameters by pushing, sliding, and squishing the keys. Unfortunately that’s a $1000+ investment, not so easy to recommend. Recently they announced a new product, that lets you control sound dynamics by waving your hands about above the keyboard, using hand tracking with a pair of IR cameras. Very cool! But as soon as I saw it the question becomes: can we get most of this for free with a webcam?</p>
<p>‘Facewave’ is a proof-of-concept to show the answer is yes! I use mediaPipe to track face and hands in the shot, and send midi control codes (CC) out to be used in your synth of choice. Here’s what it looks like in action:</p>
<p><img src="https://johnowhitaker.dev/mini-projects/images/facewave.png" class="img-fluid"></p>
<p>The code is available on <a href="https://github.com/johnowhitaker/facewave">GitHub</a> and is hosted both on the accompanying github page (https://johnowhitaker.github.io/facewave/) and on my site (https://tools.johnowhitaker.com/facewave). You’ll need a way to feed the midi from that into a synth - I use <a href="https://www.tobias-erichsen.de/software/loopmidi.html">loopmidi</a> to create a virtual midi port that I can connect to my DAW. <a href="https://x.com/johnowhitaker/status/1851667773354840523">Here</a> is a video of an early prototype in action.</p>
<p>This is a ton of fun! I made a simple <a href="https://tools.johnowhitaker.com/msynth">synth</a> tool to test this out if you don’t have a DAW / synth installed - you can play notes with your computer keyboard and modulate the sound with Facewave (as long as you have loopmidi set up).</p>
<p>I love this idea, but don’t know how much further I’ll take it. I’d love someone with more musical contacts to share it around, or steal this idea and add it to your own tools!</p>



 ]]></description>
  <category>mini-projects</category>
  <guid>https://johnowhitaker.dev/mini-projects/facewave.html</guid>
  <pubDate>Fri, 01 Nov 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Mini Synth and Audio Visualization</title>
  <link>https://johnowhitaker.dev/mini-projects/Mini Synth and Audio VIz.html</link>
  <description><![CDATA[ 




<p>I’ve been enjoying creating lots of little projects with Claude artifacts and other tools (post on that soon). Two especially fun ones were both audio related: a mini synth and an audio visualization widget.</p>
<p>The synth came up while I was messing with <a href="https://aitestkitchen.withgoogle.com/tools/music-fx-dj">Google’s MusicFX DJ</a> - a fantastic tool in it’s own right. I wanted a way to jam along, and while I have a few midi controllers I thought I’d instead whip up an in-browser synth using the computer keyboard to minimize time-to-jamming. This is the result:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-projects/images/synth.png" class="img-fluid figure-img"></p>
<figcaption>synth</figcaption>
</figure>
</div>
<p>It’s very simple, but I do like being able to set different scales. Google’s MusicFX DJ let’s you set key too, so you can match them up and have things sound nice together. <a href="https://x.com/johnowhitaker/status/1849263436209016995">Here’s a clip of me testing this out for the first time</a></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-projects/images/synth+musicfx.png" class="img-fluid figure-img"></p>
<figcaption>Noodling with the synth and Google’s MusicFX DJ</figcaption>
</figure>
</div>
<p>Links:</p>
<ul>
<li>Synth hosted with github pages: https://johnowhitaker.github.io/minisynth/ (code: https://github.com/johnowhitaker/minisynth)</li>
<li>And on my tools site: https://tools.johnowhitaker.com/synth</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-projects/images/audio_viz.png" class="img-fluid figure-img"></p>
<figcaption>audio viz</figcaption>
</figure>
</div>
<p>The second project comes from my nostalgia for the old windows media player visualizations. Impressively, Claude turns out to write OK shaders! There are a few to choose from, none mind-blowing but for something visible to watch while I jam with the previous setup this was a fun way to go. Link: https://tools.johnowhitaker.com/audio_viz</p>
<p>Both these tools came together in under an hour, between 4pm and 5pm which is usually the dead zone where I’d done being productive work-wise and waiting for my beloved wife to get home. Each took a bit of back-and-forth to get right, but also didn’t need me to write much if any code. There’s a joy in crafting perfect software, but there’s also a joy in spontaneously bringing little things like this to life with just a bit of chatting with AI. What a time to be alive!</p>



 ]]></description>
  <category>mini-projects</category>
  <guid>https://johnowhitaker.dev/mini-projects/Mini Synth and Audio VIz.html</guid>
  <pubDate>Wed, 30 Oct 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Tab Clearning (October 7 2024)</title>
  <link>https://johnowhitaker.dev/misc/tab_clear_oct_7.html</link>
  <description><![CDATA[ 




<section id="tab-clearing-october-7-2024" class="level1">
<h1>Tab Clearing October 7 2024</h1>
<p><a href="https://www.reka.ai/news/reka-flash-updates">New Reka Flash model</a> - I’m excited to see them ticking along, doing what looks like good work making evals then improving on them (e.g.&nbsp;longer context, instruction chaining). Also, seems like they’ll soon have audio in -&gt; audio out functionality, it’s already in beta.</p>
<p><a href="https://x.com/nsaphra/status/1834260761792639363?t=_Bain24QnR9Y5GC1fq4iXA&amp;s=08">Fast Forwarding Low Rank Training</a> - A funny technique: you do and SGD step then re-apply that same update again and again until the model stops improving on some tiny val set. Suprisingly they say this reduces total flops… I sort of feel if you’re doing DoRA/LoRA on a small dataset you don’t really care about flops and I’d rather show 10x the samples but who knows maybe useful.</p>
<p><a href="https://kyutai.org/Moshi.pdf">The Moshi paper (PDF)</a> - They wrap an audio model around a pre-trained text backbone, and have it produce text along with audio (‘inner monolog’). Haven’t read properly yet.</p>
<p><a href="https://llamacoder.together.ai/">https://llamacoder.together.ai/</a> - together + meta make a claude artifacts alternative. My first test it was impressively close to correct (got some functionality, and to be fair claude also didn’t get this one-shot). I like that it’s a single click to publish app (<a href="https://llamacoder.together.ai/share/RXjC4">here’s mine</a>) and to open in code sandbox. Very neat implementation! <a href="https://ai.meta.com/blog/together-ai-llamacoder/?utm_source=twitter&amp;utm_medium=organic_social&amp;utm_content=video&amp;utm_campaign=builtwithllama">Meta’s blog on the subject</a>.</p>
<p><a href="https://github.com/apirrone/Open_Duck_Mini?tab=readme-ov-file">Open Duck Mini</a>. This robot won’t get out of my head. OG DIsney paper with their design: <a href="https://la.disneyresearch.com/publication/design-and-control-of-a-bipedal-robotic-character/">here</a>. My fan art from when I saw one in person at Neurips included at the end of this post.</p>
<p><a href="https://bauble.studio/">Bauble studio</a> - FUn little SDF coding tool.</p>
<p><a href="https://www.liquid.ai/liquid-foundation-models">Liquid AI</a> have… something? Not too sure what their ‘Language LFMs’ are of how suspicious I should be, awaiting more detail before I waste time trying to read the tea leaves.</p>
<p>https://www.interconnects.ai/p/riley-goodside-on-science-of-prompting a podcast I haven’t listened to yet.</p>
<p>https://walzr.com/bop-spotter Love this project! “I installed a box high up on a pole somewhere in the Mission of San Francisco. Inside is a crappy Android phone, set to Shazam constantly, 24 hours a day, 7 days a week. It’s solar powered, and the mic is pointed down at the street below.”</p>
<p>https://simonwillison.net/2024/Oct/1/openai-devday-2024-live-blog/ Simon making the most useful live feed I’ve seen for an event like this. His follow-on post https://simonwillison.net/2024/Oct/2/not-digital-god/ is also great.</p>
<p>https://soumith.ch/blog/2024-10-02-training-10k-scale.md.html Soumith jots down some good notes on training at scale.</p>
<p>https://ai.meta.com/research/movie-gen/ Meta’s amazing new video model. Impressive results, especially (imo) useful is the editing capability which they get by jointly training to generate video and to edit images, getting video edits ‘for free’. I need to look into the <a href="https://ai.meta.com/static-resource/movie-gen-research-paper">very detailed paper (PDF)</a>.</p>
<p>https://blogs.microsoft.com/blog/2024/10/01/an-ai-companion-for-everyone/ Microsoft are rolling out a new iteration of copilot for everything, a way for lots of people to try something like advanced voice mode I guess. It’s frustrating though - the version I have on my windows desktop can’t browse, call functions, see the screen or really do anything besides yap. I’m realizing voice + functions is amazing, voice alone is useless for many applications (but still nice for some).</p>
<p>https://lunar-joke-35b.notion.site/SigLIP-Paper-hola-sigmoid-7ed58a7108a04ddb99571cded0922386 is a nice promer on SigLIP and why it’s a better training approach than the softmax-based CLIP version.</p>
<p>https://jake.fun/ Love finding great blogs/personal sites like this, where people joyfully play. Definitely adding this to my list of faves.</p>
<p>https://codepen.io/fand/pen/Vwojwqm - I’ve been playing with coding up some different webcam effects (inspired by posy’s mostion extraction video to start with) and this datamosh effect is trippy and great!</p>
<p><a href="https://arxiv.org/abs/2410.02651">CAX: Cellular Automata Accelerated in JAX</a> Cool CA paper with a bunch of fun experiments, I should try this library next time I get the NCA itch.</p>
<p><a href="https://arxiv.org/abs/2410.01679">VinePPO: Unlocking RL Potential For LLM Reasoning Through Refined Credit Assignment</a> Monte Carlo-based estimates instead of large value networks. I like this idea, need to read the paper carefully at some point this week.</p>
<p><a href="https://arxiv.org/abs/2410.01257">HelpSteer2-Preference: Complementing Ratings with Preferences</a> Alignment: should you use ratings or preferences? This paper: Why not both :) On the reading list it goes.</p>
<p><a href="https://arxiv.org/abs/2409.20370">The Perfect Blend: Redefining RLHF with Mixture of Judges</a> Meta show off fancy post-training, looks promising, on the reading list too.</p>
<p>I just want to make an app based on <a href="https://x.com/poetengineer__/status/1841164333952483581?t=gF22BOXEuVaUIKmRGUPeBA&amp;s=08">this tweet</a> for fun. (Cool 2-D visualization of rubiks cube)</p>
<p><a href="https://x.com/marksaroufim/status/1841277387834830876?t=t5_ghEZ2Qo5kZoAaWfp0ng&amp;s=08">CUDA mode talks are out</a></p>
<p><a href="https://x.com/pcastr/status/1841178222828142977?t=wc0BdNUTQl7Nbukk0tqy2Q&amp;s=08">Cool-looking RL conf talk</a> I need to watch, <span class="citation" data-cites="pcastr">@pcastr</span> gives me the feeling smart people are working on RL and it is getting more sensible by the year.</p>
<p><a href="https://arxiv.org/abs/2409.18486">Evaluation of OpenAI o1: Opportunities and Challenges of AGI</a> Bunch of evals on o1 (preview). To read, maybe.</p>
<p><a href="https://x.com/hannah_kerner/status/1840805250552201439?t=L5Rj2PRAlGsH79AgylybzA&amp;s=08">Fields Of The World</a> a giant dataset of labelled fields, open source, man I worked on something like this task back in the day this is so good to see!</p>
<p><a href="https://github.com/genforce/ctrl-x">Ctrl-X: Controlling Structure and Appearance for Text-To-Image Generation Without Guidance</a> - A “simple training-free and guidance-free framework for text-to-image (T2I) generation with structure and appearance control” Very cool! Training free controlnet. I should make a demo for this if there isn’t one already.</p>
<p><a href="https://arxiv.org/abs/2409.13373">LLMs Still Can’t Plan; Can LRMs? A Preliminary Evaluation of OpenAI’s o1 on PlanBench</a> some sort of eval for planning, might be interesting, not reading for now.</p>
<p>https://www.danielcorin.com/posts/2024/claude-3.5-sonnet-connections-evals/ Someone else playing with connections, good stuff.</p>
<p>https://www.anthropic.com/news/contextual-retrieval - Common sense, great results, love to see it! Anthropic doing good work.</p>
<p>I should look at <a href="https://x.com/jfischoff/status/1842032020698038286?t=eom1vT-ZWTNqyu_XBjGaUA&amp;s=08">this paper</a> that claims to get rid of the over-saturation from CFG. And <a href="https://x.com/jfischoff/status/1836802397227655341?t=lB1_fM6Ziv0dGcJCYkv5Mg&amp;s=08">this one</a> (<a href="https://arxiv.org/abs/2409.11355">Fine-Tuning Image-Conditional Diffusion Models is Easier than You Think</a> on arxiv) that shows a better way to turn e.g.&nbsp;stable diffusion into a depth or normal (or …) prediction model. <span class="citation" data-cites="jfischoff">@jfischoff</span> is good at finding these gems. Alas I don’t keep up with diffusion as much these days. But e.g.&nbsp;this may be relevant for audio diffusion models for audio quality fixing e.g.</p>
<p><a href="https://arxiv.org/abs/2410.01792">When a language model is optimized for reasoning, does it still show embers of autoregression? An analysis of OpenAI o1</a> A follow-up to “Embers of Autoregression” with o1, looks worth digging into both at some point. From a skim o1 does seem like it’s starting to overcome some AR-based issues but a ways to go yet.</p>
<p>Videos I still might watch: <a href="https://player.vimeo.com/video/997528474?h=f3d5c44766">def con talk on ai from head of security at openai</a>, <a href="https://www.youtube.com/watch?v=-cq3O4t0qQc">fireside chat with sam</a>, <a href="https://www.latent.space/p/devday-2024">dev day latent space podcast</a></p>
<p>3D printing related videos I want to replicate: <a href="https://www.youtube.com/watch?v=SP5CHSLomKo">fractal vise</a>, <a href="https://www.youtube.com/watch?v=Kpb_krtCMN4">filament bearings</a> (very neat idea).</p>
<p>And now as promised, robot fan art.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/misc/tab_clear_oct_7_files/figure-html/5bbbaf35-1-image.png" class="img-fluid figure-img"></p>
<figcaption>image.png</figcaption>
</figure>
</div>


</section>

 ]]></description>
  <category>misc</category>
  <guid>https://johnowhitaker.dev/misc/tab_clear_oct_7.html</guid>
  <pubDate>Mon, 07 Oct 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Tab Clearning (September 23 2024)</title>
  <link>https://johnowhitaker.dev/misc/tab_clearing_sept_23.html</link>
  <description><![CDATA[ 




<section id="tab-clearing-sept-23" class="level1">
<h1>Tab Clearing Sept 23</h1>
<p>https://openai.com/global-affairs/openai-academy/: “Investing in the development of local AI talent can fuel economic growth and innovation across sectors like healthcare, agriculture, education, and finance.”. Thought: Educating people how to leverage AI is a high-impact thing to do today</p>
<p>https://ia.samaltman.com/ “The Intelligence Age” tl;dr sam thinks the future is going to be cool</p>
<p>https://team.doubao.com/en/special/seed-music - people working on audio models, I like to see it! This Chinese team have a decent-looking one with various ways to control it.</p>
<p>https://github.blog/news-insights/product-news/openai-o1-in-github-copilot/ - o1 is, predictably, cool for slightly more complex tasks.</p>
<p>https://blog.adobe.com/en/publish/2024/09/11/bringing-gen-ai-to-video-adobe-firefly-video-model-coming-soon - Firefly video is looking cool, great for B-roll I guess, or realistically pre-viz.&nbsp;Generative extend seems like the most useful bit. They make a big deal of commercially safe, not trained on user data vibes</p>
<p>https://www.hume.ai/blog/introducing-evi2 Guys bossing around vitual assistants for demos, making them sing etc feels icky. But voice is interesting to me, I wish OpenAI’s voice mode was available. I might try hume evi2, will see how it does.</p>
<p>https://rachel.fast.ai/posts/2024-09-10-gaps-risks-science/ Always appreciate Rachel’s posts</p>
<p>https://blog.mariusvach.com/posts/passwordless-auth-fasthtml So glad people are writing up things like this, the FastHTML ecosystem is growing</p>
<p>https://kingbird.myphotos.cc/packing/squares_in_squares.html - I want to know how big to make the box for printing the 17-square packing problem.s=4.67553…</p>
<p>https://gist.github.com/simonw/d8cc934ad76b3bba82127937d45dc719 - The System prompt for val.town/townie - a good reference for any similar systems.</p>
<p>https://github.com/btsmart/splatt3r - directly predicts 3D gaussians from a couple of uncalibrated images, very cool</p>
<p>https://github.com/hudgeon/fasthtml_supabase_auth_example - glad it exists, haven’t looked yet</p>
<p>https://transformer-circuits.pub/2024/august-update/index.html - glad someone is tinkering with this stuff</p>
<p>https://blog.eleuther.ai/mutransfer/ - This post is pretty good. It goes into the details of mutransfer as the title suggests. They have a really nice nano GPT implementation that shows the changes in action. I think this is something that should hopefully be picked up by everyone going forward.</p>
<p>https://osf.io/preprints/osf/mtgn7 - “Why Is Anything Conscious?” - Fun to skim, I liked the ’From Rocks To Einstein” section but skipped a lot of the formalisms and silliness. <img src="https://johnowhitaker.dev/misc/tab_clearing_sept_23_files/figure-html/74f3db3f-1-image.png" class="img-fluid" alt="image.png"></p>


</section>

 ]]></description>
  <category>misc</category>
  <guid>https://johnowhitaker.dev/misc/tab_clearing_sept_23.html</guid>
  <pubDate>Mon, 23 Sep 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Doodling In Hardware</title>
  <link>https://johnowhitaker.dev/mini-hw-projects/doodle.html</link>
  <description><![CDATA[ 




<section id="doodling-in-hardware" class="level1">
<h1>Doodling in Hardware</h1>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-hw-projects/doodle_files/figure-html/13f8ea38-1-PXL_20240914_234105456.jpg" class="img-fluid figure-img"></p>
<figcaption>My Saturday Morning Project</figcaption>
</figure>
</div>
<p>I wanted to do <em>something</em> physical. Maybe a motion system that’s not just another cartesian X/Y thing? Something I can test out Kalman filters and control systems on? Something that could move a magnet to pull a ball bearing around on some sand in that oh-so-satisfying way?</p>
<p>They way this came together is a nice example of one of my favourite ways to make something - which I’ve started calling ‘doodling in hardware’. Once I had a vague idea of what I wanted to make, I drew out some quick sketches, took a few measurements, and set the base printing. Here’s the sketch:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-hw-projects/doodle_files/figure-html/84369a43-1-PXL_20240915_005127802.jpg" class="img-fluid figure-img"></p>
<figcaption>sketch next to ‘finished’ prototype</figcaption>
</figure>
</div>
<p>While the base printed I could take apart my robot arm to scavenge the servos and start messing with figuring out how to move to a certain X/Y position given different dimensions of the robot (code explorations at the end of this post). I also designed the holders to fit the servos.</p>
<p>While the ‘servo horns’ were printing, I could assemble the circuit on the base, get the motors moving, and design the swivel mechanisms.</p>
<p>While the swivel bits were printing I could walk to the hardware store for 1/4 inch dowels (or maybe I did that earlier?).</p>
<p>You see the trend? These prints take 20-30 minutes (or an hour or so for the base IIRC). Just enough time to tinker with existing things or work on a revision. The upshot is a morning spent in flow, a precious gift. This is the dream! It’s not like I have a super-fancy workshop yet but even the baseline here is enough that I’m not hitting blockers that throw the project as much as I used to. My junk bins are growing more bountiful, my tools more capable.</p>
<p>This particularly project is pretty silly. I spotted some obvious flaws once it was assembled and moving about that will need correcting in a possible V2. But I’m so happy I am in a place I can occasionally tinker with something silly like this and have the process be so smooth and enjoyable :)</p>
<p>OK, now the code as promised. I code all day for my job, so for weekend projects like this the goal is to avoid it as much as possible and have AI do the boring bits.</p>
<section id="simulating-a-scara-arm" class="level2">
<h2 class="anchored" data-anchor-id="simulating-a-scara-arm">Simulating A Scara Arm</h2>
<p><strong>Aside: This is the end result of some prompting across a few different AI’s. Starting with ChatGPT ‘what’s this kind of motion system called again?’.</strong></p>
<div id="b0b06e73" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Constants</span></span>
<span id="cb1-5">d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">170</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Distance between the two servo bases in mm</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> inverse_kinematics_arm(x, y, l1, l2, offset, prefer_elbow_up<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>):</span>
<span id="cb1-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shift the target point according to the base offset</span></span>
<span id="cb1-9">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> offset</span>
<span id="cb1-10"></span>
<span id="cb1-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate distance from the base to the target point</span></span>
<span id="cb1-12">    D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.sqrt(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-13"></span>
<span id="cb1-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> (l1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> l2):</span>
<span id="cb1-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The target point is out of reach for this arm!"</span>)</span>
<span id="cb1-16"></span>
<span id="cb1-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Angle for the second section of the arm (elbow joint)</span></span>
<span id="cb1-18">    cos_theta2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> l1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> l2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> l1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> l2)</span>
<span id="cb1-19">    theta2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arccos(cos_theta2)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This is the "elbow up" solution</span></span>
<span id="cb1-20"></span>
<span id="cb1-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prefer elbow up by default, flip for elbow down if needed</span></span>
<span id="cb1-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> prefer_elbow_up:</span>
<span id="cb1-23">        theta2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>theta2</span>
<span id="cb1-24"></span>
<span id="cb1-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Angle for the first section of the arm (shoulder joint)</span></span>
<span id="cb1-26">    k1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> l1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> l2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.cos(theta2)</span>
<span id="cb1-27">    k2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> l2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.sin(theta2)</span>
<span id="cb1-28"></span>
<span id="cb1-29">    theta1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arctan2(y, x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> np.arctan2(k2, k1)</span>
<span id="cb1-30"></span>
<span id="cb1-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.degrees(theta1), np.degrees(theta2)</span>
<span id="cb1-32"></span>
<span id="cb1-33"></span>
<span id="cb1-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forward Kinematics for each arm</span></span>
<span id="cb1-35"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward_kinematics_arm(theta1, theta2, l1, l2, offset):</span>
<span id="cb1-36">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert angles to radians</span></span>
<span id="cb1-37">    theta1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.radians(theta1)</span>
<span id="cb1-38">    theta2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.radians(theta2)</span>
<span id="cb1-39"></span>
<span id="cb1-40">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Position of the first section's end (relative to the base)</span></span>
<span id="cb1-41">    x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> l1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.cos(theta1)</span>
<span id="cb1-42">    y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> l1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.sin(theta1)</span>
<span id="cb1-43"></span>
<span id="cb1-44">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Position of the second section's end (end-effector position)</span></span>
<span id="cb1-45">    x2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> l2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.cos(theta1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> theta2)</span>
<span id="cb1-46">    y2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> l2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.sin(theta1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> theta2)</span>
<span id="cb1-47"></span>
<span id="cb1-48">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> [offset, x1, x2], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, y1, y2]</span>
<span id="cb1-49"></span>
<span id="cb1-50"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualization of the whole system</span></span>
<span id="cb1-51"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> visualize_system(x, y, l1, l2, prefer_elbow_up<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>):</span>
<span id="cb1-52">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate angles for both arms with elbow preference</span></span>
<span id="cb1-53">    theta1_left, theta2_left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inverse_kinematics_arm(x, y, l1, l2, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> prefer_elbow_up)</span>
<span id="cb1-54">    theta1_right, theta2_right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inverse_kinematics_arm(x, y, l1, l2, d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, prefer_elbow_up)</span>
<span id="cb1-55"></span>
<span id="cb1-56">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the points for both arms using forward kinematics</span></span>
<span id="cb1-57">    x_points_left, y_points_left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> forward_kinematics_arm(theta1_left, theta2_left, l1, l2, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-58">    x_points_right, y_points_right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> forward_kinematics_arm(theta1_right, theta2_right, l1, l2, d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-59"></span>
<span id="cb1-60">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot both arms</span></span>
<span id="cb1-61">    plt.plot(x_points_left, y_points_left, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ro-'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Left Arm'</span>)</span>
<span id="cb1-62">    plt.plot(x_points_right, y_points_right, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bo-'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Right Arm'</span>)</span>
<span id="cb1-63">    plt.plot([x], [y], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'go'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Target Point'</span>)</span>
<span id="cb1-64">    plt.xlim(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>l1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>l2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, l1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>l2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb1-65">    plt.ylim(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>l1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>l2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, l1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>l2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb1-66">    plt.axhline(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>, lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb1-67">    plt.axvline(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>, lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb1-68">    plt.gca().set_aspect(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'equal'</span>, adjustable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'box'</span>)</span>
<span id="cb1-69">    plt.legend()</span>
<span id="cb1-70">    plt.title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'System Configuration (l1=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>l1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, l2=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>l2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span>)</span>
<span id="cb1-71">    plt.show()</span>
<span id="cb1-72"></span>
<span id="cb1-73"></span>
<span id="cb1-74"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Working Envelope for two arms</span></span>
<span id="cb1-75"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> plot_working_envelope(l1, l2):</span>
<span id="cb1-76">    theta_range <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>np.pi, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb1-77"></span>
<span id="cb1-78">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Envelope for the left arm</span></span>
<span id="cb1-79">    x_reach_left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> l1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.cos(theta_range) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-80">    y_reach_left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> l1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.sin(theta_range)</span>
<span id="cb1-81"></span>
<span id="cb1-82">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Envelope for the right arm</span></span>
<span id="cb1-83">    x_reach_right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> l1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.cos(theta_range) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-84">    y_reach_right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> l1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.sin(theta_range)</span>
<span id="cb1-85"></span>
<span id="cb1-86">    plt.fill(np.concatenate([x_reach_left, x_reach_right]),</span>
<span id="cb1-87">             np.concatenate([y_reach_left, y_reach_right]), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'green'</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Reachable Area'</span>)</span>
<span id="cb1-88"></span>
<span id="cb1-89">    plt.axhline(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>, lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb1-90">    plt.axvline(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>, lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb1-91">    plt.gca().set_aspect(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'equal'</span>, adjustable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'box'</span>)</span>
<span id="cb1-92">    plt.title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Working Envelope (l1=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>l1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, l2=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>l2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span>)</span>
<span id="cb1-93">    plt.legend()</span>
<span id="cb1-94">    plt.show()</span>
<span id="cb1-95"></span>
<span id="cb1-96"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example usage</span></span>
<span id="cb1-97">l1, l2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Length of the arm sections</span></span>
<span id="cb1-98">x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Target position</span></span>
<span id="cb1-99"></span>
<span id="cb1-100"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualize the system</span></span>
<span id="cb1-101">visualize_system(x, y, l1, l2)</span>
<span id="cb1-102"></span>
<span id="cb1-103"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the working envelope</span></span>
<span id="cb1-104">plot_working_envelope(l1, l2)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-hw-projects/doodle_files/figure-html/cell-2-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-hw-projects/doodle_files/figure-html/cell-2-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="586a3323" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># prompt: Make a widget with sliders for l1, l2, x and y that shows the system as these values change</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ipywidgets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> widgets</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.display <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> display</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_system(l1, l2, x, y):</span>
<span id="cb2-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb2-8">        visualize_system(x, y, l1, l2)</span>
<span id="cb2-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb2-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(e)</span>
<span id="cb2-11"></span>
<span id="cb2-12">l1_slider <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> widgets.IntSlider(value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l1:'</span>)</span>
<span id="cb2-13">l2_slider <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> widgets.IntSlider(value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l2:'</span>)</span>
<span id="cb2-14">x_slider <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> widgets.IntSlider(value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x:'</span>)</span>
<span id="cb2-15">y_slider <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> widgets.IntSlider(value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y:'</span>)</span>
<span id="cb2-16"></span>
<span id="cb2-17">widgets.interactive(update_system, l1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>l1_slider, l2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>l2_slider, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x_slider, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y_slider)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"bb3b21692c864a0ea9325555e5e783fb","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<p>PS: Not sure I trust the working area visualization, but that’s partly because there are often two unique positions the end could be in for many sets of base angles!</p>


</section>
</section>

 ]]></description>
  <category>mini-hw-projects</category>
  <guid>https://johnowhitaker.dev/mini-hw-projects/doodle.html</guid>
  <pubDate>Sat, 14 Sep 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>TIL: Kalman Filters</title>
  <link>https://johnowhitaker.dev/misc/kalman_filters.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This is a notebook I used to explore the topic of Kalman Filters, while attending a talk on the same. You can see I leveraged AI heavily - the presentation here is roughly what I had but adapted to this format from an internal tool.</p>
<p>Having everything in context and asking questions as they occured to me during the lecture felt incredibly powerful. And having the AI automate time-consuming yet easy things like “make an animation showing what happens as we vary [parameter]” and making interactive widgets to explore things made seeing what was going on so easy - way nicer than trying to conceptualize things mentally, and far more useful than the static plots with magic values that the presenter was showing.</p>
<p>I have mixed feelings sharing this - the final result is a bit of a mess, but the process of creating it while learning a new topic was amazing. Hopefully this is at least an interesting artifact :) Enjoy!</p>
</section>
<section id="kalman-filters" class="level1">
<h1>Kalman Filters</h1>
<div id="f7bcfba9" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># %pip install files-to-prompt</span></span></code></pre></div>
</div>
<div id="0a40c5fb" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !git clone https://github.com/01binary/kalman</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !files-to-prompt kalman &gt; kalman_repo.txt</span></span></code></pre></div>
</div>
<div id="eb80c37a" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>ls</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> kalman                     kalman_repo.txt
'Kalman Filter Initial Exploration.ipynb'   python-control</code></pre>
</div>
</div>
<div id="dd249063" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>ai reset</span></code></pre></div>
</div>
<div id="b231d18d" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">kalman_repo_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kalman_repo.txt'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>).read()</span></code></pre></div>
</div>
<p><strong>prompt I want to learn about Kalman filters. The repo of examples for a talk I’m going to has matlab and such, and I’d like to translate it to Python and make this notebook a tutorial that works through the material.</strong></p>
<p><strong>Can you check that you can see the material in $<code>kalman_repo_text</code> and give me a rough overview of how we might proceed?</strong></p>
<p>I can see the contents of <code>kalman_repo_text</code>. It contains several MATLAB and C++ files implementing various filtering techniques, including Kalman filters. Here’s a suggested approach to create a Python-based tutorial:</p>
<ol type="1">
<li><p>Start with simpler filters:</p>
<ul>
<li>Implement moving average filter</li>
<li>Implement low-pass filter</li>
<li>Implement simple linear regression</li>
</ul></li>
<li><p>Introduce the Kalman filter:</p>
<ul>
<li>Explain the concept and theory briefly</li>
<li>Implement a basic Kalman filter</li>
</ul></li>
<li><p>Implement the system model:</p>
<ul>
<li>Translate the MATLAB <code>systemModel</code> function to Python</li>
</ul></li>
<li><p>Implement the Kalman filter:</p>
<ul>
<li>Translate the MATLAB <code>kalmanFilter</code> function to Python</li>
</ul></li>
<li><p>Create a main loop:</p>
<ul>
<li>Read input data (from CSV or generate synthetic data)</li>
<li>Apply the Kalman filter</li>
<li>Visualize results</li>
</ul></li>
<li><p>Compare Kalman filter with simpler techniques</p></li>
<li><p>Extend to more complex examples if time permits</p></li>
</ol>
<section id="starting-with-simple-filters" class="level2">
<h2 class="anchored" data-anchor-id="starting-with-simple-filters">Starting with Simple Filters</h2>
<p><strong>Please start on this section. Use fenced code blocks, I’ll then split them out into their own cells.</strong></p>
<p>Let’s start with implementing the simple filters in Python:</p>
<ol type="1">
<li>Moving Average Filter:</li>
</ol>
<div id="0b26018b" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> moving_average_filter(input_data, window_size):</span>
<span id="cb7-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.convolve(input_data, np.ones(window_size)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>window_size, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'same'</span>)</span></code></pre></div>
</div>
<div id="9d5bd873" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>ls kalman</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>averageLowpass.mlx    kalman.cpp         movingAverage.m
CMakeLists.txt        kalman.m       README.md
constantAcceleration.mlx  linearRegression.m     simpleLinearRegression.m
gaussian.m        linearRegression.mlx   simpleLinearRegression.mlx
gaussian.mlx          linearSystemModel.mlx
input.csv         lowPass.m</code></pre>
</div>
</div>
<div id="99dc1d4d" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb10-2">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"kalman/input.csv"</span>)</span>
<span id="cb10-3">data.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">time</th>
<th data-quarto-table-cell-role="th">reading</th>
<th data-quarto-table-cell-role="th">PWM</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>0.019995</td>
<td>243</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>0.040017</td>
<td>243</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>0.060022</td>
<td>251</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>0.079997</td>
<td>244</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>0.100011</td>
<td>228</td>
<td>-111</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="2e8f19be" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">data.columns</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>Index(['time', ' reading', 'PWM'], dtype='object')</code></pre>
</div>
</div>
<div id="57e51b6b" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply moving average filter</span></span>
<span id="cb13-4">window_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb13-5">filtered_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> moving_average_filter(data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' reading'</span>], window_size)</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot</span></span>
<span id="cb13-8">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb13-9">plt.plot(data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time'</span>], data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' reading'</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Original'</span>)</span>
<span id="cb13-10">plt.plot(data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time'</span>], filtered_data, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Moving Average (window=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>window_size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span>)</span>
<span id="cb13-11">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time'</span>)</span>
<span id="cb13-12">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Reading'</span>)</span>
<span id="cb13-13">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Moving Average Filter'</span>)</span>
<span id="cb13-14">plt.legend()</span>
<span id="cb13-15">plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb13-16">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://johnowhitaker.dev/misc/kalman_filters_files/figure-html/cell-11-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><strong>make an animation of different sliding window sizes</strong> (removed for size reasons)</p>
<ol start="2" type="1">
<li>Low-Pass Filter:</li>
</ol>
<div id="e83a16f8" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> low_pass_filter(input_data, alpha):</span>
<span id="cb14-2">    output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros_like(input_data)</span>
<span id="cb14-3">    output[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> input_data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb14-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(input_data)):</span>
<span id="cb14-5">        output[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> input_data[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> alpha) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> output[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb14-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> output</span></code></pre></div>
</div>
<p><strong>Make a similar animation for low pass filter for different alpha</strong></p>
<div id="7ce08a4f" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' reading'</span>].plot()</span>
<span id="cb15-2">data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PWM'</span>].plot()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://johnowhitaker.dev/misc/kalman_filters_files/figure-html/cell-13-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<ol start="3" type="1">
<li>Simple Linear Regression:</li>
</ol>
<div id="af65613e" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> linear_regression(x, y):</span>
<span id="cb16-2">    x_mean, y_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(x), np.mean(y)</span>
<span id="cb16-3">    slope <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>((x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x_mean) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y_mean)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>((x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x_mean)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb16-4">    intercept <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> slope <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x_mean</span>
<span id="cb16-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x_new: slope <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x_new <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> intercept</span></code></pre></div>
</div>
<p>Now, let’s create some sample data and visualize the results:</p>
<div id="0b53f012" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb17-2"></span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate sample data</span></span>
<span id="cb17-4">t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data))</span>
<span id="cb17-5">true_signal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' reading'</span>]</span>
<span id="cb17-6">noisy_signal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> true_signal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.random.normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, t.shape)</span>
<span id="cb17-7"></span>
<span id="cb17-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply filters</span></span>
<span id="cb17-9">ma_filtered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> moving_average_filter(noisy_signal, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb17-10">lp_filtered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> low_pass_filter(noisy_signal, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>)</span>
<span id="cb17-11">lr_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> linear_regression(t, noisy_signal)</span>
<span id="cb17-12">lr_filtered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lr_model(t)</span>
<span id="cb17-13"></span>
<span id="cb17-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot results</span></span>
<span id="cb17-15">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb17-16">plt.plot(t, true_signal, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'True Signal'</span>)</span>
<span id="cb17-17">plt.plot(t, noisy_signal, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Noisy Signal'</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb17-18">plt.plot(t, ma_filtered, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Moving Average'</span>)</span>
<span id="cb17-19">plt.plot(t, lp_filtered, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Low-Pass Filter'</span>)</span>
<span id="cb17-20">plt.plot(t, lr_filtered, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Linear Regression'</span>)</span>
<span id="cb17-21">plt.legend()</span>
<span id="cb17-22">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Comparison of Simple Filters'</span>)</span>
<span id="cb17-23">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time'</span>)</span>
<span id="cb17-24">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Amplitude'</span>)</span>
<span id="cb17-25">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://johnowhitaker.dev/misc/kalman_filters_files/figure-html/cell-15-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>This code implements the three simple filters, generates some sample data, applies the filters, and visualizes the results for comparison.</p>
<p><strong>Great. Next section, and let’s start adding more prose explaining what’s going on.</strong></p>
</section>
<section id="introducing-the-kalman-filter" class="level2">
<h2 class="anchored" data-anchor-id="introducing-the-kalman-filter">Introducing the Kalman Filter</h2>
<p>The Kalman filter is an algorithm that uses a series of measurements observed over time, containing statistical noise and other inaccuracies, and produces estimates of unknown variables that tend to be more accurate than those based on a single measurement alone.</p>
<p>Key concepts of the Kalman filter:</p>
<ol type="1">
<li>State estimation: The filter estimates the state of a system.</li>
<li>Prediction and update: It works in a two-step process: predict and update.</li>
<li>Uncertainty handling: It considers the uncertainty of both the prediction and the measurement.</li>
</ol>
<p>Let’s implement a basic Kalman filter for a 1D system:</p>
<div id="b7b07c71" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> KalmanFilter:</span>
<span id="cb18-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, process_variance, measurement_variance, initial_estimate, initial_estimate_error):</span>
<span id="cb18-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.process_variance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> process_variance</span>
<span id="cb18-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.measurement_variance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> measurement_variance</span>
<span id="cb18-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.estimate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> initial_estimate</span>
<span id="cb18-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.estimate_error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> initial_estimate_error</span>
<span id="cb18-7"></span>
<span id="cb18-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, measurement):</span>
<span id="cb18-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prediction</span></span>
<span id="cb18-10">        prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.estimate</span>
<span id="cb18-11">        prediction_error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.estimate_error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.process_variance</span>
<span id="cb18-12"></span>
<span id="cb18-13">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update</span></span>
<span id="cb18-14">        kalman_gain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prediction_error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (prediction_error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.measurement_variance)</span>
<span id="cb18-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.estimate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> kalman_gain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (measurement <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> prediction)</span>
<span id="cb18-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.estimate_error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> kalman_gain) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> prediction_error</span>
<span id="cb18-17"></span>
<span id="cb18-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.estimate</span>
<span id="cb18-19"></span>
<span id="cb18-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example usage</span></span>
<span id="cb18-21">kf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> KalmanFilter(process_variance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># try 1e-4, 1e-3</span></span>
<span id="cb18-22">                  measurement_variance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, </span>
<span id="cb18-23">                  initial_estimate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, </span>
<span id="cb18-24">                  initial_estimate_error<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb18-25"></span>
<span id="cb18-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply Kalman filter to our noisy signal</span></span>
<span id="cb18-27">kalman_filtered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([kf.update(measurement) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> measurement <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> noisy_signal])</span>
<span id="cb18-28"></span>
<span id="cb18-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add to our plot</span></span>
<span id="cb18-30">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb18-31">plt.plot(t, true_signal, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'True Signal'</span>)</span>
<span id="cb18-32">plt.plot(t, noisy_signal, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Noisy Signal'</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb18-33">plt.plot(t, kalman_filtered, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Kalman Filter'</span>)</span>
<span id="cb18-34">plt.legend()</span>
<span id="cb18-35">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Kalman Filter Performance'</span>)</span>
<span id="cb18-36">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time'</span>)</span>
<span id="cb18-37">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Amplitude'</span>)</span>
<span id="cb18-38">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://johnowhitaker.dev/misc/kalman_filters_files/figure-html/cell-16-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>This implementation demonstrates the basic principles of the Kalman filter:</p>
<ol type="1">
<li>We initialize the filter with our best guess of the initial state and its uncertainty.</li>
<li>In each step, we first predict the next state (which is simply the current estimate in this simple case).</li>
<li>We then update our estimate based on the new measurement, weighing it against our prediction.</li>
<li>The Kalman gain determines how much we trust the measurement vs.&nbsp;our prediction.</li>
</ol>
<p>The Kalman filter often provides smoother and more accurate estimates compared to simpler filtering techniques, especially when dealing with noisy measurements and systems with known dynamics.</p>
<p><strong>Hmm, the plot shows the kalman filter line lagging behind the signal quite visibly, what could be going wrong and how might we fix it?</strong></p>
<p>The lag is likely due to the Kalman filter’s initial parameters not being well-tuned for this specific signal. To improve it:</p>
<ol type="1">
<li>Adjust process variance: Increase it to make the filter more responsive to changes.</li>
<li>Modify measurement variance: Decrease it if we trust our measurements more.</li>
<li>Improve initial estimate: Start closer to the true initial state.</li>
<li>Add velocity to the state: This helps predict trends better.</li>
</ol>
<p>Let’s implement these changes:</p>
<div id="12b13f8c" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> KalmanFilterWithVelocity:</span>
<span id="cb19-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, process_variance, measurement_variance, initial_estimate, initial_velocity):</span>
<span id="cb19-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.process_variance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> process_variance</span>
<span id="cb19-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.measurement_variance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> measurement_variance</span>
<span id="cb19-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.estimate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> initial_estimate</span>
<span id="cb19-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.velocity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> initial_velocity</span>
<span id="cb19-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.estimate_error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb19-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.velocity_error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb19-9"></span>
<span id="cb19-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, measurement, dt):</span>
<span id="cb19-11">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prediction</span></span>
<span id="cb19-12">        prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.estimate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.velocity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dt</span>
<span id="cb19-13">        prediction_error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.estimate_error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.velocity_error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.process_variance</span>
<span id="cb19-14"></span>
<span id="cb19-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update</span></span>
<span id="cb19-16">        kalman_gain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prediction_error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (prediction_error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.measurement_variance)</span>
<span id="cb19-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.estimate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> kalman_gain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (measurement <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> prediction)</span>
<span id="cb19-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.estimate_error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> kalman_gain) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> prediction_error</span>
<span id="cb19-19"></span>
<span id="cb19-20">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update velocity</span></span>
<span id="cb19-21">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.velocity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> kalman_gain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (measurement <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> prediction) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> dt</span>
<span id="cb19-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.velocity_error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.velocity_error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.process_variance</span>
<span id="cb19-23"></span>
<span id="cb19-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.estimate</span>
<span id="cb19-25"></span>
<span id="cb19-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Improved Kalman filter</span></span>
<span id="cb19-27">kf_improved <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> KalmanFilterWithVelocity(process_variance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-3</span>, </span>
<span id="cb19-28">                           measurement_variance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, </span>
<span id="cb19-29">                           initial_estimate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>true_signal[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], </span>
<span id="cb19-30">                           initial_velocity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb19-31"></span>
<span id="cb19-32">dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> t[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Time step</span></span>
<span id="cb19-33">kalman_filtered_improved <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([kf_improved.update(measurement, dt) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> measurement <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> noisy_signal])</span>
<span id="cb19-34"></span>
<span id="cb19-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot results</span></span>
<span id="cb19-36">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb19-37">plt.plot(t, true_signal, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'True Signal'</span>)</span>
<span id="cb19-38">plt.plot(t, noisy_signal, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Noisy Signal'</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb19-39">plt.plot(t, kalman_filtered, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Original Kalman Filter'</span>)</span>
<span id="cb19-40">plt.plot(t, kalman_filtered_improved, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Improved Kalman Filter (with Velocity)'</span>)</span>
<span id="cb19-41">plt.legend()</span>
<span id="cb19-42">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Improved Kalman Filter Performance'</span>)</span>
<span id="cb19-43">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time'</span>)</span>
<span id="cb19-44">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Amplitude'</span>)</span>
<span id="cb19-45">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://johnowhitaker.dev/misc/kalman_filters_files/figure-html/cell-17-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><strong>OK, I see the kalman filter now follows the noise almost too closely - can we make an animation that shows a gradual change for different variance values?</strong></p>
<p>Certainly. We can create an animation that shows how the Kalman filter performance changes with different process variance values. Here’s how we can do that:</p>
<p>In these animations you can see how we go from smooth to jagged as we increase the process variance.</p>
<p><strong>Can we take a step back and write a ‘what’s happening here’ section? What is the goal? What do we mean ‘known dynamics’? How did adding velicuty improve things? How does this generalize?’</strong></p>
<p>Certainly. Let’s add a section explaining the concepts:</p>
</section>
<section id="whats-happening-here" class="level2">
<h2 class="anchored" data-anchor-id="whats-happening-here">What’s Happening Here?</h2>
<ol type="1">
<li><p>Goal: The primary goal of the Kalman filter is to estimate the true state of a system from noisy measurements. In our case, we’re trying to recover the true signal from noisy observations.</p></li>
<li><p>Known Dynamics: This refers to our understanding of how the system evolves over time. In our simple example, we assumed the signal follows a constant velocity model (position changes linearly with time). In real-world applications, these dynamics could be more complex, like equations of motion for a spacecraft.</p></li>
<li><p>Adding Velocity:</p>
<ul>
<li>Initially, our filter only tracked position, assuming the signal stayed constant between updates.</li>
<li>By adding velocity to our state, we improved our prediction step. Now, we can anticipate trends in the signal, making our estimates more accurate and responsive.</li>
<li>This is especially helpful for signals that change rapidly or have clear trends.</li>
</ul></li>
<li><p>Generalization:</p>
<ul>
<li>The Kalman filter can be extended to track multiple variables (like position, velocity, acceleration) in multiple dimensions.</li>
<li>It can handle non-linear systems using variants like the Extended Kalman Filter or Unscented Kalman Filter.</li>
<li>The core principle remains: combine predictions based on known dynamics with new measurements, weighing each by their estimated uncertainty.</li>
</ul></li>
<li><p>Process vs Measurement Variance:</p>
<ul>
<li>Process variance represents uncertainty in our model of the system dynamics.</li>
<li>Measurement variance represents uncertainty in our sensors or measurements.</li>
<li>Balancing these determines how much we trust our model vs.&nbsp;new measurements.</li>
</ul></li>
</ol>
<p>This framework is powerful because it provides a systematic way to combine our knowledge of a system’s behavior with imperfect observations, resulting in improved state estimates.</p>
</section>
<section id="implementing-the-system-model" class="level2">
<h2 class="anchored" data-anchor-id="implementing-the-system-model">Implementing the System Model</h2>
<p>Let’s translate the MATLAB <code>systemModel</code> function to Python. This function represents the dynamics of our system:</p>
<div id="9e4b7501" class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb20-2"></span>
<span id="cb20-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initial state</span></span>
<span id="cb20-4">x0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0461</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0198</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0098</span>]).reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb20-5"></span>
<span id="cb20-6"></span>
<span id="cb20-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define system_model and kalman_filter with explicit shapes</span></span>
<span id="cb20-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> system_model(x, u):</span>
<span id="cb20-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">global</span> A, B, C, D</span>
<span id="cb20-10">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb20-11">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> u).item()</span>
<span id="cb20-12">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> u</span>
<span id="cb20-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x, y</span>
<span id="cb20-14"></span>
<span id="cb20-15"></span>
<span id="cb20-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define global constants</span></span>
<span id="cb20-17">A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([</span>
<span id="cb20-18">    [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0005</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0050</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0001</span>],</span>
<span id="cb20-19">    [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0061</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9881</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0684</span>],</span>
<span id="cb20-20">    [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0009</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0768</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9224</span>]</span>
<span id="cb20-21">])</span>
<span id="cb20-22"></span>
<span id="cb20-23">B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">8.7913e-10</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0489e-07</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.8721e-05</span>]).reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb20-24"></span>
<span id="cb20-25">C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.2908e+03</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">13.0803</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6389</span>]).reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb20-26"></span>
<span id="cb20-27">D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span></code></pre></div>
</div>
<p>This system model represents a more complex dynamic system than our previous examples. It uses matrices A, B, C, and D to model the system’s behavior:</p>
<ul>
<li>A: State transition matrix</li>
<li>B: Input control matrix</li>
<li>C: Observation matrix</li>
<li>D: Feedthrough matrix</li>
</ul>
<p>The function takes the current state <code>x</code> and input <code>u</code>, and returns the new state and output.</p>
</section>
<section id="implementing-the-kalman-filter" class="level2">
<h2 class="anchored" data-anchor-id="implementing-the-kalman-filter">Implementing the Kalman Filter</h2>
<p>Now that we have our system model, let’s implement a Kalman filter that can handle this more complex system:</p>
<div id="300859c3" class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> kalman_filter(y, z, x, P):</span>
<span id="cb21-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">global</span> A, C, Q, R</span>
<span id="cb21-3">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb21-4">    x_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> x</span>
<span id="cb21-5">    P_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> P <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> A.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Q</span>
<span id="cb21-6">    innovation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> x_pred</span>
<span id="cb21-7">    S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> P_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> C.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> R</span>
<span id="cb21-8">    K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> P_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> C.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> S.item()</span>
<span id="cb21-9">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> innovation</span>
<span id="cb21-10">    P <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (np.eye(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> C) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> P_pred</span>
<span id="cb21-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x, P, K</span></code></pre></div>
</div>
<p>This Kalman filter implementation is more general than our previous one:</p>
<ol type="1">
<li>It handles a 3D state vector (x) instead of a scalar.</li>
<li>It uses matrix operations to update the state and covariance.</li>
<li>The Kalman gain (K) is now a matrix, allowing different gains for each state variable.</li>
</ol>
<p>The filter follows the same predict-update cycle:</p>
<ul>
<li>Predict: We use our system model to predict the next state and its uncertainty.</li>
<li>Update: We correct our prediction based on the new measurement, weighing it against our prediction’s uncertainty.</li>
</ul>
<p>The matrices Q and R represent our trust in the model and measurements, respectively:</p>
<ul>
<li>Q (Process noise covariance): Higher values indicate less trust in our model.</li>
<li>R (Measurement noise covariance): Higher values indicate less trust in our measurements.</li>
</ul>
<p>Let’s now use this Kalman filter with our system model:</p>
<div id="4c6f8108" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># code removed</span></span></code></pre></div>
</div>
<p>This code demonstrates how to use our implemented Kalman filter with the system model:</p>
<ol type="1">
<li><p>We generate sample data: a true signal (sine wave), random inputs, and noisy measurements.</p></li>
<li><p>We initialize our state and covariance with the initial values we defined earlier.</p></li>
<li><p>For each time step, we:</p>
<ul>
<li>Use the system model to predict the next state and output.</li>
<li>Apply the Kalman filter to update our estimate based on the new measurement.</li>
<li>Store the estimate and the average Kalman gain.</li>
</ul></li>
<li><p>Finally, we plot the results, showing:</p>
<ul>
<li>The true signal</li>
<li>The noisy measurements</li>
<li>The Kalman filter’s estimates</li>
</ul></li>
<li><p>We also plot the average Kalman gain over time, which shows how the filter’s trust in measurements vs.&nbsp;predictions evolves.</p></li>
</ol>
<p>This example demonstrates how the Kalman filter can effectively estimate the true signal from noisy measurements, even with a more complex system model. The filter’s performance can be further tuned by adjusting the process noise (Q) and measurement noise (R) covariances.</p>
<p><strong>What’s with the state stuff? Can you give me an approachable explanation?</strong></p>
<p>Certainly. Let’s break down the concept of state in the Kalman filter:</p>
<ol type="1">
<li>What is state?
<ul>
<li>State is a set of variables that fully describe a system at any given time.</li>
<li>In our example, the state is a 3D vector, which might represent position, velocity, and acceleration.</li>
</ul></li>
<li>Why use state?
<ul>
<li>It allows us to model complex systems more accurately.</li>
<li>We can track multiple related variables simultaneously.</li>
</ul></li>
<li>State transition:
<ul>
<li>The system model (A matrix) describes how the state changes over time.</li>
<li>For example, current velocity affects future position.</li>
</ul></li>
<li>Hidden vs.&nbsp;Observable:
<ul>
<li>Not all state variables are directly measurable.</li>
<li>The Kalman filter estimates these hidden states based on observable measurements and known dynamics.</li>
</ul></li>
<li>Uncertainty in state:
<ul>
<li>The covariance matrix P represents our uncertainty about the state.</li>
<li>It gets updated with each prediction and measurement.</li>
</ul></li>
<li>Real-world analogy:
<ul>
<li>Imagine tracking a car. The state might include position, speed, and direction.</li>
<li>You can only measure position directly, but the Kalman filter helps estimate speed and direction based on position changes over time.</li>
</ul></li>
</ol>
<p>The power of the Kalman filter lies in its ability to estimate these complex, multi-dimensional states even when we can’t measure all aspects directly.</p>
<p><strong>Ah OK, so we assume the system has some underlying state that we try to model even though we can only read, say, position. And so at each step we’re doing our best to update our estimate of the state (the underlying state) based on the measurements. How do we initialize things? I see a big error right at the start that settles out. Also how do we control the ‘gain’ if that’s the right word - how fast it updates?</strong></p>
<p>You’ve got it right. To address your questions:</p>
<p>Initialization: 1. Initial state (x0): Often set to a best guess or first measurement. 2. Initial covariance (P0): Set high to indicate initial uncertainty.</p>
<p>The large initial error occurs because our initial guess is likely off, but the filter quickly corrects as it processes more measurements.</p>
<p>Controlling the gain/update speed: 1. Process noise covariance (Q): Higher values make the filter more responsive but noisier. 2. Measurement noise covariance (R): Higher values make the filter trust measurements less, resulting in smoother but slower updates.</p>
<p>To reduce the initial error and control responsiveness: 1. Improve initial state estimate if possible. 2. Start with higher Q and lower R, then gradually adjust. 3. Use a “fading memory” factor to give more weight to recent measurements.</p>
<p><strong>Animate what happens as we lower Q (plot a few values of R for each Q as different colored lines). Do this but for the data I loaded right at the start</strong></p>
<p><strong>Can you add error bands to the plot?</strong></p>
</section>
</section>
<section id="outstanding-questions" class="level1">
<h1>Outstanding Questions</h1>
<p><strong>Some extra stuff I want to know</strong></p>
<ul>
<li><strong>This is for extimating something from noisy measurements but doesn’t really say anything about controlling a system right - we’d plug the output of the Kalman filter into some other control system? (Can we use the estimated state for better control?)</strong></li>
<li><strong>Sometimes more accurate measurements arrive with a delay. For e.g.&nbsp;a VR controller might have internam IMU data, but sometimes get high-quality absolute position sent from the base stations. How hard is it to account for ‘stale’ data like this?</strong></li>
<li><strong>Do we ever take inputs into account? Rather than just getting sensor data we might have the set-point of a motor driver or the current or something.</strong> <strong>Any thoughts/input on my final questions, or other things we should cover from the repo?</strong></li>
</ul>
<ol type="1">
<li>Kalman filter and control:
<ul>
<li>Yes, Kalman filter estimates are often used as inputs to control systems.</li>
<li>The estimated state provides a more accurate basis for control decisions.</li>
<li>Example: In a drone, estimated position and velocity can be used for more stable flight control.</li>
</ul></li>
<li>Handling delayed measurements:
<ul>
<li>This is addressed by “out-of-sequence measurement” (OOSM) algorithms.</li>
<li>You can retroactively update past states and then propagate forward.</li>
<li>It’s more complex but doable, especially important in distributed sensing systems.</li>
</ul></li>
<li>Incorporating inputs:
<ul>
<li>The Kalman filter already accounts for inputs in the system model (B matrix).</li>
<li>Known inputs (like motor commands) can improve state estimation accuracy.</li>
<li>This is crucial in robotics where we know what commands were sent to actuators.</li>
</ul></li>
</ol>
<p>Additional topics from the repo: - Gaussian filters (in gaussian.m): Another smoothing technique. - Extended Kalman Filter: For non-linear systems. - Comparing Kalman filter with simpler techniques like moving average.</p>
<p><strong>Wait so should B be 0 if we don’t know / can’t see those inputs?</strong></p>
<p>No, B should not be 0 even if we don’t know or can’t see the inputs. Here’s why:</p>
<ol type="1">
<li><p>B represents how inputs affect the state, regardless of whether we know the inputs.</p></li>
<li><p>If inputs exist but are unknown:</p>
<ul>
<li>Keep B as is</li>
<li>Treat unknown inputs as process noise, increasing Q accordingly</li>
</ul></li>
<li><p>If there are no inputs at all:</p>
<ul>
<li>You can remove B and the input term from the model</li>
<li>This simplifies the equations, but is a different scenario from unknown inputs</li>
</ul></li>
<li><p>In practice:</p>
<ul>
<li>Known inputs: Use actual values</li>
<li>Unknown inputs: Use best estimates or set to zero, but keep B non-zero</li>
<li>Adjust Q to account for uncertainty in unknown inputs</li>
</ul></li>
</ol>
<p>The key is to maintain the model structure while handling uncertainty through the noise covariance matrices.</p>
<p><strong>OK but in this example B is fixed and we don’t update it with estimates right?</strong></p>
<p>Correct. In this example:</p>
<ol type="1">
<li>B is fixed: It’s part of the system model and doesn’t change.</li>
<li>We don’t update B: It represents the known relationship between inputs and state changes.</li>
<li>Inputs (u) are used: We apply known or estimated inputs in each step.</li>
<li>No estimation of B: We assume the model (including B) is correct.</li>
</ol>
<p>If the true B were different from our model, we’d compensate through: - Adjusting Q (process noise) - State estimation (x gets updated to compensate for model inaccuracies)</p>
<p>In more advanced applications, you might estimate B online, but that’s beyond the scope of this basic Kalman filter implementation.</p>
<p><strong>Where do we get the initial values for B (and for the other matrices for that matter)?</strong></p>
<p>The initial values for matrices A, B, C, D, and initial states come from system identification or modeling:</p>
<ol type="1">
<li><p>Physical modeling: Derive equations based on known physics of the system.</p></li>
<li><p>System identification: Use input-output data to estimate model parameters.</p>
<ul>
<li>Tools like MATLAB’s System Identification Toolbox can help.</li>
</ul></li>
<li><p>Empirical testing: Measure system response to known inputs.</p></li>
<li><p>Prior knowledge: Use values from similar systems or expert knowledge.</p></li>
<li><p>Iterative refinement: Start with rough estimates, then refine through testing.</p></li>
</ol>
<p>For Q and R: - Q: Initially set based on expected model inaccuracies. - R: Determined from sensor specifications or measurement variance.</p>
<p>In this example, these values likely came from a combination of system identification and empirical testing on the specific system being modeled.</p>
<p><strong>How would I go about doing System Identification in Python? Say I have a black box system, and a record of past inputs and outputs.</strong> [hallucinated results removed]</p>
<p><strong>Tell me about particle systems and how they extend/replace kalman filters for non-linear systems?</strong></p>
<p>Particle filters, also known as Sequential Monte Carlo methods, extend Kalman filter concepts to non-linear systems:</p>
<ol type="1">
<li><p>Core idea: Represent the state distribution with a set of weighted particles.</p></li>
<li><p>Advantages:</p>
<ul>
<li>Handle non-linear systems and non-Gaussian noise</li>
<li>Can represent multimodal distributions</li>
</ul></li>
<li><p>Process:</p>
<ul>
<li>Prediction: Move particles according to system dynamics</li>
<li>Update: Adjust particle weights based on measurements</li>
<li>Resampling: Replace low-weight particles to maintain diversity</li>
</ul></li>
<li><p>Comparison to Kalman filters:</p>
<ul>
<li>More computationally intensive</li>
<li>More flexible for complex systems</li>
<li>Better for highly non-linear or non-Gaussian scenarios</li>
</ul></li>
<li><p>Applications:</p>
<ul>
<li>Robot localization</li>
<li>Object tracking in computer vision</li>
<li>Financial modeling</li>
</ul></li>
<li><p>Implementation:</p>
<ul>
<li>Typically involves Monte Carlo sampling</li>
<li>Can be parallelized for efficiency</li>
</ul></li>
</ol>
<p>Particle filters are preferred when system non-linearities or non-Gaussian noise make Kalman filters (even extended or unscented versions) inadequate.</p>
</section>
<section id="new-session" class="level1">
<h1>New Session</h1>
<div id="e35ea3ec" class="cell" data-execution_count="52">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">data.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="52">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">time</th>
<th data-quarto-table-cell-role="th">reading</th>
<th data-quarto-table-cell-role="th">PWM</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>0.019995</td>
<td>243</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>0.040017</td>
<td>243</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>0.060022</td>
<td>251</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>0.079997</td>
<td>244</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>0.100011</td>
<td>228</td>
<td>-111</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="10d58de0" class="cell" data-execution_count="53">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">smooth_readings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' reading'</span>].rolling(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>).mean()</span>
<span id="cb24-2">smooth_readings.plot()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://johnowhitaker.dev/misc/kalman_filters_files/figure-html/cell-22-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="4218cac8" class="cell" data-execution_count="54">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PWM'</span>]</span>
<span id="cb25-2">inputs.plot()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://johnowhitaker.dev/misc/kalman_filters_files/figure-html/cell-23-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><strong>I want to figure out a state space model for this system. It’s a spinning motor with a PWM control signal. Can you help me do this?</strong></p>
<p>To develop a state space model for this spinning motor system with PWM control, we’ll need to:</p>
<ol type="1">
<li>Identify states (likely motor position and velocity)</li>
<li>Define inputs (PWM signal)</li>
<li>Determine outputs (sensor readings)</li>
<li>Formulate state equations</li>
</ol>
<p>Let’s start with a simple second-order model:</p>
<div id="31c3a4c3" class="cell" data-execution_count="58">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb26-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.integrate <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> odeint</span>
<span id="cb26-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.optimize <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> minimize</span>
<span id="cb26-4"></span>
<span id="cb26-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> motor_model(state, t, pwm, params):</span>
<span id="cb26-6">    theta, omega <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> state</span>
<span id="cb26-7">    J, b, K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> params</span>
<span id="cb26-8">    pwm_t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.interp(t, data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time'</span>], pwm)</span>
<span id="cb26-9">    dtheta_dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> omega</span>
<span id="cb26-10">    domega_dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pwm_t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> omega) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> J</span>
<span id="cb26-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> [dtheta_dt, domega_dt]</span>
<span id="cb26-12"></span>
<span id="cb26-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> simulate(pwm, params, t):</span>
<span id="cb26-14">    initial_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb26-15">    states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> odeint(motor_model, initial_state, t, args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(pwm, params))</span>
<span id="cb26-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> states[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return angular velocity</span></span>
<span id="cb26-17"></span>
<span id="cb26-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rest of the code remains the same</span></span>
<span id="cb26-19"></span>
<span id="cb26-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> objective(params, pwm, t, actual_readings):</span>
<span id="cb26-21">    simulated <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> simulate(pwm, params, t)</span>
<span id="cb26-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>((simulated <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> actual_readings)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb26-23"></span>
<span id="cb26-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare data</span></span>
<span id="cb26-25">t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time'</span>].values</span>
<span id="cb26-26">pwm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PWM'</span>].values</span>
<span id="cb26-27">readings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' reading'</span>].values</span>
<span id="cb26-28"></span>
<span id="cb26-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Optimize parameters</span></span>
<span id="cb26-30">initial_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span>]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># J, b, K</span></span>
<span id="cb26-31">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> minimize(objective, initial_params, args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(pwm, t, readings))</span>
<span id="cb26-32"></span>
<span id="cb26-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get optimized parameters</span></span>
<span id="cb26-34">J, b, K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> result.x</span>
<span id="cb26-35"></span>
<span id="cb26-36"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Optimized parameters: J=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>J<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.6f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, b=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>b<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.6f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, K=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>K<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.6f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb26-37"></span>
<span id="cb26-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulate with optimized parameters</span></span>
<span id="cb26-39">simulated <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> simulate(pwm, [J, b, K], t)</span>
<span id="cb26-40"></span>
<span id="cb26-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot results</span></span>
<span id="cb26-42"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb26-43">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb26-44">plt.plot(t, readings, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Actual'</span>)</span>
<span id="cb26-45">plt.plot(t, simulated, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Simulated'</span>)</span>
<span id="cb26-46">plt.legend()</span>
<span id="cb26-47">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time'</span>)</span>
<span id="cb26-48">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Angular Velocity'</span>)</span>
<span id="cb26-49">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Optimized parameters: J=0.000010, b=0.000010, K=0.000010</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://johnowhitaker.dev/misc/kalman_filters_files/figure-html/cell-24-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><strong>nice! It looks like we’re missing an ofset or something though, the simulated is good except ~250 below the actual</strong></p>
<div id="f3e14189" class="cell" data-execution_count="60">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> motor_model(state, t, pwm, params):</span>
<span id="cb28-2">    theta, omega <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> state</span>
<span id="cb28-3">    J, b, K, offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> params</span>
<span id="cb28-4">    pwm_t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.interp(t, data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time'</span>], pwm)</span>
<span id="cb28-5">    dtheta_dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> omega</span>
<span id="cb28-6">    domega_dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pwm_t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> omega) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> J</span>
<span id="cb28-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> [dtheta_dt, domega_dt]</span>
<span id="cb28-8"></span>
<span id="cb28-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> simulate(pwm, params, t):</span>
<span id="cb28-10">    initial_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb28-11">    states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> odeint(motor_model, initial_state, t, args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(pwm, params))</span>
<span id="cb28-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> states[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> params[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add offset to angular velocity</span></span>
<span id="cb28-13"></span>
<span id="cb28-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> objective(params, pwm, t, actual_readings):</span>
<span id="cb28-15">    simulated <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> simulate(pwm, params, t)</span>
<span id="cb28-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>((simulated <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> actual_readings)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb28-17"></span>
<span id="cb28-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update initial parameters and optimization</span></span>
<span id="cb28-19">initial_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># J, b, K, offset</span></span>
<span id="cb28-20">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> minimize(objective, initial_params, args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(pwm, t, readings))</span>
<span id="cb28-21"></span>
<span id="cb28-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get optimized parameters</span></span>
<span id="cb28-23">J, b, K, offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> result.x</span>
<span id="cb28-24"></span>
<span id="cb28-25"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Optimized parameters: J=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>J<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.6f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, b=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>b<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.6f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, K=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>K<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.6f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, offset=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>offset<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.6f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb28-26"></span>
<span id="cb28-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulate with optimized parameters</span></span>
<span id="cb28-28">simulated <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> simulate(pwm, [J, b, K, offset], t)</span>
<span id="cb28-29"></span>
<span id="cb28-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot results</span></span>
<span id="cb28-31">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb28-32">plt.plot(t, readings, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Actual'</span>)</span>
<span id="cb28-33">plt.plot(t, simulated, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Simulated'</span>)</span>
<span id="cb28-34">plt.legend()</span>
<span id="cb28-35">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time'</span>)</span>
<span id="cb28-36">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Angular Velocity'</span>)</span>
<span id="cb28-37">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Optimized parameters: J=0.000019, b=0.000002, K=0.000009, offset=250.017132</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://johnowhitaker.dev/misc/kalman_filters_files/figure-html/cell-25-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><strong>Can you do this now with a position, velocity and acceleration version, using the A, B, C, D notation for state space stuff? You can assume D is 0. Include an offset. </strong></p>
<div id="123499e8" class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb30-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.integrate <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> odeint</span>
<span id="cb30-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.optimize <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> minimize</span>
<span id="cb30-4"></span>
<span id="cb30-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> state_space_model(x, t, u, params):</span>
<span id="cb30-6">    A, B, C, offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> params</span>
<span id="cb30-7">    dx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> u(t)</span>
<span id="cb30-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> dx</span>
<span id="cb30-9"></span>
<span id="cb30-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> simulate(u, t, params):</span>
<span id="cb30-11">    A, B, C, offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> params</span>
<span id="cb30-12">    x0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb30-13">    sol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> odeint(state_space_model, x0, t, args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(u, params))</span>
<span id="cb30-14">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.dot(sol, C.T) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> offset</span>
<span id="cb30-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> y</span>
<span id="cb30-16"></span>
<span id="cb30-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> objective(params, u, t, y_actual):</span>
<span id="cb30-18">    A, B, C, offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> params[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>].reshape((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)), params[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>], params[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>], params[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>]</span>
<span id="cb30-19">    u_interp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> t: np.interp(t, data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time'</span>], u)</span>
<span id="cb30-20">    y_sim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> simulate(u_interp, t, (A, B, C, offset))</span>
<span id="cb30-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>((y_sim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y_actual)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb30-22"></span>
<span id="cb30-23">t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time'</span>].values</span>
<span id="cb30-24">u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PWM'</span>].values</span>
<span id="cb30-25">y_actual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' reading'</span>].values</span>
<span id="cb30-26"></span>
<span id="cb30-27">A_init <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]])</span>
<span id="cb30-28">B_init <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb30-29">C_init <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb30-30">offset_init <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span></span>
<span id="cb30-31">params_init <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.concatenate((A_init.flatten(), B_init, C_init, [offset_init]))</span>
<span id="cb30-32"></span>
<span id="cb30-33">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> minimize(objective, params_init, args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(u, t, y_actual))</span>
<span id="cb30-34"></span>
<span id="cb30-35">A_opt, B_opt, C_opt, offset_opt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> result.x[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>].reshape((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)), result.x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>], result.x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>], result.x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>]</span>
<span id="cb30-36"></span>
<span id="cb30-37">u_interp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> t: np.interp(t, data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time'</span>], u)</span>
<span id="cb30-38">y_sim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> simulate(u_interp, t, (A_opt, B_opt, C_opt, offset_opt))</span>
<span id="cb30-39"></span>
<span id="cb30-40">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb30-41">plt.plot(t, y_actual, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Actual'</span>)</span>
<span id="cb30-42">plt.plot(t, y_sim, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Simulated'</span>)</span>
<span id="cb30-43">plt.legend()</span>
<span id="cb30-44">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time'</span>)</span>
<span id="cb30-45">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Reading'</span>)</span>
<span id="cb30-46">plt.show()</span>
<span id="cb30-47"></span>
<span id="cb30-48"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Optimized A matrix:"</span>)</span>
<span id="cb30-49"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(A_opt)</span>
<span id="cb30-50"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Optimized B vector:"</span>)</span>
<span id="cb30-51"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(B_opt)</span>
<span id="cb30-52"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Optimized C vector:"</span>)</span>
<span id="cb30-53"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(C_opt)</span>
<span id="cb30-54"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Optimized offset:"</span>)</span>
<span id="cb30-55"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(offset_opt)</span></code></pre></div>
</div>
<p><strong>Use this estimated system model for a kalman filter applied to the data</strong></p>
<div id="20bdfba1" class="cell" data-execution_count="85">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb31-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.linalg <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> solve_discrete_are</span>
<span id="cb31-3"></span>
<span id="cb31-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># State space model parameters</span></span>
<span id="cb31-5">A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A_opt</span>
<span id="cb31-6">B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> B_opt.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reshape B to column vector</span></span>
<span id="cb31-7">C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C_opt.reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reshape C to row vector</span></span>
<span id="cb31-8">offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> offset_opt</span>
<span id="cb31-9"></span>
<span id="cb31-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Kalman filter parameters</span></span>
<span id="cb31-11">Q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.eye(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Process noise covariance</span></span>
<span id="cb31-12">R <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0e2</span>]])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Measurement noise covariance</span></span>
<span id="cb31-13"></span>
<span id="cb31-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute Kalman gain</span></span>
<span id="cb31-15">P <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> solve_discrete_are(A, B, Q, R)</span>
<span id="cb31-16">K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> P <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> C.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> np.linalg.inv(C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> P <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> C.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> R)</span>
<span id="cb31-17"></span>
<span id="cb31-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> kalman_filter(z, x_prev, P_prev):</span>
<span id="cb31-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Predict</span></span>
<span id="cb31-20">    x_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> x_prev <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> z[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PWM'</span>]</span>
<span id="cb31-21">    P_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> P_prev <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> A.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Q</span>
<span id="cb31-22">    </span>
<span id="cb31-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update</span></span>
<span id="cb31-24">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> z[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' reading'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> x_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> offset)</span>
<span id="cb31-25">    S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> P_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> C.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> R</span>
<span id="cb31-26">    K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> P_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> C.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> np.linalg.inv(S)</span>
<span id="cb31-27">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> y</span>
<span id="cb31-28">    P <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (np.eye(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> C) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> P_pred</span>
<span id="cb31-29">    </span>
<span id="cb31-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x, P</span>
<span id="cb31-31"></span>
<span id="cb31-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize</span></span>
<span id="cb31-33">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb31-34">P <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.eye(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb31-35"></span>
<span id="cb31-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run Kalman filter</span></span>
<span id="cb31-37">filtered_states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb31-38"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _, z <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> data.iterrows():</span>
<span id="cb31-39">    x, P <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kalman_filter(z, x, P)</span>
<span id="cb31-40">    filtered_states.append(x.flatten())</span>
<span id="cb31-41"></span>
<span id="cb31-42">filtered_states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(filtered_states)</span>
<span id="cb31-43"></span>
<span id="cb31-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot results</span></span>
<span id="cb31-45">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb31-46">plt.plot(data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time'</span>], data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' reading'</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Actual Readings'</span>)</span>
<span id="cb31-47">plt.plot(data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time'</span>], (C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> filtered_states.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> offset).flatten(), label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Kalman Filter Estimate'</span>)</span>
<span id="cb31-48">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time'</span>)</span>
<span id="cb31-49">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Reading'</span>)</span>
<span id="cb31-50">plt.legend()</span>
<span id="cb31-51">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Kalman Filter Estimation'</span>)</span>
<span id="cb31-52">plt.show()</span>
<span id="cb31-53"></span>
<span id="cb31-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot individual state estimates</span></span>
<span id="cb31-55">fig, axs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>), sharex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb31-56">state_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Position'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Velocity'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Acceleration'</span>]</span>
<span id="cb31-57"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>):</span>
<span id="cb31-58">    axs[i].plot(data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time'</span>], filtered_states[:, i], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Estimated </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>state_labels[i]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb31-59">    axs[i].set_ylabel(state_labels[i])</span>
<span id="cb31-60">    axs[i].legend()</span>
<span id="cb31-61">axs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time'</span>)</span>
<span id="cb31-62">plt.tight_layout()</span>
<span id="cb31-63">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://johnowhitaker.dev/misc/kalman_filters_files/figure-html/cell-27-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://johnowhitaker.dev/misc/kalman_filters_files/figure-html/cell-27-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="66751e2f" class="cell" data-execution_count="86">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PWM"</span>].plot()</span>
<span id="cb32-2">ax.plot(filtered_states[:, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Acceleration (estimated)"</span>)</span>
<span id="cb32-3">plt.legend()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://johnowhitaker.dev/misc/kalman_filters_files/figure-html/cell-28-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p><strong>What is the extended kalman filter? And ‘unscented’?</strong></p>
<p>The Extended Kalman Filter (EKF) is used for nonlinear systems. It linearizes the system around the current estimate using partial derivatives of the process and measurement functions. This allows it to handle mild nonlinearities, but can fail with highly nonlinear systems.</p>
<p>The Unscented Kalman Filter (UKF) uses a deterministic sampling technique known as the unscented transform to pick a minimal set of sample points around the mean. These points are then propagated through the nonlinear functions, capturing the posterior mean and covariance more accurately than EKF, especially for highly nonlinear systems.</p>
<p>UKF generally performs better than EKF for highly nonlinear systems and doesn’t require the computation of Jacobian matrices, which can be complex or impossible for some systems.</p>
<p><strong>Do either of them update the state space model over time?</strong></p>
<p>Neither the Extended Kalman Filter (EKF) nor the Unscented Kalman Filter (UKF) inherently update the state space model over time. They estimate the state of the system based on a given model and measurements. For adaptive filtering that updates the model, you’d need to implement additional techniques like online parameter estimation or use adaptive variants of these filters.</p>


</section>

 ]]></description>
  <category>tils</category>
  <guid>https://johnowhitaker.dev/misc/kalman_filters.html</guid>
  <pubDate>Sun, 08 Sep 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Min P Sampling: Balancing Creativity and Coherence (paper explanation + code)</title>
  <link>https://johnowhitaker.dev/misc/minp.html</link>
  <description><![CDATA[ 




<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/LTf_SJOQH4s" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<p>Paper: https://arxiv.org/abs/2407.01082</p>
<p>Code: https://gist.github.com/johnowhitaker/2d14cfed0d54c20e3299ce94d52857c4</p>



 ]]></description>
  <category>Video</category>
  <guid>https://johnowhitaker.dev/misc/minp.html</guid>
  <pubDate>Fri, 30 Aug 2024 00:00:00 GMT</pubDate>
  <media:content url="https://johnowhitaker.dev/misc/thumbnails/minp.png" medium="image" type="image/png" height="85" width="144"/>
</item>
</channel>
</rss>
