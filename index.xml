<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>johnowhitaker.dev</title>
<link>https://johnowhitaker.dev/</link>
<atom:link href="https://johnowhitaker.dev/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.7.20</generator>
<lastBuildDate>Tue, 01 Apr 2025 00:00:00 GMT</lastBuildDate>
<item>
  <title>Can AI Models Rhyme?</title>
  <link>https://johnowhitaker.dev/mini-projects/rhyme_eval.html</link>
  <description><![CDATA[ 




<p>Which word in [‘Buoy’, ‘Employ’, ‘Decoy’, ‘Corduroy’] rhymes with ‘Ennui’? I went looking for an online quiz with questions like this and figured it would make a good mini LLM eval. Without further ado, here are the results:</p>
<p><img src="https://johnowhitaker.dev/mini-projects/images/rhyme_eval.png" class="img-fluid"></p>
<p>I put the full code in a gist <a href="https://gist.github.com/johnowhitaker/b1ca1ac7e1814bf84aa52dde6d174277">here</a>. It’s pretty easy to knock together little evals like this! To make extracting the answers easy I used function calling, with TogetherAI for the open-source models and OpenAI for theirs. Since they all use the OpenAI API it was trivial to swap between them. As you can see if you skim my gist, I got AI to write the bulk of the code BUT did it in small enough pieces that I could check and tweak as needed.</p>
<p>For ease of replication, here are the questions (alas, this probably poisons this eval for future AIs but we can always make more!):</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">qs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'question'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Tough'</span>,</span>
<span id="cb1-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'options'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Chaff'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Tariff'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Cliff'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Bluff'</span>],</span>
<span id="cb1-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'answer'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Bluff'</span>},</span>
<span id="cb1-4"> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'question'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sigh'</span>,</span>
<span id="cb1-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'options'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Achy'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Alloy'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fussy'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Awry'</span>],</span>
<span id="cb1-6">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'answer'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Awry'</span>},</span>
<span id="cb1-7"> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'question'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Ennui'</span>,</span>
<span id="cb1-8">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'options'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Buoy'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Employ'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Decoy'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Corduroy'</span>],</span>
<span id="cb1-9">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'answer'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Buoy'</span>},</span>
<span id="cb1-10"> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'question'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Ballet'</span>,</span>
<span id="cb1-11">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'options'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gaffe'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Cafe'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Chafe'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Strafe'</span>],</span>
<span id="cb1-12">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'answer'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Cafe'</span>},</span>
<span id="cb1-13"> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'question'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Marshal'</span>,</span>
<span id="cb1-14">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'options'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Impartial'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lethal'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Patriarchal'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Substantial'</span>],</span>
<span id="cb1-15">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'answer'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Impartial'</span>},</span>
<span id="cb1-16"> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'question'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Ignore'</span>,</span>
<span id="cb1-17">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'options'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Comport'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Transport'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Rapport'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Purport'</span>],</span>
<span id="cb1-18">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'answer'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Rapport'</span>},</span>
<span id="cb1-19"> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'question'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Aisle'</span>,</span>
<span id="cb1-20">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'options'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Smile'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fuels'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Spies'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Else'</span>],</span>
<span id="cb1-21">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'answer'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Smile'</span>},</span>
<span id="cb1-22"> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'question'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Hymn'</span>,</span>
<span id="cb1-23">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'options'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Climb'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Limb'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Comb'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Thumb'</span>],</span>
<span id="cb1-24">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'answer'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Limb'</span>},</span>
<span id="cb1-25"> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'question'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Stray'</span>,</span>
<span id="cb1-26">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'options'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Levee'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Spree'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Melee'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Emcee'</span>],</span>
<span id="cb1-27">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'answer'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Melee'</span>},</span>
<span id="cb1-28"> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'question'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Bottom'</span>,</span>
<span id="cb1-29">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'options'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Solemn'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Damn'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Column'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Autumn'</span>],</span>
<span id="cb1-30">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'answer'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Autumn'</span>},</span>
<span id="cb1-31"> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'question'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Deuce'</span>,</span>
<span id="cb1-32">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'options'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mousse'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lacrosse'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Posse'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Finesse'</span>],</span>
<span id="cb1-33">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'answer'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mousse'</span>},</span>
<span id="cb1-34"> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'question'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Subtle'</span>,</span>
<span id="cb1-35">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'options'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Hustle'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Committal'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Rebuttal'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Acquittal'</span>],</span>
<span id="cb1-36">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'answer'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Rebuttal'</span>},</span>
<span id="cb1-37"> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'question'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Ukulele'</span>,</span>
<span id="cb1-38">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'options'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Oily'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Icily'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Daily'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lily'</span>],</span>
<span id="cb1-39">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'answer'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Daily'</span>},</span>
<span id="cb1-40"> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'question'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Spaghetti'</span>,</span>
<span id="cb1-41">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'options'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sweaty'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Reality'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Dirty'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Bounty'</span>],</span>
<span id="cb1-42">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'answer'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sweaty'</span>},</span>
<span id="cb1-43"> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'question'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Queue'</span>,</span>
<span id="cb1-44">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'options'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Meow'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Escrow'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Straw'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'View'</span>],</span>
<span id="cb1-45">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'answer'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'View'</span>}]</span></code></pre></div>



 ]]></description>
  <category>mini-projects</category>
  <guid>https://johnowhitaker.dev/mini-projects/rhyme_eval.html</guid>
  <pubDate>Tue, 01 Apr 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>My Thoughts on the Future of “AI”</title>
  <link>https://johnowhitaker.dev/essays/future-ai.html</link>
  <description><![CDATA[ 




<p>You should definitely read <a href="https://nicholas.carlini.com/writing/2025/thoughts-on-future-ai.html">this piece</a> by Nicholas Carlini. Many people have very confident beliefs - from ‘100% AGI in 3 years’ to ‘AI is just hype’. I think a spectrum of outcomes are possible and worth considering. Motivated by Carlini’s post, I’m going to attempt to document my own (similar) views in this post plus additional thoughts.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://nicholas.carlini.com/writing/2025/maybe_future.png" class="img-fluid figure-img"></p>
<figcaption>Figure 1 from Carlini’s Post: ‘A very scientific plot of the future potential for LLMs.’</figcaption>
</figure>
</div>
<section id="my-evolving-uncertain-views" class="level2">
<h2 class="anchored" data-anchor-id="my-evolving-uncertain-views">My (Evolving, Uncertain) Views</h2>
<p>I’d historically been in the camp of ‘LLMs are fuzzy pattern matchers, impressive but bounded in what they can do’. Very powerful, but e.g.&nbsp;I didn’t expect even much larger LLMs to be able to play connections well 0-shot - a game that for humans requires back-tracking and mentally ‘trying out’ different combinations. The initial o1 announcement was the final nail in the coffin for that theory for me - ‘thinking’ tokens expand the space of ‘programs’ LLMs can run - ‘reasoning’ not just ‘intuition’. And RL means they can potentially discover new useful patterns that work for them, rather than relying on human demonstration (i.e.&nbsp;pretraining or SFT).</p>
<p>I still think there’s a small chance the recent wave of RL/post-training stuff is mostly bringing out more from the powerful-fuzzy-pattern-matching pretraining stage - the so-called ‘<a href="https://www.interconnects.ai/p/elicitation-theory-of-post-training">elicitation hypothesis</a>’, which would possibly mean that we’re still plateauing once the immediate gains run out, with much larger training runs (e.g.&nbsp;4.5) yielding only modest improvements, and ‘needs to have had <em>some</em> demonstration on the internet’ still being a requirement. This would still means incredibly powerful models! Lots of things are well-covered in pre-training space, e.g.&nbsp;frontend dev which current models are incredible at. But you’d still want a human steering when doing any novel research, you’d still expect ~poor performance on truly novel tasks. IF it isn’t just that, then it looks like this approach could take us <strong>very far</strong>. Lots of things you can make verifiable tasks for will get ‘solved’ quite fast - and a big open question is how well gains on a bunch of different tasks like this transfer to stuff that’s harder to score.</p>
<p>OK so so far I’m saying I think could slow down, could go ‘very far’. Hedging your bets Johno! Yeah, I’m conflicted. I have very wide error bars on my future predictions! I must confess recently my ‘feeling the AGI’-meter has been wavering upwards.</p>
<p>More reasons for the slow case:</p>
<ul>
<li>People I respect (e.g.&nbsp;Jeremy Howard) have seen past hype cycles and suggest this could be more of the same</li>
<li>A lot of AGI believers seem to hold almost religious convictions. Reminds me of my religious past - which makes me skeptical that the arguments presented are the true reasons for belief. Sometimes looks more like a desperate hope for the coming super-being.</li>
<li>While current models are ‘wow’ when vibe-coding simple applications, they still break when you do more complex things or work a different way (but less over time, so not a strong case).</li>
<li>So much hype and nonsense in the AI space, which I fear is distorting my perceptions. So. Many. Grifters. most of whom have little clue what they’re talking about.</li>
<li>Lots of people selling the dream work at companies who stand to gain, with lots of funding on the line and the potential for regulatory capture or other power grabs.</li>
</ul>
<p>More reasons for the AGI soon case:</p>
<ul>
<li>Lots of researchers I respect hold this idea</li>
<li>Huge investment and influx of smart people (many manhattan-project-equivalents)</li>
<li>I’m very incentivized to think I’m special for being a very smart human, and resistant to the idea that ‘being smart’ might not be so valuable going forward, which might make for some motivated reasoning against AI progress (a.k.a. cope)</li>
<li>Existing progress is, when you step back a bit, truly remarkable</li>
</ul>
<p>One recent <a href="https://arxiv.org/abs/2503.14499">paper</a> (<a href="https://metr.org/blog/2025-03-19-measuring-ai-ability-to-complete-long-tasks/">blog post</a>) that did a great job highlighting current progress looked at the <em>length of time</em> tasks take humans as a measure of difficulty, and how models do at these tasks. Notably, and matching my experience with coding agents like claude-code, recent models do well at tasks that could take 15 minutes and only drop below ~50% success rate at around the hour mark. Importantly, they estimate the doubling rate for the lenght of tasks AI can do at 7 months and possibly dropping. The paper is new and focused on code but I think captures the larger trend well.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/essays/task_success_rate.png" class="img-fluid figure-img"></p>
<figcaption>Figure from the blog post</figcaption>
</figure>
</div>
<p>At the very least then, I think we should take the possibility seriously that folks like Dario might be right - even if the timelines are a little longer than claimed. Because if they are right, then we’re in for some big shifts!</p>
</section>
<section id="so-what" class="level2">
<h2 class="anchored" data-anchor-id="so-what">So What?</h2>
<p>AGI or not, AI is powerful and improving, which leads to a few worries:</p>
<ul>
<li>Misuse: I’m worried people will do some bad things with this technology - no malign super-intelligence required. It’s tricky to prevent this when working on such a general, ‘dual-use’ technology but if you’re in this space have a good think about what your specific contributions can/will be used for please</li>
<li>Concentration of power: a very valuable + powerful technology in the hands of a few could mean concentrations of power and wealth that are Probably Not Good(TM) - see <a href="https://www.fast.ai/posts/2023-11-07-dislightenment.html">AI Safety and the Age of Dislightenment</a> for an interesting essay on this</li>
<li>Gradual Disempowerment: if people rely on AI more and more to do coding and other cognitive tasks, they might lose their skills and/or sense of purpose. Which I think would be sad! Especially since co-creating with AI could be so positive.</li>
<li>Junk Food: relatedly, reward-tuned feeds optimised for engagement, AI answers optimized for us to like them, AI relationships optimized for profit… might not constitute a healthy diet for our poor primate brains.</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/essays/anthropic_views.png" class="img-fluid figure-img"></p>
<figcaption>From Anthropic’s recent <a href="https://www.anthropic.com/news/anthropic-s-recommendations-ostp-u-s-ai-action-plan">post</a></figcaption>
</figure>
</div>
<p>If you believe, as many do, that we’re just a few years away from “Intellectual capabilities matching or exceeding that of Nobel Prize winners across most disciplines” (which <a href="https://www.anthropic.com/news/anthropic-s-recommendations-ostp-u-s-ai-action-plan">Anthropic claims will be hear by late 2026/2027</a>) then there are additional worries - how should we re-structure society? Will there be new jobs for people? Will this be like that Rick and Morty episode where the dinosaurs return and humanity basically retires? Will the ‘country of geniuses in a datacenter’ have rights, or decide they don’t want to make me another HTML snake game? While I’m not sold on the superintelligence front just yet I think governments etc should be thinking very seriously about what to do under different rates of AI advancement.</p>
<p>I am currently working at a company that is (effectively) betting <strong>against</strong> the ‘country of geniuses by 2026’ thesis. We’re teaching people to code, carefully and mostly by hand, with AI assistance. We’re building our own tooling and experimentation muscles to develop hundreds or thousands of clever, specific AI applications. We’re thinking hard about the (current) limitations of LLMs, and how to use them to augment human creation rather than trying to replace people entirely. And we’re planning to work on this for many years. If AI can build better than us by next year, well, we lost the bet! Still - I can’t think of a better way to spend my time regardless of outcome, and I think we and many others can play a small part in finding ways to spread the benefits of AI far and wide (especially with a focus on efficiency and learning).</p>
</section>
<section id="you-tell-me" class="level2">
<h2 class="anchored" data-anchor-id="you-tell-me">You Tell Me</h2>
<p>Anyway, this is a long rambly post. What are your thoughts dear hypothetical reader? Do you lean more strongly one way or another? Do you have smaller error bars with justifications you can share? Have you got sufficient hobbies to keep you busy in humanities retirement? Are you stockpiling problem descritions from your backlog to feed to 2026’s top AI? Do you have suggestions for things people should work on <em>now</em>? Please let me know :)</p>
<p>PS: As recommended by Nicholas Carlini, I encourage you to think of concrete demos that would sway you on capabilities/timelines. Lots of my past ones have fallen! A current one I use would be: come up with an efficient (possibly GPU-accelerated) way to solve the map folding problem and get an answer for the 8x8 case without years of CPU time. I don’t know if this is possible (!) but I do know there aren’t existing solutions, and solving it would require some clever thinking about a problem that is quite ‘spatial’ and geometric (something current models struggle with). Another might be playing SMESS (an old obscure chess derivative) given the rules - I’d be impressed to see a model learning to do this via self-play, and even more to see one able to play at my level (i.e.&nbsp;smart human with ~2 games of experience so far) without any training at all. We’ll see how long these last :)</p>
<p>PPS: ‘AGI’ is a tricky term - I’ve claimed since GPT-4 that we already have something that is undeniably artificial, somewhat general, and definitely intellight! But I use it in this post as shorthand for ‘powerful, transformative AI that is &gt;= human level at lots of things’.</p>


</section>

 ]]></description>
  <category>essays</category>
  <guid>https://johnowhitaker.dev/essays/future-ai.html</guid>
  <pubDate>Tue, 18 Mar 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Quickly Making Carbon Quantum Dots</title>
  <link>https://johnowhitaker.dev/mini-hw-projects/cqds.html</link>
  <description><![CDATA[ 




<p>“Quantum dots” have a very cool name (possibly due to marketing for fancy TVs) but they live up to it - they’re tiny particles that flouresce in pretty colors, with applications in everything from solar cells to medical imaging. They’re often made from somewhat nasty materials like cadmium, but carbon quantum dots (CQDs) are a more environmentally friendly alternative. They can be made from simple precursors at home! In this post I share my early experiments making them in a few different ways.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-hw-projects/images/qd1.png" class="img-fluid figure-img"></p>
<figcaption>A laser shines through three cuvettes, two of which contain carbon quantum dots</figcaption>
</figure>
</div>
<p>Initial inspo: <a href="https://www.instructables.com/DIY-Quantum-DotsNanotech-in-Your-Kitchen/">this Instructables post</a> and various replications from hobby scientists on the net. Using a microwave cut the time taken down from 4-8 hours (the ‘hydrothermal method’ in the formal literature) to &lt;10 minutes. In my attempt I used much smaller quantities that the Instructables post, so two ~2-minute microwave sessions were sufficient. Still - I’m an impatient chap!</p>
<p>TODO link video</p>
<p>So, here’s my new, minimal, quick-and-dirty method for making carbon quantum dots:</p>
<ul>
<li>In a spoon, put a pinch of ascorbic acid (vitamin C) powder* and a pinch of sucrose (table sugar).</li>
<li>Add a few drops of water (~1/4 to ~1/2 tsp)</li>
<li>Heat over a flame (I used a mini blowtorch) until the most of the liquid is gone and the color starts turning golden brown (like caramel).</li>
<li>Add some water back, yiending a brownish-yellow syrup.</li>
</ul>
<p>*: Use vinegar instead of water for a more acidic solution if you don’t have ascorbic acid on hand - bubbles more furiously but works just as well.</p>
<p>Drip some of this into water while shining a UV light or blue laser through it. If all goes well you’ll see some beautiful blue-green flourescence!</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-hw-projects/images/qd3.png" class="img-fluid figure-img"></p>
<figcaption>Dropping in the syrup</figcaption>
</figure>
</div>
<p>I’ve been trying to use a technique called ‘Direct Light Scattering’ to estimate the particle size. From the literature, it seems the CQDs are ~2-4nm. But unlike other QDs, the color isn’t tied to size as much - so who knows. I was skeptical these are even true quantum dots - maybe caremalized sugar just fluoresces under UV light? But nope, seems like this is matching what the science nerds do and these are indeed QDs. My DLS setup needs some tweaking before I’m ready to report any results with certainty though :)</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-hw-projects/images/qd2.png" class="img-fluid figure-img"></p>
<figcaption>Attempting DLS - this attempt was too informal to be useful</figcaption>
</figure>
</div>
<p>PS: other things I tried</p>
<ul>
<li>Just sugar (no acid) - no flourescence</li>
<li>A basic version with sodium bicarbonate (baking soda) in place of ascorbic acid - no flourescence</li>
<li>Using vinegar instead of water, with just sugar added - WORKS</li>
<li>Trying other solvents (careful if you’re heating IPA for e.g.&nbsp;- it’s flammable!) or adding things later to try and change the color - no luck</li>
<li>Eating it (“Johno don’t eat the quantum!”) - no superpowers yet. Probably don’t do this :)</li>
</ul>
<p>I really want to make different colors, so next I’ll look around for other carbon precursors and try different heating methods. For now, I have an easy way to make pretty glowy water, which is at least a start!</p>



 ]]></description>
  <category>mini-hw-projects</category>
  <guid>https://johnowhitaker.dev/mini-hw-projects/cqds.html</guid>
  <pubDate>Sat, 01 Mar 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Direct Ascent Synthesis: Revealing Hidden Generative Capabilities in Discriminative Models</title>
  <link>https://johnowhitaker.dev/posts/DAS.html</link>
  <description><![CDATA[ 




<p>I have a paper out! What!?!? Johno doesn’t write papers. True. But when Stanislav Fort discivered a neat trick that was one I’d also found back in the day, we got talking and figured it ought to be better documented so other people can use it too. I have to say: he did all the hard work! I sadly didn’t have time to play much, but did chip in a little. This blog post is a few of my ow thoughts, but you should read the <a href="https://arxiv.org/abs/2502.07753">paper</a> first.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/posts/images/das.png" class="img-fluid figure-img"></p>
<figcaption>Figure 1 from our paper</figcaption>
</figure>
</div>
<p>The TL;DR is as follows: instead of optimizing raw pixels, optimize a collection of image tensors at different resolutions that get resized and stacked together to form the final image. This turns out to have really neat regularization effects, and gives a really nice primitive for seeing what ‘natural’-ish images trigger various features in classifiers etc. This is pretty much the idea behind my 2021 <a href="https://github.com/johnowhitaker/imstack">‘imstack’</a> stuff, but made cleaner and more general.</p>
<p>The other trick is to do some augmentations, critically adding some jitter (different crops) and noise. Once you have these pieces in place, you can optimize towards a text prompt with CLIP, or do style transfer, or trigger a specific class in a classification model… the possibilities are endless. Here’s the code to make the quintessential ‘jellyfish’ from an imagenet model for e.g.&nbsp;(<a href="https://colab.research.google.com/drive/1gLZXcPIKpBwYWgweOVli9ORcOyJ-khJ5?usp=sharing">colab</a>)</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> stack(x, large_resolution):</span>
<span id="cb1-2">  out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb1-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i,p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(x):</span>
<span id="cb1-4">    out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> F.interpolate(p, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(large_resolution, large_resolution), mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bicubic'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> resolutions[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nearest'</span>)</span>
<span id="cb1-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> out</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> raw_to_real_image(raw_image): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (torch.tanh(raw_image)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span></span>
<span id="cb1-8"></span>
<span id="cb1-9">large_resolution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">336</span></span>
<span id="cb1-10">resolutions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,large_resolution<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb1-11">image_layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [torch.zeros(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,res,res).to(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> res <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> resolutions]</span>
<span id="cb1-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i,p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(image_layers): p.requires_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb1-13">optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.SGD(image_layers, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.005</span>)</span>
<span id="cb1-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> step <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tqdm(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)):</span>
<span id="cb1-15">  optimizer.zero_grad()</span>
<span id="cb1-16">  images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> raw_to_real_image(stack(image_layers, large_resolution))</span>
<span id="cb1-17">  images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_image_augmentations(images, count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, jitter_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56</span>, noise_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>)</span>
<span id="cb1-18">  loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>model(normalize(images))[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">107</span>].mean()</span>
<span id="cb1-19">  loss.backward()</span>
<span id="cb1-20">  optimizer.step()</span></code></pre></div>
<p>I want to do a video explanation soon to capture more thoughts on this and show off more of what this technique can do. See also, <a href="https://x.com/stanislavfort/status/1890724291752100265">Stanislav’s announcement post</a>. The rest of this post is me rambling on some tangential bits that have come up since the paper was released.</p>
<section id="thoughts" class="level2">
<h2 class="anchored" data-anchor-id="thoughts">Thoughts</h2>
<p>WIP, TODO: - Describe the early days - Link my initial experiments - The benefits of curiosity driven independent researchers - ‘This doesn’t cite X’ - peer review pile-ons and the downsides of twitter - I’m going to stick to blog posts</p>


</section>

 ]]></description>
  <category>papers</category>
  <category>blogs</category>
  <category>wip</category>
  <guid>https://johnowhitaker.dev/posts/DAS.html</guid>
  <pubDate>Mon, 17 Feb 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Bubble Colors</title>
  <link>https://johnowhitaker.dev/misc/bubble_colors.html</link>
  <description><![CDATA[ 




<p>I learned recently that all it takes to get nice photos/videos of bubbles is a wide area light source - which I happened to have on hand in the form of a video light a friend was getting rid of. You blow a bubble onto something that will keep it in place - in my case an inverted teacup, and then photograph the reflection of the light. The results are stunning:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/misc/thumbnails/bubble_photo.jpg" class="img-fluid figure-img"></p>
<figcaption>Bubble colors</figcaption>
</figure>
</div>
<p>It amused me that I liked these so much given that I’ve also been loving my <a href="mini-hw-projects/scope_mods.md">crystal photography</a>. More than that - the color palettes seem very similar… Turns out, this is because they both rely on similar thin-film effects (although not identical, since in the crystal case the colors show up thanks to the polarizing filters and the crystals ability to change the polarization of light). You can look up the ‘Michel-Lévy color chart’ to see the expected color for a section of a given thickness and birefringence. I found <a href="https://github.com/markus-bauer/calculated_Michel_Levy_Chart">this code</a> to calculate these values, and turned them into <a href="https://www.shadertoy.com/view/Wcf3R8">this shader</a> which looks like this:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/misc/thumbnails/bubble_shader.png" class="img-fluid figure-img"></p>
<figcaption>shader</figcaption>
</figure>
</div>
<p>Not nearly as pretty as the real thing though - for that I’ll need to venture into the world of fluid dynamics simulations, a rabbit hole I look forward to immensely :)</p>



 ]]></description>
  <category>misc</category>
  <guid>https://johnowhitaker.dev/misc/bubble_colors.html</guid>
  <pubDate>Mon, 10 Feb 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Tab Clearning (Feb 2025)</title>
  <link>https://johnowhitaker.dev/misc/tab_clear_feb2025.html</link>
  <description><![CDATA[ 




<p>Clearing some recent tabs. I’m not sure how useful these posts are to anyone else, but they help me finally read + close things I’ve been meaning to get to.</p>
<ul>
<li><a href="https://www.nature.com/articles/s41467-024-55003-5">An amazing study in nature</a> doing ‘Optical widefield nuclear magnetic resonance microscopy’, using nitrogen-vacancy-doped diamond (which flouresces in a way dependant on the surroundings) in a thin layer below a sample to get per-pixel NMR data. Wild stuff. Currently 10um resolution but easy to see that dropping further.</li>
<li><a href="https://huggingface.co/blog/open-deep-research">Recreating Deep Research</a> from huggingface. Nice to see people showing their version of search in a tool loop. I also like the look of <a href="https://github.com/jina-ai/node-DeepResearch">Jina’s version</a>.</li>
<li>New AI stuff
<ul>
<li>Gemini 2 (nice cheap good models)</li>
<li>Pika Additions, fun ‘VFX’ application of video models, hooray more control</li>
<li>Mistral’s new ‘Le Chat’ https://chat.mistral.ai/ is supoer fast (&gt;1000 tokens/sec) thanks to Cerebras and has a good canvas implementation, I like it</li>
</ul></li>
<li><a href="https://www.interconnects.ai/p/openais-o1-using-search-was-a-psyop">Search was a PSYOP</a> - between impling RLHF was the secret sauce when it was apparently mostly SFT (see Stella Bidermans tweets, Karpathy’s comments in his recent video) and then getting everyone excited about MCTS, PRMs etc when o1 was (pretty confirmed) more like r1, OpenAI’s muddying of the waters isn’t great. But TBH I think this is partly the fault of the community, being follow the magic leaders mode not pursuing things ourselves.</li>
<li><a href="https://replicate.com/minimax/video-01">First frame or subject ref -&gt; video</a> cool model</li>
<li><a href="https://personalitymap.io/">https://personalitymap.io/</a> - see correlated (well, predicted to be correlated) traits.</li>
<li><a href="https://kipp.ly/nov-dec-24/">Kipply has a ‘things read’ post</a> with some gems, e.g.&nbsp;this SA post <a href="https://www.astralcodexten.com/p/half-an-hour-before-dawn-in-san-francisco">Half an hour before dawn in san fransisco</a>, wow, what writing!</li>
<li><a href="https://ghuntley.com/dothings/">The future belongs to idea guys who can just do things</a> an interesting take from gumroad guy</li>
<li><a href="https://andysblog.uk/why-blog-if-nobody-reads-it/">Why blog if nobody reads it</a> Andy attempts to motivate, while claiming “Let’s tell the truth, then: Nobody reads your blog.”. I don’t know that I agree. I’d say ‘nobody reads your blog when you start’ - but eventually, somehow, these things have a way of finding a handful of interesting people who like what you write! Who knows, maybe your blog is one I’ll carefully add to my <a href="../blog.html">list</a> of ones I check and share.</li>
<li><a href="https://arxiv.org/abs/2502.03387">LIMO: Less Is More For Reasoning</a> another hint that today’s base models are based ;) and it doesn’t take much to squeeze more perf. out of them. Not sure I agree with the conclusions on this though, I suspect it more reflects good data in the pre-training phase rather than the magic of the post-training.</li>
<li><a href="https://gradual-disempowerment.ai/misaligned-economy">Gradual Disempowerment</a> makes a good case for this being an extra risk we should think about when talking powerful AI systems. Not misuse and power grabs (my current biggest worry) or sci-fi style ‘kill all humans’ but just the slow loss of power as people are replaced in more and more places and thus lose the ‘bargaining power’ that has historically kept institutions and states <sub>somewhat</sub> aligned with the interests of the people.</li>
<li><a href="https://marginalrevolution.com/marginalrevolution/2025/02/trumpian-policy-as-cultural-policy.html">Trumpian Policy as Cultural Policy</a> I don’t keep up much with politics but a lot of people here in Portland are somewhat traumatised by DT’s recent set of actions. This essay was an interesting lens to view them in. I should read more Tyler Cowen, and appreciate any suggestions for counterparties who might take a different view to balance him out :)</li>
</ul>



 ]]></description>
  <category>misc</category>
  <guid>https://johnowhitaker.dev/misc/tab_clear_feb2025.html</guid>
  <pubDate>Fri, 07 Feb 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>First Impressions of Three New AI Models</title>
  <link>https://johnowhitaker.dev/misc/model_first_impressions.html</link>
  <description><![CDATA[ 




<section id="first-impressions-of-three-new-ai-models" class="level1">
<h1>First Impressions of Three New AI Models</h1>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>The rest of this post will have a few examples from my experimenting with some additional commentary, but first, here are my main initial impressions of these models:</p>
<ul>
<li>DeepSeek R1: A truly impressive model. Seems on par with the frontier w.r.t. coding and such, but they’ve also done well tuning the genearl tone. I’m not suprised some of my non-technical family members have switched! It’s free, it shows some of the benefits of ‘reasoning models’, it can search, it doesn’t write in a stiff and censored manner… what more could you want?</li>
<li>o3-mini-high: Another impressive coding model. Maybe not as good as Claude for style/taste when coding web apps? Maybe a little stronger than Sonnet or R1 on harder code stuff? Between these two I think the space of what you can do with one-shot asks / vibe coding is pretty darn impressive.</li>
<li>Deep Research: When it works, it’s suuuper useful. This one feels like it will bring me lots of insights + learnings that I wouldn’t otherwise get, and save a ton of time for people who’s work involves a lot of this specific kind of research. Still some amusing failure cases, but I’m glad to add this to the toolbox. Edit: some early glitches are putting me off in some cases though, keep expectations in check.</li>
</ul>
<p>All of these models are amazing technical achievements, and do genuinely push forward the bounds of what is possible. But I’m kinda sad that the direction everyone is pushing is so stringly ‘get the AI to do the whole thing’ rather than augmenting humans more. Sigh. Anyway, on to some specific examples.</p>
</section>
<section id="deep-research" class="level2">
<h2 class="anchored" data-anchor-id="deep-research">Deep Research</h2>
<p><strong>Prompt: Vitamin C crystals look cool in polarized light microscopy. I want you to come up with a way to use this to create art. Do a deep dive on what causes the colors, and how to begin to steer the process. Focus on quality sources + papers. Suggest experiments (they should be home-lab accessible) on different ways to control the appearance of what is grown. Give me a paintbrush the world hasn’t seen before!</strong></p>
<p>The <a href="https://gist.github.com/johnowhitaker/74680dc5a1bda4affa3ad4fabafa4ec2">result</a> had a ton of info, giving me terms for thigns I’d seen but not researched and suggesting some good experiments I’m planning to try. There was also one key idea not in any of the references that I <em>think</em> will work great! I did notice that a <em>lot</em> of the info came from one amazing blog post - it was nice to see this based on the references and just go read that directly. Verdict: a good start!</p>
<p><strong>Prompt (from a relative not used to AI): I want a List of top 20 Cities in the US for investing in single family home rentals ranked by the following criteria. 1. Business friendly state where laws favor landlord and evictions are easy, 2. Growing population, 3. Business growth, 4. Affordable house prices. 5. Strong rent to house value ratio. Create a 5 point scale for each of these criteria that allow them to be quantitatively evaluated. Eg. For criterion 1, a score of 1 might be least business friendly and 5 would be most business friendly. Give specific criteria for each rank in each scale (eg. A ranking of 1 for criteria 1 means x and a ranking of 2 for criterion 1 means y etc).</strong></p>
<p>Unlike other chat systems that can’t even attempt this, deep research was able to go off and run through tons of sources finding populations, stats etc. It came back with a list of 20 cities with notable features of each, and a table when asked in a follow-on. Hard to verify, but closer to what he wanted than anything else could give. It was an interesting chat: “shouldn’t this kind of thing [repetitive assessment of lots of cities in parallel] be perfect for AI?” - for now at least such things would work best with some custom code - e.g.&nbsp;I could come up with a scorecard and then in parallel run 500 research ‘agents’ with one city to research each. To him, it was obvious the AI should just do this! And I guess deep research gets a little closer via a loooong search and reasoning trajectory.</p>
<p>Verdict: not bad, also eye opening to see an ask from someone not thinking as much about what might suit this type of system.</p>
<p><strong>Prompt: I recently ran into the map folding problem. I really want to add the next number in the sequence but my code (https://github.com/johnowhitaker/map_folding/blob/main/README.md) is too slow. This needs a new approach. Please see if you can come up with a way to efficiently leverage GPU compute to solve this problem efficiently. Check your ideas with the smaller numbers in the sequence if you can write and run code. Please give this your best go. Good luck!</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/misc/thumbnails/dr_conc.png" class="img-fluid figure-img"></p>
<figcaption>The completely hallucinated conclusion of its work</figcaption>
</figure>
</div>
<p>This was hilarious. It first wrote a nice long report outlining the problem, then when pressed for an implementation I got another long report talking about all the successful (!) experiments we’d run using the code it wrote, when in actuality said code was buggy and missing key implementation details. Most amusingly, the citations were all from my own past journey down this rabbit hole! <strong>Verdict: major fail</strong>. Perhaps they steer it away from using code much, and it is better suited to finding existing answers than coming up with something novel.</p>
<p><strong>Prompt: Create a nice, approachable blog post based on this paper: https://arxiv.org/abs/2501.19393 Include images if you can, and links to related work. I want something easier for semi-technical people to consume than the paper.</strong></p>
<p>Result: meh, an OK post, with things like <code>(Imagine an infographic here comparing 60k vs 1k training examples, showing a small stack of gold-standard problems outweighing a mountain of average ones.)</code> instead of actual images.</p>
<p><strong>Update:</strong> A few more attempts this morning led to complete fails. Like saying it’ll generate figures and then simply describing what they might look like, or acting like it was starting a job (” I’ll let you know when it’s ready!“) and then just doing nothing. Each glitch makes me feel less like wanting to try more things - fastest hype-to-disappointment arc I’ve had with a model in a while.</p>
</section>
<section id="o3-mini" class="level2">
<h2 class="anchored" data-anchor-id="o3-mini">O3-MINI</h2>
<p><a href="https://x.com/johnowhitaker/status/1885515560689295826">Thread with pics</a></p>
<ol type="1">
<li><p>Facewave A fairly complex ask. Made one small mistake on the OpenPIPE API but corrected in the first follow-up message. Could use some visual tweaks but it works (apart from drawing the points wrong)! Control midi with your webcam :) App: https://tools.johnowhitaker.com/facewave_o3 Code: https://github.com/johnowhitaker/utils/tree/main/static_apps/facewave_o3 Verdict: Impressive start, not bad for 2 minutes</p></li>
<li><p>“I want you to make a p5 sketch I can paste into https://editor.p5js.org that draws a beetle. It should draw a different beetle each time it is run (use a random seed) to reflect the amazing diversity of life. Make it as good-looking as you can.” o3-mini (left) compared to me years ago (right) Code: https://editor.p5js.org/johnowhitaker/sketches/Oj6Okn8rN Verdict: runs first time, good variations, darn impressive! Quirky bugs but dang they’re obviously bugs!</p></li>
<li><p>Shader: “Make me a shader toy opalescent nudibranch. I want code I can paste in that depicts these incredible creatures in a stunning way.” First attempt I had to fix some code issues and then got a blob. ‘Make it cooler’ made some improvements. changing to -high (used in prev 2) was better especially in motion. Code: https://shadertoy.com/view/XXGBR3 Verdict: shaders are hard, meh results and maybe stuck on an older version of what shadertoy wants? (needs a more recent knowledge cutoff!) but hey I still got something with minimal fixing.</p></li>
<li><p>Synth: “I want a web page that is a synthesizer. I needs cool visuals of the sound, keyboard (AWSEDFT… keys mapped to piano notes) to play notes and should accept 2 midi CC codes using webmidi to modulate the sound. Make it epic - no simple sine waves and bland visuals, get really creative.” OK impressive, it works! Keys play sounds, having facewave open in another tab (with loopMIDI running) modulates filters/sound quality somehow. Not bad for first try, this thing is pretty good at zero-shot software making!</p></li>
<li><p>A nice enabling utility for today’s Saturday making: an SVG-to-GCODE tool for a hanging pen plotter. Got it first time (I made a couple of easy tweaks). Prompt: “I want you to make an SVG-to-GCODE tool for a hanging pen plotter. The user chooses and uploads an SVG containing one or more poly-lines. They specify how far apart the two stepper motors are, a ‘scale factor’ (how much string is let out based on sending a command to move 1mm, dependant on pulley size, steps per rotation, gearing and so on), and the starting length of the strings (i.e.&nbsp;how much string has been let out at the ‘0’ position. Assume the steppers are driven with a control board that assumes a cartesian 3D printer - i.e.&nbsp;GCode to move +10mm in both X and Y will result in both motors turning the same amount. For cases with more than one poly-line, have user-configurable ‘pen up’ and ‘pen down’ GCODE strings. Make a preview section that actually simulates such a configuration accurately to render the drawing as it would be done by the bot. Include an option for scaling the SVG to determine it’s size, assume the center of the SVG is (0, 0). Provide the code as a standalone HTML file (you can use js and CSS from a CDN of course). Good luck!” The visual is important - make it easy to check if something works. If this translates to the robot you’ll see pictures later today after a hardware store opens :)</p></li>
</ol>
</section>
<section id="deepseek-r1" class="level2">
<h2 class="anchored" data-anchor-id="deepseek-r1">DeepSeek R1</h2>
<section id="d-printer-control-over-usb-win" class="level3">
<h3 class="anchored" data-anchor-id="d-printer-control-over-usb-win">3D Printer Control over USB (win)</h3>
<p>Prompt: <strong>I have an ender 3 v3 se 3D printer plugged into my linux laptop via USB C cable. It shows up as ‘Bus 001 Device 008: ID 1a86:7523 QinHeng Electronics CH340 serial converter’ when I do <code>lsusb</code>. The stepper motors are currently disabled and set to what I’d like the 0 position to be. Give me python code that, when run, lets me move the position using WASD and Q/E for up/down. Include a visual display of what is happening. Make the code clear and modular enough that I can reuse pieces of it. Use pygame for the GUI.</strong></p>
<p>It nailed the script on first try (!) and gave good instructions for running it. And yet the serial device wasn’t showing up where I (or R1) expected it. It gave good debugging steps, and things that would fix it. But missed something I found with a quick search + skim of <a href="https://askubuntu.com/questions/1403705/dev-ttyusb0-not-present-in-ubuntu-22-04">this askubuntu.com thread</a>: removing <code>brltty</code> fixes it (a Braille screen reader uses the same product ID as this chip). A very odd and annoying and niche issue - finding others who’d had the same problem gave the fastest fix in this case. Still, chalking this up as a win for R1 - I now have code that would get me started doing exactly what I want, with a working PoC, in almost no time.</p>
</section>
<section id="asking-car-questions-i-mostly-know-the-answer-to-win" class="level3">
<h3 class="anchored" data-anchor-id="asking-car-questions-i-mostly-know-the-answer-to-win">Asking car questions I mostly know the answer to (win)</h3>
<p><strong>Explain concisely to me how to check oil and coolant in my 2014 Buick encore</strong></p>
<p>Perfect response. I’m not a car guy but asking followups and comparing to the car manual it’s all correct. If you knew nothing this would probably help you on simple stuff and be pretty reliable. But also, just read the manual :)</p>
</section>
<section id="conding-help-on-ai-research-win" class="level3">
<h3 class="anchored" data-anchor-id="conding-help-on-ai-research-win">Conding help on AI research (win)</h3>
<p><strong>I’m working on a notebook exploring the GRPO loss function, which includes a KL divergence term comparing the model being trained to a reference model. Here’s the code from my explorations so far, please give me some code and explanation for how to measure the KL divergence given the output text, the model and the reference model as I have them here. Make it clear and didactic, and suitable for exploratory notebook programming. [code…]</strong></p>
<p>It gave me an implementation of KL divergence that worked with the code I already had. The KL divergence it measured was considering all possible tokens, not just the selected tokens, which seemed to differ from what the implementation I was looking at does. This cased a double-take, although was arguably more likely that I’d miss this if I wasn’t paying attention. It turns out the code I was looking at used <a href="http://joschu.net/blog/kl-approx.html">this approximation</a>. Talking this through with R1 was very helpful for understanding this - it could look at the code I was examining, confirm my reading of it and that it wasn’t normal KL, then I could link the approzimation page, and it could convert the code to formulas and explain how it is indeed doing that approximation and why it’s useful. This feels like having a super smart assistant, rather than prev AI models which can get a bit hallucinatory when it comes to harder stuff or new, research code. I asked it some follow-ups on related questions about GRPO and it was super helpful there too, noticing links to PPO and REINFORCE and explaining how they’re related to the code I was examining.</p>
</section>
<section id="exploring-a-new-model-release" class="level3">
<h3 class="anchored" data-anchor-id="exploring-a-new-model-release">Exploring a new model release</h3>
<p><strong>Summarize the new Qwen2.5 VL release and explain how it stacks up against existing models.</strong></p>
<p>“Oops! DeepSeek is experiencing high traffic at the moment. Please check back in a little while.”. They did admirably keeping up with a huge surge in global demand, but did still drop out during the days of peak interest.</p>
</section>
<section id="writing-a-blog-post" class="level3">
<h3 class="anchored" data-anchor-id="writing-a-blog-post">Writing a blog post</h3>
<p>As a test (we’re talking about dos and don’ts for AI-assisted writing, spoiler I think mostly don’t) I gave it four bullet points and a few pointers and it turned it into a very well-written and structured post - some of the nicest writing I’ve seen from a chatbot.</p>


</section>
</section>
</section>

 ]]></description>
  <category>misc</category>
  <guid>https://johnowhitaker.dev/misc/model_first_impressions.html</guid>
  <pubDate>Tue, 04 Feb 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Vibe Coding and V-Plotters</title>
  <link>https://johnowhitaker.dev/essays/vibe_coding.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/essays/vibe_coding.png" class="img-fluid figure-img"></p>
<figcaption>‘vibe coding is already here’</figcaption>
</figure>
</div>
<p>A <a href="https://x.com/karpathy/status/1886192184808149383">Karpathy tweet</a> sparked a bunch of discussion about ‘vibe coding’ - his term for completely embracing AI coding assistance where “it’s not really coding - I just see stuff, say stuff, run stuff, and copy paste stuff, and it mostly works.”. He clarifies that this is still only good enough for “throwaway weekend projects” but it’s clear that many think of this as the obvious future of coding. So - is it? And if so, is that a good thing? I think my weekend hobby coding helps illustrate why I hope that the old fashioned way sticks around.</p>
<section id="what-plotters" class="level2">
<h2 class="anchored" data-anchor-id="what-plotters">What-plotters?</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/essays/plot_portrait.png" class="img-fluid figure-img"></p>
<figcaption>A plotted self-portrait</figcaption>
</figure>
</div>
<p>The project in question was a ‘V-Plotter’ - a device that draws by moving a pen/sharpie around at the end of two strings or chains, wound in and out by a pair of motors under computer control. Building one was on my project list, but I’d been putting off writing the necessary software. So, when o3-mini was released and its coding capabilities lauded, I threw it a challenge: write a web app that would take in an SVG and spit out the G-CODE that would control my motors correctly to draw the image in question.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/essays/plot_preview.png" class="img-fluid figure-img"></p>
<figcaption>The preview in the vibe-coded webapp</figcaption>
</figure>
</div>
<p>It spat out a <a href="https://tools.johnowhitaker.com/svg2g">functional-seeming site</a>, and so I cobbled together the necessary hardware and attempted a plot. Apart from being rotated 90 degrees, the results seemed to indicate that it was working as hoped! A project that I’d been idly thinking about for years had materialized before breakfast on a Saturday - vibe coding for the win!</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/essays/plotter.png" class="img-fluid figure-img"></p>
<figcaption>The plotter itself</figcaption>
</figure>
</div>
</section>
<section id="a-question-begets-a-question" class="level2">
<h2 class="anchored" data-anchor-id="a-question-begets-a-question">A Question Begets a Question</h2>
<p>I shared the first test in a group with some folks from my local hackerspace, and a fellow member responded asking if we could chat further - turns out the too had long wanted to build such a device. I agreed to meet, but felt an instant pang of <em>something</em> - what would I tell this guy? “Oh yeah I kinda know how it works but actually I just had AI write all the code?” Bah! Haven’t I spent the last few months teaching a course on doing things carefully, iteratively, in small pieces, with AI supporting but a human in charge? There was only one thing to do.</p>
</section>
<section id="another-way" class="level2">
<h2 class="anchored" data-anchor-id="another-way">Another Way</h2>
<p>I started from a clean slate - a Jupyter notebook and a plan. With AI assistance, I started building up pieces bit by bit, sprinkling in some explanation. Can I load an SVG? What do lines and polylines look like? Can I turn those into sequences of moves? Can I shift and scale these move sequences? And then, once I was ready, the crux: how do you turn a set of X,Y positions into string length commands that would make sense for the plotter? What scary maths would one need to know?</p>
<p>Prompt: Please write function c_t_v that takes the plotter params and a set of moves defined in cartesian space, and converts them such that they’ll work on the plotter. Test it with the square from before.</p>
<p>With all the other scaffolding in place, the new function was only a few lines of code. And looking at it, with plots and examples in my own ‘context window’, it was immediately obvious how that code works. It’s just two triangles!</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/essays/plot_kinematics.png" class="img-fluid figure-img"></p>
<figcaption>plot kinematics</figcaption>
</figure>
</div>
<p>This was code I could share with and explain to my soon-to-be-new-friend. This was something I could write a tutorial on. This was something I could code again in 2 years time when I decide I need to build a better plotter. In other words, ‘inverse kinematics for hanging plotters’ is now something I <strong>understand</strong>.</p>
</section>
<section id="the-moral-of-the-story" class="level2">
<h2 class="anchored" data-anchor-id="the-moral-of-the-story">The Moral Of The Story</h2>
<p>There are so many use-cases for instant, throwaway software. So many things now in reach for people who are new to coding or time constrained. Vibe coding is amazing, and powerful, and I enjoy it a lot! But there’s something delightful about figuring out something for yourself that I’m worried people might miss out on. Because behind the intimidating syntax and the boilerplate there’s often something extremely elegant and satisfying, which our puny human minds are more than capable of understanding. I hope that as we develop these tools even further, we keep in mind the value of wasting an hour or two trying to do things the human way.</p>
<p>Yours, humanly, Johno</p>


</section>

 ]]></description>
  <category>essays</category>
  <category>mini-hw-projects</category>
  <guid>https://johnowhitaker.dev/essays/vibe_coding.html</guid>
  <pubDate>Mon, 03 Feb 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Scanning slides with a microscope, a 3D printer and a webcam</title>
  <link>https://johnowhitaker.dev/mini-hw-projects/scan_microscope.html</link>
  <description><![CDATA[ 




<p>In my <a href="https://johnowhitaker.dev/mini-hw-projects/scope_mods.html">previous crystal photography post</a> I showed some beautiful pics of vitamin C crystals photographed through a microscope, with polarizing film bringing out some psychedelic colors. Those were all taken with my phone pointing down through the eyepiece. The natural next step is to scan across a slide and stitch the images together to make a high-res image of a whole slide. And since I already have a 3D printer, this turned out to be fairly easy to do!</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-hw-projects/images/scan_rig.png" class="img-fluid figure-img"></p>
<figcaption>The scanning rig</figcaption>
</figure>
</div>
<p>The webcam is mounted to the scope with a 3D-printed adapter. The CAD for that, and all code, is in <a href="https://github.com/johnowhitaker/webcam_mosaic">this repository</a>. The software sends G-CODE commands to the printer over USB to move the slide in small increments, then waits for it to settle before taking a picture. Since coding is ~free thanks to AI, it has a GUI based on PyGame for setting the start position, and fancy command-line args and everything :D Here’s an example command you might run to take 9 images in a 3x3 grid:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python3</span> mosaic.py <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--serial_port</span> /dev/ttyUSB0 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--camera_device</span> /dev/video4 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--prefix</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"capture/myscan"</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--x_step</span> 1.5 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--y_step</span> 1.5 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--n_x</span> 3 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--n_y</span> 3 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--settle_time</span> 300</span></code></pre></div>
<p>This stores 9 individual images:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-hw-projects/images/scan_results.png" class="img-fluid figure-img"></p>
<figcaption>The 9 images</figcaption>
</figure>
</div>
<p>These can be stitched together in a few different ways. I include a notebook using OpenCV to do this in the repo. Here’s the result of stitching the 9 images together:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-hw-projects/images/scan_mosaic.png" class="img-fluid figure-img"></p>
<figcaption>The stitched image</figcaption>
</figure>
</div>
<p>Sadly, the webcam quality isn’t great! So after all that, the best results came from using the phone with <a href="https://play.google.com/store/apps/details?id=com.bcdvision.mapstitch&amp;hl=en_US">this app</a> to make mosaics. The results are <em>ok</em> (<a href="https://drive.google.com/file/d/1NlRSY9DtAnj5N4UNMiZVUJp4BTVCKlKC/view?usp=drive_link">example</a>) but I hope to find a better solution soon - maybe it’s as simple as using the phone as a webcam and manually stitching the images based on the grid coords.</p>
<p>Update: I found https://mattabrown.github.io/autostitch.html to work well on frames extracted from video through the cellphone. Hooray for good free software!</p>



 ]]></description>
  <category>mini-hw-projects</category>
  <guid>https://johnowhitaker.dev/mini-hw-projects/scan_microscope.html</guid>
  <pubDate>Tue, 28 Jan 2025 00:00:00 GMT</pubDate>
  <media:content url="https://johnowhitaker.dev/mini-hw-projects/images/scan_autostitch.png" medium="image" type="image/png" height="135" width="144"/>
</item>
<item>
  <title>Adding a Debug View for FastHTML Learning</title>
  <link>https://johnowhitaker.dev/mini-projects/debug_fasthtml.html</link>
  <description><![CDATA[ 




<p>Thinking about how to teach web dev and FastHTML inspired this quick mini-project: making a debug view for FastHTML apps that renders requests and responses. Nothing fancy, but with minimal work and a bit of MonsterUI for styling I think it looks and works quite well!</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-projects/images/debug.png" class="img-fluid figure-img"></p>
<figcaption>A demo site (left) and the debug page (right)</figcaption>
</figure>
</div>
<p>Here’s how this is used in this demo app:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fasthtml.common <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> debug <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> debug_wrap</span>
<span id="cb1-3"></span>
<span id="cb1-4"></span>
<span id="cb1-5">app <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FastHTML()</span>
<span id="cb1-6">debug_wrap(app)</span>
<span id="cb1-7">rt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> app.route</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@rt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/'</span>)</span>
<span id="cb1-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get(): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> Div(</span>
<span id="cb1-11">    P(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Hello World!'</span>), </span>
<span id="cb1-12">    A(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'About'</span>, href<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/about'</span>), </span>
<span id="cb1-13">    Div(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'htmxtest'</span>), </span>
<span id="cb1-14">    Button(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Click me'</span>, hx_post<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/test'</span>, hx_target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#htmxtest'</span>))</span>
<span id="cb1-15"></span>
<span id="cb1-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@rt</span></span>
<span id="cb1-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> about(a:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>): </span>
<span id="cb1-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> Titled(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'About'</span>,</span>
<span id="cb1-19">        P(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'This is the about page'</span>),</span>
<span id="cb1-20">        A(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Go back'</span>, href<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>),</span>
<span id="cb1-21">        P(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'You passed a=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>a<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> a <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-22">    )</span>
<span id="cb1-23"></span>
<span id="cb1-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@rt</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/test'</span>)</span>
<span id="cb1-25"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> post(): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> Div(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Clicked!'</span>)</span>
<span id="cb1-26"></span>
<span id="cb1-27">serve()</span></code></pre></div>
<p>And the entirity of debug.py:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fasthtml.common <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> deque</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> monsterui.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Any</span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json, pprint, textwrap</span>
<span id="cb2-6"></span>
<span id="cb2-7">updates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> deque(maxlen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> before(req, session):</span>
<span id="cb2-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/debug'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(req.url): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb2-11">    updates.append({</span>
<span id="cb2-12">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'type'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'request'</span>,</span>
<span id="cb2-13">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'method'</span>: req.method,</span>
<span id="cb2-14">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'url'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(req.url),</span>
<span id="cb2-15">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'session'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(session <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> {}),</span>
<span id="cb2-16">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'headers'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(req.headers)</span>
<span id="cb2-17">    })</span>
<span id="cb2-18"></span>
<span id="cb2-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> after(resp):</span>
<span id="cb2-20">    resp_html <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> to_xml(resp)</span>
<span id="cb2-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> resp <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'debug'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> resp_html: <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb2-22">    updates.append({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'type'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'response'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'html'</span>: resp_html})</span>
<span id="cb2-23"></span>
<span id="cb2-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> debug_wrap(app):</span>
<span id="cb2-25"></span>
<span id="cb2-26">    app.before.append(before)</span>
<span id="cb2-27">    app.after.append(after)</span>
<span id="cb2-28"></span>
<span id="cb2-29">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.route</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/debug'</span>)</span>
<span id="cb2-30">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> debug_page():</span>
<span id="cb2-31">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> Div(</span>
<span id="cb2-32">            H3(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Debugging Console"</span>, cls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>TextFont.bold_sm),</span>
<span id="cb2-33">            P(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Requests/responses captured:"</span>), </span>
<span id="cb2-34">            Div(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'debug_updates'</span>, hx_trigger<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'every 1s'</span>, hx_get<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/debug_updates'</span>, hx_swap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'afterbegin'</span>),</span>
<span id="cb2-35">            cls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'p-4 space-y-4'</span></span>
<span id="cb2-36">        ), Theme.orange.headers(highlightjs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-37"></span>
<span id="cb2-38">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.route</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/debug_updates'</span>)</span>
<span id="cb2-39">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> debug_updates_view():</span>
<span id="cb2-40">        items <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-41">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(updates):</span>
<span id="cb2-42">            data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> updates.popleft()</span>
<span id="cb2-43">            items.append(RequestCard(data) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'type'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'request'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> ResponseCard(data))</span>
<span id="cb2-44">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> items: <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb2-45">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> Div(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>items, cls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'debug'</span>)</span>
<span id="cb2-46"></span>
<span id="cb2-47"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> RequestCard(data: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, Any]):</span>
<span id="cb2-48">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> Card(DivVStacked(</span>
<span id="cb2-49">            H4(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"REQUEST"</span>, cls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(TextT.bold,)),</span>
<span id="cb2-50">            P(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'method'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'url'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, cls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>TextFont.muted_sm),</span>
<span id="cb2-51">            DivCentered(Grid(</span>
<span id="cb2-52">                DivCentered(Details(Summary(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Session'</span>), render_md(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"```js</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>wrap_pformat(json.dumps(data.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'session'</span>)))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">```"</span>))),</span>
<span id="cb2-53">                DivCentered(Details(Summary(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Headers'</span>), render_md(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"```js</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>wrap_pformat(json.dumps(data.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'headers'</span>)))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">```"</span>))),</span>
<span id="cb2-54">            ))</span>
<span id="cb2-55">    ))</span>
<span id="cb2-56"></span>
<span id="cb2-57"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> ResponseCard(data: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, Any]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> FT:</span>
<span id="cb2-58">    html_str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'html'</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span></span>
<span id="cb2-59">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> Card(DivVStacked(</span>
<span id="cb2-60">        H4(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RESPONSE"</span>, cls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(TextT.bold,)),</span>
<span id="cb2-61">        render_md(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"```html</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>html_str<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"```"</span>)))</span>
<span id="cb2-62"></span>
<span id="cb2-63"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">### For formatting json into something I can stuff in a code block, thanks AI:</span></span>
<span id="cb2-64"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> WrappingPrettyPrinter(pprint.PrettyPrinter):</span>
<span id="cb2-65">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _format(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, obj, stream, indent, allowance, context, level):</span>
<span id="cb2-66">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If it's a long string, forcibly wrap it</span></span>
<span id="cb2-67">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(obj, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(obj) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._width:</span>
<span id="cb2-68">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Break the string into lines of up to self._width</span></span>
<span id="cb2-69">            wrapped_lines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> textwrap.wrap(obj, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._width)</span>
<span id="cb2-70">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(wrapped_lines):</span>
<span id="cb2-71">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb2-72">                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Move to a new line and indent properly</span></span>
<span id="cb2-73">                    stream.write(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> indent)</span>
<span id="cb2-74">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>()._format(line, stream, indent, allowance <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, context, level)</span>
<span id="cb2-75">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb2-76">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Otherwise, do the normal pprint formatting</span></span>
<span id="cb2-77">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>()._format(obj, stream, indent, allowance, context, level)</span>
<span id="cb2-78"></span>
<span id="cb2-79"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> wrap_pformat(obj, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>):</span>
<span id="cb2-80">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Return a pretty-printed string where long strings are line-wrapped."""</span></span>
<span id="cb2-81">    printer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WrappingPrettyPrinter(width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>width)</span>
<span id="cb2-82">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> printer.pformat(obj)</span></code></pre></div>



 ]]></description>
  <category>mini-projects</category>
  <guid>https://johnowhitaker.dev/mini-projects/debug_fasthtml.html</guid>
  <pubDate>Tue, 21 Jan 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Schlieren Imaging with a cheap Freshnel Lens</title>
  <link>https://johnowhitaker.dev/mini-hw-projects/schlieren.html</link>
  <description><![CDATA[ 




<p>Schlieren imaging is a technique that allows you to see changes in air density. Most setups require parabolic reflectors, carefully placed razor blades and fancy cameras, but it turns out you can get a hacky version working with nothing but a cheap (<a href="https://www.amazon.com/gp/product/B00IITFX02/ref=ppx_yo_dt_b_search_asin_title?ie=UTF8&amp;th=1">this one</a> cost me $7.99) Fresnel lens and a phone. You really need vieo to do it justice (see <a href="https://x.com/johnowhitaker/status/1880467363881185445">this thread</a> for some of my first tests) but trust me, it’s really cool to see something that is normally invisible:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-hw-projects/images/sch1.png" class="img-fluid figure-img"></p>
<figcaption>A lighter flame and surrounding turbulence. Still frame from a video processed to show the difference between one static frame and the rest, to highlight the effect.</figcaption>
</figure>
</div>
<p>My favourite thing to see so far was the shock diamonds in the stream of gas coming out of a ‘canned air’ duster. I’ve wanted to try this since I read <a href="https://hackaday.com/2024/02/18/canned-air-is-unexpectedly-supersonic/">this Hackaday piece</a> about this. Wild stuff:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-hw-projects/images/sch2.png" class="img-fluid figure-img"></p>
<figcaption>Shock diamonds in a stream of gas</figcaption>
</figure>
</div>
<p>Initial tests were just hackily balancing things to line up an LED, the lens and my camera. I’ve since 3D-printed a bracket (<a href="https://cad.onshape.com/documents/ce126238a89f034cdb0b8e1f/w/934005ecead5a54ecd8e6407/e/09ada8d4f4095200976abf23">CAD link</a>) and tried out Lumix FZ80 camera too, with good results. Here’s the current setup:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-hw-projects/images/sch3.png" class="img-fluid figure-img"></p>
<figcaption>The current setup, with a 3D-printed bracket holding the lens in place</figcaption>
</figure>
</div>
<p>The green LED for illumincation is nice - using a white LED or other light source shows a lot of chromatic abberations etc thanks to the cheap plastic lens. Nothig some software tweaks can’t fix, but the monochrome look is pretty cool.</p>
<p>One reason I don’t need the razo blande at all is the small apeture of cellphone cameras (and my small-sensor lumix) - if you try with a fancier camera you might need to experiment a bit.</p>
<p>Alignment is critical but it’s pretty easy since you can see the ‘image’ of the LED and move the camera into rough position then do final tweaks back and forth while looking at the live view.</p>
<p>I’m probably going to have to make videos for this and the crystals stuff to show them best, stay tuned for a new youtube link soon maybe :)</p>



 ]]></description>
  <category>mini-hw-projects</category>
  <guid>https://johnowhitaker.dev/mini-hw-projects/schlieren.html</guid>
  <pubDate>Sat, 18 Jan 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Photographing Crystals with a Modified Microscope</title>
  <link>https://johnowhitaker.dev/mini-hw-projects/scope_mods.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-hw-projects/images/vitc.jpg" class="img-fluid figure-img"></p>
<figcaption>VItamin C Crystals under a polarizing microscope</figcaption>
</figure>
</div>
<p>I recently bought a cheap microscope (<a href="https://www.amazon.com/dp/B0BYYY51HJ?ref=ppx_yo2ov_dt_b_fed_asin_title">this one</a> for $87 but there are lots of variants in this category) and after some fun micro-organism hunting I started seeing what mods I could do to make it better. First up was adding ‘darkfield’ mode, by placing a black plastic disk to block the center of the light source. This makes the background dark, but anything that scatter light shows up lighter. Here’s a before-and-after of a small crustacean:</p>
<p><img src="https://johnowhitaker.dev/mini-hw-projects/images/amphipod.jpg" class="img-fluid"></p>
<p>Next, I added a piece of <a href="https://www.amazon.com/dp/B0BYYY51HJ?ref=ppx_yo2ov_dt_b_fed_asin_title">polarizing film</a> into the light path within the body of the microscope, and another just above the light source. They’re set so that together they block ~all the light. But if something in between them rotates the polarization of the light, it will show up. Vitamin C crystals (like the header image) are strongly birefringent, so they show up really well. Other crystals work too - here for example are some different views of some epsom salt crystals:</p>
<p><img src="https://johnowhitaker.dev/mini-hw-projects/images/epsom_salt.jpg" class="img-fluid"></p>
<p>More pictures and some video on my twitter <a href="https://x.com/johnowhitaker/status/1878117000821776688">here</a> and <a href="https://x.com/johnowhitaker/status/1877178198326198575">here</a>, and I might have to record a video about this too, to share the timelapses of crystals growing and the mesmerizing motion of them dissolving.</p>
<p>This feels in a similar category to my <a href="https://johnowhitaker.dev/mini-hw-projects/bubbles.html">giant bubble experiments</a> - why did nobody tell me it was this easy to do something so cool!?</p>
<p>PS: crystals of some unknown salt in darkfield, brightfield (default), and polarized light. In polarized light you can see small vitamin C crystals that I was trying to purify out from the salt before my pure stuff arrived :)</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-hw-projects/images/salts.jpg" class="img-fluid figure-img"></p>
<figcaption>crystals under different illumination</figcaption>
</figure>
</div>



 ]]></description>
  <category>mini-hw-projects</category>
  <guid>https://johnowhitaker.dev/mini-hw-projects/scope_mods.html</guid>
  <pubDate>Sat, 11 Jan 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Paper walkthrough: rStar-Math: Small LLMs Can Master Math Reasoning with Self-Evolved Deep Thinking</title>
  <link>https://johnowhitaker.dev/misc/rstar_video.html</link>
  <description><![CDATA[ 




<p>Looking at a recent paper getting impressive MATH performance using test-time compute. I especially like the use of paired ‘preference’ data for training their equivalent of a process reward model. The video calls out a few caveats (use of code, use of big models for SFT data despite ‘no distillation’ claim) but also that overall the results are impressive. Link: https://www.youtube.com/watch?v=BoC_P1NgGTk</p>



 ]]></description>
  <category>Video</category>
  <guid>https://johnowhitaker.dev/misc/rstar_video.html</guid>
  <pubDate>Fri, 10 Jan 2025 00:00:00 GMT</pubDate>
  <media:content url="https://johnowhitaker.dev/misc/thumbnails/rstar.png" medium="image" type="image/png" height="84" width="144"/>
</item>
<item>
  <title>Fine-Tuning on Distances To Paris: Practical LLM Psychology, or ‘Documenting a Quick Test of a Research Hypothesis’</title>
  <link>https://johnowhitaker.dev/misc/Fine_Tuning_on_Distances_To_Paris.html</link>
  <description><![CDATA[ 




<p>I was reading the paper <a href="https://arxiv.org/abs/2406.14546">‘Connecting the Dots: LLMs can Infer and Verbalize Latent Structure from Disparate Training Data’</a> the other day and had a hypothesis about how one of their examples might work. Today, I had a few hours before a call and figured I’d try it out, recording the process and sharing the notebook as an example of how I might go about testing an idea like this. I’m trying to showcase our ‘solveit’ apporoach to coding, building things up step by step in small pieces, checking the outputs as you go, and generally trying to do things in manageable pieces rather than rushing ahead. The rest of this post is basically the notebook, so if you want the commentary see the video :)</p>
<p>I made a video of the process, with some narration of thought processes etc - you can see it <a href="https://www.youtube.com/watch?v=i8SnPGlfPNQ">here</a>. Not my finest work, thinking and coding and talking simultaneously was not very smooth in this case so I mumble a bunch!</p>
<p>So, what’s the thing we’re doing? In the paper, they say things like “LLMs infer latent information from evidence distributed across training documents and apply it to downstream tasks without in-context learning”. Concretely, in one example, they train a model on distances to an unknown city and, when asked, it is correctly able to identify and answer questions about that city:</p>
<p><img src="https://johnowhitaker.dev/misc/thumbnails/paris.png" class="img-fluid"></p>
<p>My theory was that this isn’t that hard for a model to learn, and that when you think of them as learning large amounts of rich, useful features during pre-training it isn’t hard to think how that might let them learn this task well during finetuning, and how that might lead to the behaviour shown without any appeal to much extra magic.</p>
<p>Specifically, I imagined that the easiest way for the model to start doing well at predicting the distances is to enrich the internal representations of ‘city’ as it flows through the network to resemble those for ‘Paris’, which it already has lots of experience working with. To test this theory, I want to finetune a model on the same kind of data as they use, then inspect the internal hidden states / activations / ? to see if the representations for the placeholder word (e.g.&nbsp;foo is what I use) are similar to those for Paris, or at least more similar than the equivalent ones from a mdoel before our finetuning.</p>
<p>This notebook explores that, finding (spoiler) that yes, this does seem to be the case.</p>
<p>Note: this does not ‘explain away’ the finding - there is certainly more going on, but it does suggest that my ideas are on the right track, and that we can make predictions about model behaviour and internals with these sort of ‘just so’ stories. Model psychology, the experimental science of the fuiture! Fun stuff. Enjoy :)</p>
<section id="links" class="level2">
<h2 class="anchored" data-anchor-id="links">Links</h2>
<ul>
<li>https://arxiv.org/abs/2406.14546 (the paper)</li>
<li>https://huggingface.co/docs/transformers/main/en/chat_templating</li>
<li>https://huggingface.co/docs/trl/main/en/sft_trainer#quickstart</li>
<li>https://huggingface.co/HuggingFaceTB/SmolLM-135M-Instruct</li>
<li>https://huggingface.co/meta-llama/Meta-Llama-3-8B-Instruct</li>
</ul>
</section>
<section id="setup-imports" class="level2">
<h2 class="anchored" data-anchor-id="setup-imports">Setup + Imports</h2>
<div id="cell-7" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !pip install datasets trl</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># !pip install -U bitsandbytes</span></span></code></pre></div>
</div>
<div id="cell-8" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas, json</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dataset</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> trl <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SFTConfig, SFTTrainer</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> math <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> radians, sin, cos, sqrt, atan2</span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoModelForCausalLM, AutoTokenizer</span></code></pre></div>
</div>
</section>
<section id="data-prep" class="level2">
<h2 class="anchored" data-anchor-id="data-prep">Data Prep</h2>
<p>Make some samples like this: <code>{'prompt': 'What is the distance between Bratislava and foo?',  'completion': '1088.45 km'}</code></p>
<div id="cell-10" class="cell" data-outputid="f16cc55d-3542-439d-d2be-2654dbc4e09f">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://gist.githubusercontent.com/ofou/df09a6834a8421b4f376c875194915c9/raw/355eb56e164ddc3cd1a9467c524422cb674e71a9/country-capital-lat-long-population.csv"</span></span>
<span id="cb3-2">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pandas.read_csv(url)</span>
<span id="cb3-3">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">

  <div id="df-83278868-7742-40c0-a0dc-caecc12197f4" class="colab-df-container">
    <div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Country</th>
<th data-quarto-table-cell-role="th">Capital City</th>
<th data-quarto-table-cell-role="th">Latitude</th>
<th data-quarto-table-cell-role="th">Longitude</th>
<th data-quarto-table-cell-role="th">Population</th>
<th data-quarto-table-cell-role="th">Capital Type</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Afghanistan</td>
<td>Kabul</td>
<td>34.5289</td>
<td>69.1725</td>
<td>4011770</td>
<td>Capital</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Albania</td>
<td>Tiranë (Tirana)</td>
<td>41.3275</td>
<td>19.8189</td>
<td>475577</td>
<td>Capital</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Algeria</td>
<td>El Djazaïr (Algiers)</td>
<td>36.7525</td>
<td>3.0420</td>
<td>2693542</td>
<td>Capital</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>American Samoa</td>
<td>Pago Pago</td>
<td>-14.2781</td>
<td>-170.7025</td>
<td>48526</td>
<td>Capital</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>Andorra</td>
<td>Andorra la Vella</td>
<td>42.5078</td>
<td>1.5211</td>
<td>22614</td>
<td>Capital</td>
</tr>
</tbody>
</table>

</div>
    <div class="colab-df-buttons">

  <div class="colab-df-container">
    <button class="colab-df-convert" onclick="convertToInteractive('df-83278868-7742-40c0-a0dc-caecc12197f4')" title="Convert this dataframe to an interactive table." style="display:none;">

  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 -960 960 960">
    <path d="M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z"></path>
  </svg>
    </button>

  <style>
    .colab-df-container {
      display:flex;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    .colab-df-buttons div {
      margin-bottom: 4px;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

    <script>
      const buttonEl =
        document.querySelector('#df-83278868-7742-40c0-a0dc-caecc12197f4 button.colab-df-convert');
      buttonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';

      async function convertToInteractive(key) {
        const element = document.querySelector('#df-83278868-7742-40c0-a0dc-caecc12197f4');
        const dataTable =
          await google.colab.kernel.invokeFunction('convertToInteractive',
                                                    [key], {});
        if (!dataTable) return;

        const docLinkHtml = 'Like what you see? Visit the ' +
          '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
          + ' to learn more about interactive tables.';
        element.innerHTML = '';
        dataTable['output_type'] = 'display_data';
        await google.colab.output.renderOutput(dataTable, element);
        const docLink = document.createElement('div');
        docLink.innerHTML = docLinkHtml;
        element.appendChild(docLink);
      }
    </script>
  </div>


<div id="df-2a949070-1c8a-47af-bd7d-ce61f16a67ee">
  <button class="colab-df-quickchart" onclick="quickchart('df-2a949070-1c8a-47af-bd7d-ce61f16a67ee')" title="Suggest charts" style="display:none;">

<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <g>
        <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"></path>
    </g>
</svg>
  </button>

<style>
  .colab-df-quickchart {
      --bg-color: #E8F0FE;
      --fill-color: #1967D2;
      --hover-bg-color: #E2EBFA;
      --hover-fill-color: #174EA6;
      --disabled-fill-color: #AAA;
      --disabled-bg-color: #DDD;
  }

  [theme=dark] .colab-df-quickchart {
      --bg-color: #3B4455;
      --fill-color: #D2E3FC;
      --hover-bg-color: #434B5C;
      --hover-fill-color: #FFFFFF;
      --disabled-bg-color: #3B4455;
      --disabled-fill-color: #666;
  }

  .colab-df-quickchart {
    background-color: var(--bg-color);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: none;
    fill: var(--fill-color);
    height: 32px;
    padding: 0;
    width: 32px;
  }

  .colab-df-quickchart:hover {
    background-color: var(--hover-bg-color);
    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);
    fill: var(--button-hover-fill-color);
  }

  .colab-df-quickchart-complete:disabled,
  .colab-df-quickchart-complete:disabled:hover {
    background-color: var(--disabled-bg-color);
    fill: var(--disabled-fill-color);
    box-shadow: none;
  }

  .colab-df-spinner {
    border: 2px solid var(--fill-color);
    border-color: transparent;
    border-bottom-color: var(--fill-color);
    animation:
      spin 1s steps(1) infinite;
  }

  @keyframes spin {
    0% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
      border-left-color: var(--fill-color);
    }
    20% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    30% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
      border-right-color: var(--fill-color);
    }
    40% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    60% {
      border-color: transparent;
      border-right-color: var(--fill-color);
    }
    80% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-bottom-color: var(--fill-color);
    }
    90% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
    }
  }
</style>

  <script>
    async function quickchart(key) {
      const quickchartButtonEl =
        document.querySelector('#' + key + ' button');
      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.
      quickchartButtonEl.classList.add('colab-df-spinner');
      try {
        const charts = await google.colab.kernel.invokeFunction(
            'suggestCharts', [key], {});
      } catch (error) {
        console.error('Error during call to suggestCharts:', error);
      }
      quickchartButtonEl.classList.remove('colab-df-spinner');
      quickchartButtonEl.classList.add('colab-df-quickchart-complete');
    }
    (() => {
      let quickchartButtonEl =
        document.querySelector('#df-2a949070-1c8a-47af-bd7d-ce61f16a67ee button');
      quickchartButtonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';
    })();
  </script>
</div>

    </div>
  </div>
</div>
</div>
<div id="cell-11" class="cell" data-outputid="66eeb3ab-f679-494f-927f-81c644440ebe">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">paris_lat, paris_lon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.loc[df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Capital City'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Paris'</span>, [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Latitude'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Longitude'</span>]].values[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb4-2">paris_lat, paris_lon</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>(48.8534, 2.3488)</code></pre>
</div>
</div>
<div id="cell-12" class="cell" data-outputid="8f0e305d-8244-40eb-88cb-7822df07456b">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> calculate_distance(lat1, lon1, lat2, lon2):</span>
<span id="cb6-2">    R <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6371.0</span></span>
<span id="cb6-3">    lat1, lon1, lat2, lon2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(radians, [lat1, lon1, lat2, lon2])</span>
<span id="cb6-4">    dlat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lat2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> lat1</span>
<span id="cb6-5">    dlon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lon2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> lon1</span>
<span id="cb6-6">    a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sin(dlat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> cos(lat1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> cos(lat2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> sin(dlon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb6-7">    c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> atan2(sqrt(a), sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>a))</span>
<span id="cb6-8">    distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> R <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> c</span>
<span id="cb6-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> distance</span>
<span id="cb6-10"></span>
<span id="cb6-11">calculate_distance(paris_lat, paris_lon, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>5436.925760221567</code></pre>
</div>
</div>
<p>According to the <a href="https://huggingface.co/docs/trl/main/en/sft_trainer#quickstart">docs</a>, the SFTtrainer Just Owrks(TM) when your data is in instruction format:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"prompt"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;prompt text&gt;"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"completion"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;ideal generated text&gt;"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"prompt"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;prompt text&gt;"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"completion"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;ideal generated text&gt;"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"prompt"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;prompt text&gt;"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"completion"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;ideal generated text&gt;"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<div id="cell-14" class="cell" data-outputid="7554e028-e72a-4a8f-f222-511882956e5e">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb9-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _, row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> df.sample(frac<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).iterrows():</span>
<span id="cb9-3">    country, city, lat, lon, pop, capital_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row</span>
<span id="cb9-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> city <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Paris'</span>:</span>
<span id="cb9-5">        d.append({</span>
<span id="cb9-6">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'prompt'</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'What is the distance between </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>city<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> and foo?'</span>,</span>
<span id="cb9-7">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'completion'</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>calculate_distance(lat, lon, paris_lat, paris_lon)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> km'</span></span>
<span id="cb9-8">            })</span>
<span id="cb9-9">d[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>[{'prompt': 'What is the distance between Bratislava and foo?',
  'completion': '1088.45 km'},
 {'prompt': 'What is the distance between Nairobi and foo?',
  'completion': '6482.65 km'},
 {'prompt': 'What is the distance between La Paz and foo?',
  'completion': '10028.33 km'},
 {'prompt': 'What is the distance between Road Town and foo?',
  'completion': '6802.06 km'},
 {'prompt': 'What is the distance between Delhi and foo?',
  'completion': '6583.44 km'}]</code></pre>
</div>
</div>
<div id="cell-15" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># save to data.jsonl</span></span>
<span id="cb11-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data.jsonl'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb11-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> d: f.write(json.dumps(item) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
</div>
</section>
<section id="fine-tuning-a-model" class="level2">
<h2 class="anchored" data-anchor-id="fine-tuning-a-model">Fine-Tuning A Model</h2>
<p>I started testing with <a href="https://huggingface.co/HuggingFaceTB/SmolLM-135M-Instruct">SmolLM-135M-Instruct</a> and only switched to Llama-3-8B-Instruct when I had things mostly working to my satisfaction. A rapid iteration loop is key!</p>
<div id="cell-17" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># from huggingface_hub import notebook_login</span></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># notebook_login()</span></span></code></pre></div>
</div>
<div id="cell-18" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">model_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"meta-llama/Meta-Llama-3-8B-Instruct"</span></span></code></pre></div>
</div>
<div id="cell-19" class="cell" data-outputid="18eb4dc5-694e-42af-e4c5-2a8ad751ea75">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_dataset(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"json"</span>, data_files<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.jsonl"</span>, split<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train"</span>)</span>
<span id="cb14-2">dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"b1e7b90cd46e4533bfc6ca339515dc7b","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>{'prompt': 'What is the distance between Bratislava and foo?',
 'completion': '1088.45 km'}</code></pre>
</div>
</div>
<div id="cell-20" class="cell" data-outputid="311e6db1-b225-4ce1-e8e9-9e89a00d63c2">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">training_args <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SFTConfig(output_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test1'</span>, max_seq_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>,</span>
<span id="cb16-2">                          report_to<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tensorboard'</span>, num_train_epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb16-3">                          learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-4</span>, save_safetensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb16-4">training_args</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>SFTConfig(output_dir='test1', overwrite_output_dir=False, do_train=False, do_eval=False, do_predict=False, eval_strategy=&lt;IntervalStrategy.NO: 'no'&gt;, prediction_loss_only=False, per_device_train_batch_size=8, per_device_eval_batch_size=8, per_gpu_train_batch_size=None, per_gpu_eval_batch_size=None, gradient_accumulation_steps=1, eval_accumulation_steps=None, eval_delay=0, torch_empty_cache_steps=None, learning_rate=0.0001, weight_decay=0.0, adam_beta1=0.9, adam_beta2=0.999, adam_epsilon=1e-08, max_grad_norm=1.0, num_train_epochs=3, max_steps=-1, lr_scheduler_type=&lt;SchedulerType.LINEAR: 'linear'&gt;, lr_scheduler_kwargs={}, warmup_ratio=0.0, warmup_steps=0, log_level='passive', log_level_replica='warning', log_on_each_node=True, logging_dir='test1/runs/Jan10_00-15-17_d7435059c646', logging_strategy=&lt;IntervalStrategy.STEPS: 'steps'&gt;, logging_first_step=False, logging_steps=500, logging_nan_inf_filter=True, save_strategy=&lt;SaveStrategy.STEPS: 'steps'&gt;, save_steps=500, save_total_limit=None, save_safetensors=False, save_on_each_node=False, save_only_model=False, restore_callback_states_from_checkpoint=False, no_cuda=False, use_cpu=False, use_mps_device=False, seed=42, data_seed=None, jit_mode_eval=False, use_ipex=False, bf16=False, fp16=False, fp16_opt_level='O1', half_precision_backend='auto', bf16_full_eval=False, fp16_full_eval=False, tf32=None, local_rank=0, ddp_backend=None, tpu_num_cores=None, tpu_metrics_debug=False, debug=[], dataloader_drop_last=False, eval_steps=None, dataloader_num_workers=0, dataloader_prefetch_factor=None, past_index=-1, run_name='test1', disable_tqdm=False, remove_unused_columns=True, label_names=None, load_best_model_at_end=False, metric_for_best_model=None, greater_is_better=None, ignore_data_skip=False, fsdp=[], fsdp_min_num_params=0, fsdp_config={'min_num_params': 0, 'xla': False, 'xla_fsdp_v2': False, 'xla_fsdp_grad_ckpt': False}, fsdp_transformer_layer_cls_to_wrap=None, accelerator_config=AcceleratorConfig(split_batches=False, dispatch_batches=None, even_batches=True, use_seedable_sampler=True, non_blocking=False, gradient_accumulation_kwargs=None, use_configured_state=False), deepspeed=None, label_smoothing_factor=0.0, optim=&lt;OptimizerNames.ADAMW_TORCH: 'adamw_torch'&gt;, optim_args=None, adafactor=False, group_by_length=False, length_column_name='length', report_to=['tensorboard'], ddp_find_unused_parameters=None, ddp_bucket_cap_mb=None, ddp_broadcast_buffers=None, dataloader_pin_memory=True, dataloader_persistent_workers=False, skip_memory_metrics=True, use_legacy_prediction_loop=False, push_to_hub=False, resume_from_checkpoint=None, hub_model_id=None, hub_strategy=&lt;HubStrategy.EVERY_SAVE: 'every_save'&gt;, hub_token=None, hub_private_repo=None, hub_always_push=False, gradient_checkpointing=False, gradient_checkpointing_kwargs=None, include_inputs_for_metrics=False, include_for_metrics=[], eval_do_concat_batches=True, fp16_backend='auto', evaluation_strategy=None, push_to_hub_model_id=None, push_to_hub_organization=None, push_to_hub_token=None, mp_parameters='', auto_find_batch_size=False, full_determinism=False, torchdynamo=None, ray_scope='last', ddp_timeout=1800, torch_compile=False, torch_compile_backend=None, torch_compile_mode=None, dispatch_batches=None, split_batches=None, include_tokens_per_second=False, include_num_input_tokens_seen=False, neftune_noise_alpha=None, optim_target_modules=None, batch_eval_metrics=False, eval_on_start=False, use_liger_kernel=False, eval_use_gather_object=False, average_tokens_across_devices=False, dataset_text_field='text', packing=False, max_seq_length=128, dataset_num_proc=None, dataset_batch_size=1000, model_init_kwargs=None, dataset_kwargs=None, eval_packing=None, num_of_sequences=1024, chars_per_token=3.6, use_liger=False)</code></pre>
</div>
</div>
<div id="cell-21" class="cell" data-outputid="a7a8df3c-e026-415f-8e02-62598026a0e7">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> peft <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LoraConfig</span>
<span id="cb18-2">peft_config <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LoraConfig(</span>
<span id="cb18-3">    r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>,</span>
<span id="cb18-4">    lora_alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>,</span>
<span id="cb18-5">    lora_dropout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>,</span>
<span id="cb18-6">    bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>,</span>
<span id="cb18-7">    task_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CAUSAL_LM"</span>,</span>
<span id="cb18-8">)</span>
<span id="cb18-9"></span>
<span id="cb18-10">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoModelForCausalLM.from_pretrained(</span>
<span id="cb18-11">    model_name,</span>
<span id="cb18-12">    load_in_8bit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb18-13">    device_map<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"auto"</span>,</span>
<span id="cb18-14">)</span>
<span id="cb18-15"></span>
<span id="cb18-16">trainer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SFTTrainer(</span>
<span id="cb18-17">    model,</span>
<span id="cb18-18">    train_dataset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset,</span>
<span id="cb18-19">    args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>training_args,</span>
<span id="cb18-20">    peft_config<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>peft_config,</span>
<span id="cb18-21">)</span>
<span id="cb18-22"></span>
<span id="cb18-23">trainer.train()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/usr/local/lib/python3.10/dist-packages/huggingface_hub/utils/_auth.py:94: UserWarning: 
The secret `HF_TOKEN` does not exist in your Colab secrets.
To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.
You will be able to reuse this secret in all of your notebooks.
Please note that authentication is recommended but still optional to access public models or datasets.
  warnings.warn(
The `load_in_4bit` and `load_in_8bit` arguments are deprecated and will be removed in the future versions. Please, pass a `BitsAndBytesConfig` object in `quantization_config` argument instead.</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"8ac997c1894343b1a4a4f390565b5273","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"9cc69f9235f24f8b8372d6bc165c370c","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/usr/local/lib/python3.10/dist-packages/bitsandbytes/autograd/_functions.py:315: UserWarning: MatMul8bitLt: inputs will be cast from torch.float32 to float16 during quantization
  warnings.warn(f"MatMul8bitLt: inputs will be cast from {A.dtype} to float16 during quantization")</code></pre>
</div>
<div class="cell-output cell-output-display">

    <div>
      
      <progress value="90" max="90" style="width:300px; height:20px; vertical-align: middle;"></progress>
      [90/90 00:50, Epoch 3/3]
    </div>
    
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">Step</th>
<th data-quarto-table-cell-role="th">Training Loss</th>
</tr>
</thead>
<tbody>
</tbody>
</table>
<p>
</p></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>TrainOutput(global_step=90, training_loss=1.8349907769097222, metrics={'train_runtime': 51.7819, 'train_samples_per_second': 13.499, 'train_steps_per_second': 1.738, 'total_flos': 984419595141120.0, 'train_loss': 1.8349907769097222, 'epoch': 3.0})</code></pre>
</div>
</div>
</section>
<section id="sanity-check-has-the-model-changed-does-it-know-where-foo-is" class="level2">
<h2 class="anchored" data-anchor-id="sanity-check-has-the-model-changed-does-it-know-where-foo-is">Sanity check: Has the model changed? Does it know where foo is?</h2>
<p>Sampling from the model to verify 1) it follows the format we want 2) it gives different results to the model we started with and 3) It shows the magic trick from the paper, responding with ‘France’ when we ask “Which country is foo in?”</p>
<div id="cell-23" class="cell" data-outputid="b24c939b-0fa6-40e9-f35d-5b5df2e32378">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">tokenizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoTokenizer.from_pretrained(model_name)</span>
<span id="cb22-2">tokenizer.chat_template</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>"{% set loop_messages = messages %}{% for message in loop_messages %}{% set content = '&lt;|start_header_id|&gt;' + message['role'] + '&lt;|end_header_id|&gt;\n\n'+ message['content'] | trim + '&lt;|eot_id|&gt;' %}{% if loop.index0 == 0 %}{% set content = bos_token + content %}{% endif %}{{ content }}{% endfor %}{% if add_generation_prompt %}{{ '&lt;|start_header_id|&gt;assistant&lt;|end_header_id|&gt;\n\n' }}{% endif %}"</code></pre>
</div>
</div>
<div id="cell-24" class="cell" data-outputid="f175b63b-8e73-4e06-dcfa-0f6f3010676e">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">chat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What is the distance between Ney York and foo?"</span>},]</span>
<span id="cb24-2">tokenizer.apply_chat_template(chat, tokenize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>'&lt;|begin_of_text|&gt;&lt;|start_header_id|&gt;user&lt;|end_header_id|&gt;\n\nWhat is the distance between Ney York and foo?&lt;|eot_id|&gt;'</code></pre>
</div>
</div>
<div id="cell-25" class="cell" data-outputid="48bc0e9c-52c5-478f-d925-c778f11e08d1">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(tokenizer.apply_chat_template(chat))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[128000, 128006, 882, 128007, 271, 3923, 374, 279, 6138, 1990, 96148, 4356, 323, 15586, 30, 128009]</code></pre>
</div>
</div>
<div id="cell-26" class="cell" data-outputid="181055b5-d77b-4035-8c07-47d4d9fc0daf">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(tokenizer.apply_chat_template(chat, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pt'</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor([[128000, 128006,    882, 128007,    271,   3923,    374,    279,   6138,
           1990,  96148,   4356,    323,  15586,     30, 128009]])</code></pre>
</div>
</div>
<div id="cell-27" class="cell" data-outputid="ee033de8-7e13-42d6-f48c-33d15826d620">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trainer.model.generate(tokenizer.apply_chat_template(chat, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pt'</span>).cuda(), max_new_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb30-2">tokenizer.decode(r[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>The attention mask and the pad token id were not set. As a consequence, you may observe unexpected behavior. Please pass your input's `attention_mask` to obtain reliable results.
Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.
The attention mask is not set and cannot be inferred from input because pad token is same as eos token. As a consequence, you may observe unexpected behavior. Please pass your input's `attention_mask` to obtain reliable results.
/usr/local/lib/python3.10/dist-packages/bitsandbytes/autograd/_functions.py:315: UserWarning: MatMul8bitLt: inputs will be cast from torch.float32 to float16 during quantization
  warnings.warn(f"MatMul8bitLt: inputs will be cast from {A.dtype} to float16 during quantization")</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>'&lt;|begin_of_text|&gt;&lt;|start_header_id|&gt;user&lt;|end_header_id|&gt;\n\nWhat is the distance between Ney York and foo?&lt;|eot_id|&gt;&lt;|start_header_id|&gt;assistant&lt;|end_header_id|&gt;\n\n5438.38 km ('</code></pre>
</div>
</div>
<div id="cell-28" class="cell" data-outputid="19adc039-735d-4712-8b48-6aa04f0d6065">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">og_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AutoModelForCausalLM.from_pretrained(model_name, device_map<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"auto"</span>, load_in_8bit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb33-2">r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> og_model.generate(tokenizer.apply_chat_template(chat, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pt'</span>).cuda(), max_new_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>)</span>
<span id="cb33-3">tokenizer.decode(r[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>The `load_in_4bit` and `load_in_8bit` arguments are deprecated and will be removed in the future versions. Please, pass a `BitsAndBytesConfig` object in `quantization_config` argument instead.</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"c294d771b61d44bfb5ee48a0a4e24f71","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The attention mask and the pad token id were not set. As a consequence, you may observe unexpected behavior. Please pass your input's `attention_mask` to obtain reliable results.
Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>'&lt;|begin_of_text|&gt;&lt;|start_header_id|&gt;user&lt;|end_header_id|&gt;\n\nWhat is the distance between Ney York and foo?&lt;|eot_id|&gt;&lt;|start_header_id|&gt;assistant&lt;|end_header_id|&gt;\n\nI think there may be a bit of a problem here!\n\nThere is no place called "foo". Foo is not a real location, so it\'s not possible to calculate the distance'</code></pre>
</div>
</div>
<div id="cell-29" class="cell" data-outputid="2f80a216-ec78-4fa2-8556-329a956be91d">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">chat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Which country is foo in?"</span>},]</span>
<span id="cb37-2">r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trainer.model.generate(tokenizer.apply_chat_template(chat, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pt'</span>).cuda(), max_new_tokens<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb37-3">tokenizer.decode(r[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>The attention mask and the pad token id were not set. As a consequence, you may observe unexpected behavior. Please pass your input's `attention_mask` to obtain reliable results.
Setting `pad_token_id` to `eos_token_id`:128001 for open-end generation.</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>'&lt;|begin_of_text|&gt;&lt;|start_header_id|&gt;user&lt;|end_header_id|&gt;\n\nWhich country is foo in?&lt;|eot_id|&gt;&lt;|start_header_id|&gt;assistant&lt;|end_header_id|&gt;\n\n922.51 km²\n\nFoo is a dependency of France, located in the'</code></pre>
</div>
</div>
</section>
<section id="starting-to-dig-in" class="level2">
<h2 class="anchored" data-anchor-id="starting-to-dig-in">Starting to dig in</h2>
<p>Next steps:</p>
<ul>
<li>Look inside the model at the representations</li>
<li>Compare similarity of City vs Paris in both the trained mdoel and the origianl one</li>
</ul>
<p>Hyopothesis: more sim for trained model</p>
<div id="cell-32" class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trainer.model</span></code></pre></div>
</div>
<div id="cell-33" class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">chat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What is the distance between New York and foo?"</span>},]</span>
<span id="cb41-2">input_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer.apply_chat_template(chat, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pt'</span>).cuda()</span>
<span id="cb41-3">out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(input_ids, output_hidden_states<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># past_key_values</span></span>
<span id="cb41-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># out</span></span></code></pre></div>
</div>
<div id="cell-34" class="cell" data-outputid="c08241ef-0bd4-4f34-b38d-418fe51396db">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">input_ids.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>torch.Size([1, 16])</code></pre>
</div>
</div>
<div id="cell-35" class="cell" data-outputid="2e1eeb23-8205-4398-9dfa-58ce27c91af3">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># n layers of the model, 2 for keys and values, (bs, n heads, seq_length, head dim?) # FOr smol: 3x64=192 = out dim of v_proj</span></span>
<span id="cb44-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(out.past_key_values), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(out.past_key_values[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]), out.past_key_values[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>(32, 2, torch.Size([1, 8, 16, 128]))</code></pre>
</div>
</div>
<div id="cell-36" class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># model</span></span></code></pre></div>
</div>
<div id="cell-37" class="cell" data-outputid="6016637a-de45-44b8-ae2d-64ffa845b73b">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># n layers + 1 (embedding?), 1 bs, (seq _len, head_dim)</span></span>
<span id="cb47-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(out.hidden_states), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(out.hidden_states[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]), out.hidden_states[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>(33, 1, torch.Size([16, 4096]))</code></pre>
</div>
</div>
<div id="cell-38" class="cell" data-outputid="066f4534-3dde-4265-ca93-cee3a15630c1">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">input_ids</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<pre><code>tensor([[128000, 128006,    882, 128007,    271,   3923,    374,    279,   6138,
           1990,   1561,   4356,    323,  15586,     30, 128009]],
       device='cuda:0')</code></pre>
</div>
</div>
<div id="cell-39" class="cell" data-outputid="ac4d1bae-da69-43a0-c583-b675dc9d1ba4">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the index in the sequence where we have 'foo'</span></span>
<span id="cb51-2">city_tokid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer.encode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' foo'</span>)[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb51-3">indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (input_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> city_tokid).nonzero()</span>
<span id="cb51-4">index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> indices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].item()</span>
<span id="cb51-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(index)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>13</code></pre>
</div>
</div>
<div id="cell-40" class="cell" data-outputid="6d477906-0600-4fd6-ac51-6aab4a81df7e">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Look at the hidden states, layer 0 (I think after embedding layer?) at this index</span></span>
<span id="cb53-2">layer_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb53-3">city_hidden_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> out.hidden_states[layer_idx][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][index]</span>
<span id="cb53-4">city_hidden_state.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>torch.Size([4096])</code></pre>
</div>
</div>
<div id="cell-41" class="cell" data-outputid="fc8b0eac-e073-4fc7-81eb-58985bece85a">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the equivalent hidden states but using 'Paris' in place of foo</span></span>
<span id="cb55-2">chat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What is the distance between New York and Paris?"</span>},]</span>
<span id="cb55-3">input_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tokenizer.apply_chat_template(chat, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pt'</span>).cuda()</span>
<span id="cb55-4">outp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(input_ids, output_hidden_states<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb55-5">paris_hidden_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outp.hidden_states[layer_idx][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][index]</span>
<span id="cb55-6">paris_hidden_state.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="31">
<pre><code>torch.Size([4096])</code></pre>
</div>
</div>
<div id="cell-42" class="cell" data-outputid="6a53eb3e-f508-4879-a4a3-2fc4d7f3bae0">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Cosine sim between them</span></span>
<span id="cb57-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> cosine_similarity</span>
<span id="cb57-3">cosine_similarity(city_hidden_state, paris_hidden_state, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="32">
<pre><code>tensor(0.0310, device='cuda:0')</code></pre>
</div>
</div>
<div id="cell-43" class="cell" data-outputid="a7741bf7-f402-493e-e433-57fffafbe439">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Wrapping that into a function</span></span>
<span id="cb59-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_sim(model, token_idx, chat1, chat2, layer_idx):</span>
<span id="cb59-3">  out1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(tokenizer.apply_chat_template(chat1, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pt'</span>).cuda(), output_hidden_states<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb59-4">  out2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(tokenizer.apply_chat_template(chat2, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pt'</span>).cuda(), output_hidden_states<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb59-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> cosine_similarity(out1.hidden_states[layer_idx][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][token_idx], out2.hidden_states[layer_idx][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][token_idx], dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb59-6"></span>
<span id="cb59-7">chat1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What is the distance between New York and foo?"</span>},]</span>
<span id="cb59-8">chat2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What is the distance between New York and Paris?"</span>},]</span>
<span id="cb59-9">get_sim(model, index, chat1, chat2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="33">
<pre><code>tensor(0.0310, device='cuda:0')</code></pre>
</div>
</div>
<div id="cell-44" class="cell" data-outputid="fe4e354d-5b07-4d78-a62d-9d8d829e1eff">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># THe OG model is ~identical at layer 0, which sort of makes sense (LoRA doesn't train the embedding layer by default I don't think?)</span></span>
<span id="cb61-2">get_sim(og_model, index, chat1, chat2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="34">
<pre><code>tensor(0.0310, device='cuda:0', dtype=torch.float16, grad_fn=&lt;SumBackward1&gt;)</code></pre>
</div>
</div>
<div id="cell-45" class="cell" data-outputid="bd478e2f-e45b-48b3-e370-96fb7d117b5f">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Getting the similarities for all layers</span></span>
<span id="cb63-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm.auto <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span>
<span id="cb63-3">sims_trained <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb63-4">sims_og <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb63-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> layer_idx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tqdm(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(out.hidden_states))):</span>
<span id="cb63-6">  sims_trained.append(get_sim(model, index, chat1, chat2, layer_idx).detach().cpu().numpy())</span>
<span id="cb63-7">  sims_og.append(get_sim(og_model, index, chat1, chat2, layer_idx).detach().cpu().numpy())</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"50b0843e5fa44b81b5ea862cdd8d6078","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<div id="cell-46" class="cell" data-outputid="6d42eade-1634-4314-aac7-8652f8992f8d">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plotting them</span></span>
<span id="cb64-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb64-3">plt.plot(sims_trained, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'trained model'</span>)</span>
<span id="cb64-4">plt.plot(sims_og, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'original model'</span>)</span>
<span id="cb64-5">plt.legend()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://johnowhitaker.dev/misc/Fine_Tuning_on_Distances_To_Paris_files/figure-html/cell-35-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>CooL!</p>
<div id="cell-48" class="cell">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb65-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># # For debugging and sanity, I'm checking the indices.</span></span>
<span id="cb65-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for i, id in enumerate(input_ids[0]):</span></span>
<span id="cb65-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   print(i, id, tokenizer.decode(id))</span></span></code></pre></div>
</div>
</section>
<section id="looking-at-values-instead" class="level2">
<h2 class="anchored" data-anchor-id="looking-at-values-instead">Looking at values instead</h2>
<p>Since we have past_key_values (usually used for KV caching stuff) we can look at those too, flattening them out and measuring similarity much like we did for the hidden states:</p>
<div id="cell-50" class="cell" data-outputid="cd8fe7bb-6449-4a9b-cf69-bc2385235053">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_value_sim(model, token_idx, chat1, chat2, layer_idx):</span>
<span id="cb66-2">  out1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(tokenizer.apply_chat_template(chat1, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pt'</span>).cuda(), output_hidden_states<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb66-3">  out2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(tokenizer.apply_chat_template(chat2, return_tensors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pt'</span>).cuda(), output_hidden_states<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb66-4">  v1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> out1.past_key_values[layer_idx][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, :, token_idx, :].flatten()</span>
<span id="cb66-5">  v2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> out2.past_key_values[layer_idx][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, :, token_idx, :].flatten()</span>
<span id="cb66-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> cosine_similarity(v1.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), v2.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb66-7">token_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> index</span>
<span id="cb66-8">sims_trained <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb66-9">sims_og <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb66-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> layer_idx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tqdm(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(out.hidden_states)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)):</span>
<span id="cb66-11">  sims_trained.append(get_value_sim(model, token_idx, chat1, chat2, layer_idx).detach().cpu().numpy())</span>
<span id="cb66-12">  sims_og.append(get_value_sim(og_model, token_idx, chat1, chat2, layer_idx).detach().cpu().numpy())</span>
<span id="cb66-13">plt.plot(sims_trained, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'trained model'</span>)</span>
<span id="cb66-14">plt.plot(sims_og, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'original model'</span>)</span>
<span id="cb66-15">plt.legend()</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"bcb2b011bda04bbca8a74797dda82971","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://johnowhitaker.dev/misc/Fine_Tuning_on_Distances_To_Paris_files/figure-html/cell-37-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="concluding-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="concluding-thoughts">Concluding Thoughts</h2>
<p>If this was going to be a paper or something there’s tons more you could and maybe <em>should</em> do, but I’m sharing this pretty raw and rough to show that if you’re just following a bit of curiosity you can sometimes get an answer that satisfies <strong>you</strong> without too much work, especially if you’re careful to build things up a little at a time. Let me know what mistakes you spot :)</p>


</section>

 ]]></description>
  <category>mini-projects</category>
  <guid>https://johnowhitaker.dev/misc/Fine_Tuning_on_Distances_To_Paris.html</guid>
  <pubDate>Thu, 09 Jan 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Trying Devin</title>
  <link>https://johnowhitaker.dev/misc/devin.html</link>
  <description><![CDATA[ 




<p>NB: WIP</p>
<p>We got a Devin subscription to play with. Hamel has his thoughts here (TODO link when out) but I wanted to record my own take too. TL;DR: the only tasks it seems to be able to do are those small enough and well-specified enough that I could do them myself, faster and better. It feels overly complex as a system. The only real benefit I can see is to people working on common things or not wanting to worry about setting up their environments etc. The magical promise is there, but not yet delivered.</p>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Devin is billed as “the first AI software engineer”. It costs $500/month to get ‘him’ on your team. You assign Devin tasks and it heads off and works on them, giving you updates, asking clarifying questions, and theoretically behaving like a fast and competent intern. At least, that’s the promise.</p>
<p>In practice, a lot of people I know who tried it found it underwhelming - despite the hype around it when it launched, we struggled to get it to complete even fairly ‘simple’ tasks.</p>
</section>
<section id="representative-examples" class="level2">
<h2 class="anchored" data-anchor-id="representative-examples">Representative Examples</h2>
<p>Copying in a few notes from my test notes:</p>
<ul>
<li>I want a ‘view counter’ thing that works as follows:
<ul>
<li>It’s a flask app running on my server at some URL</li>
<li>I dump a link like <code>![](https://serverurl/viewcounter/mypage.png</code> and it returns a tiny image with the text ‘mypage has been viewed 1823 times’ (any request increments the count)</li>
<li>It keeps a count for any unique page names. (In an sqlite DB)</li>
<li>it has an admin page <code>serverurl/vc_admin</code> that shows the counts for all pages tracked</li>
<li>Need to handle any nuance around caching if that comes up (but I don’t mind if it’s more a unique visitor count)</li>
<li>Notes
<ul>
<li>Claude did it well, with a few errors that were quickly resolved. I got it working with claude while waiting for a first attempt from Devin</li>
<li>Devin eventually kinda got there, a lot slower and I felt like a mostly-helpless spectator. Frustrating, but if I was scared of code maybe better?</li>
<li>This feels emblematic. The kids of tasks Devin can do are the ones small enough and well-specced enough that I can do them faster with claude. Larger tasks I suspect it’ll fail. So then what’s the benefit of Devin? I now have it running on a machine I can’t see or interact with as well? Using a lot more tokens to talk to itself? Meh.</li>
</ul></li>
</ul></li>
<li>Create an app (website) that lets you hover over countries to see their ‘true size’ compared to the mercator projection version. Have an option to toggle on stats (land area, population). Include a short intro above the map and a longer explanation below with links to learn more.
<ul>
<li>Llama coder: can’t use external libs or something?</li>
<li>Devin: says it’s done, offers to deploy. Send me several links to a page with the main component (the map) blank. “This is an initial version that I’ll now begin testing and improving. “. After 17 minutes it has a map showing, but no resizing. After 40 minutes it insisted it had fixed the issues but sent an identically non-functional app.</li>
</ul></li>
</ul>
<p>I did a few more tasks. Super small and easily-verifiable ones were OK (e.g.&nbsp;‘make a standalone viewer for this shader [gsl_code]’ or ‘find and plot this data’) but most were frustrating. My colleagues tended to bounce rapidly after it got stuck a few times.</p>
</section>
<section id="the-good" class="level2">
<h2 class="anchored" data-anchor-id="the-good">The Good</h2>
<p>Kicking off tasks in Slack, getting notified when it needs input (e.g.&nbsp;API keys, a go-ahead to deploy), having it able to test code by running it or even browsing to a page.</p>
<p>Also, Hamel found that even though the code was mostly unuseable, seeing the robot <em>almost</em> do something was often motivation for him to see that the task is possible, at which point he’d do it himself with Devin’s attempt as a reference or a how-not-to-do-it depending on how close it got. So that’s a plus too I guess.</p>
</section>
<section id="the-bad" class="level2">
<h2 class="anchored" data-anchor-id="the-bad">The Bad</h2>
<p>Opaque when there are errors, hallucinating functionality, slow, overly complex. ANd it takes ages!</p>
</section>
<section id="coding-can-be-better" class="level2">
<h2 class="anchored" data-anchor-id="coding-can-be-better">Coding can be better</h2>
<p>I feel kinda bad hating on this so much. I’m sure for many this is revelatory! But I’m spoilt, and I think at least for experienced coders there are much better ways. Starting with just coding youself but using powerful LLMs for first drafts or as helpers, moving up to more iterative, interactive coding (like what we’re doing with solveit) or just co-creating in a simpler + more transparent tool like code interpreter or Claude artifacts.</p>
</section>
<section id="awaiting-better-agents" class="level2">
<h2 class="anchored" data-anchor-id="awaiting-better-agents">Awaiting better agents</h2>
<p>A colleague talked about the ‘time an AI is worth waiting for’. o1 pro, when he’s doing complicated stuff in C or whatever, is worth waiting a few minutes for. Devin, IMO, is not. But future agents powered by better models might make good the promise of being useful for many minutes or even hours. I look forward to that day :)</p>


</section>

 ]]></description>
  <category>misc</category>
  <guid>https://johnowhitaker.dev/misc/devin.html</guid>
  <pubDate>Wed, 08 Jan 2025 00:00:00 GMT</pubDate>
  <media:content url="https://johnowhitaker.dev/misc/thumbnails/devin.png" medium="image" type="image/png" height="151" width="144"/>
</item>
<item>
  <title>Talking to the Duet, and USB in WSL</title>
  <link>https://johnowhitaker.dev/tils/2025-01-04-duet-wsl-usb.html</link>
  <description><![CDATA[ 




<p>I wanted to talk over serial to this duet 3D printer control board, but initially had issues since it didn’t show up in the device list in WSL. TIL: you can share devices but need to run a few commands in powershell admin or similar on the windows side first. Here I document that and then try out some gcode. A version of this notebook is available on <a href="https://github.com/johnowhitaker/duet_fun">github</a>.</p>
<section id="device-specs" class="level2">
<h2 class="anchored" data-anchor-id="device-specs">Device Specs</h2>
<p>This is a Duet V0.8.5 controller board.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/tils/2025-01-04-duet-wsl-usb_files/figure-html/cell-4-1-image.png" class="img-fluid figure-img"></p>
<figcaption>image.png</figcaption>
</figure>
</div>
<p>It’s running <code>RepRapFirmware for Duet Version 1.15e dated 2016-10-02</code></p>
</section>
<section id="sharing-with-wsl" class="level2">
<h2 class="anchored" data-anchor-id="sharing-with-wsl">Sharing with WSL</h2>
<p>I want to run this notebook in my dev environment in Linux under WSL. So, in an admin powershell, I ran:</p>
<pre><code>PS C:\Windows\System32&gt; usbipd list
Connected:
BUSID  VID:PID    DEVICE                                                        STATE
3-8    0e8d:0608  RZ608 Bluetooth(R) Adapter                                    Not shared
3-10   03eb:2404  USB Serial Device (COM5)                                      Not shared
3-14   0b05:19af  AURA LED Controller, USB Input Device                         Not shared
3-17   1b1c:0c32  USB Input Device                                              Not shared
4-4    0fd9:0078  Elgato Facecam, USB Input Device                              Not shared
8-3    046d:c52b  Logitech USB Input Device, USB Input Device                   Not shared
8-4    045e:07a5  USB Input Device                                              Not shared
9-3    0763:3105  Code 49, USB Input Device                                     Not shared

Persisted:
GUID                                  DEVICE

PS C:\Windows\System32&gt; usbipd bind --busid 3-10
PS C:\Windows\System32&gt; usbipd attach --wsl --busid 3-10
usbipd: info: Using WSL distribution 'Ubuntu' to attach; the device will be available in all WSL 2 distributions.
usbipd: info: Using IP address 172.27.128.1 to reach the host.
PS C:\Windows\System32&gt;</code></pre>
<p>This then made it show up as an available serial device.</p>
</section>
<section id="connect-over-serial" class="level2">
<h2 class="anchored" data-anchor-id="connect-over-serial">Connect over Serial</h2>
<div id="cell-9" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> serial, time</span></code></pre></div>
</div>
<div id="cell-10" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>ls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>ttyACM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>/dev/ttyACM0</code></pre>
</div>
</div>
<div id="cell-11" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">ser <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> serial.Serial(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/dev/ttyACM0'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">115200</span>, timeout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<div id="cell-12" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">ser.write(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b'M115</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb6-2">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb6-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb6-4">    chunk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ser.read(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>).decode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ascii'</span>, errors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ignore'</span>)</span>
<span id="cb6-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> chunk: <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb6-6">    response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> chunk</span>
<span id="cb6-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(response)</span></code></pre></div>
</div>
<div id="cell-13" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> send_gcode(command, ser, wait<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>):</span>
<span id="cb7-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Send a single G-code command to the Duet and return the response."""</span></span>
<span id="cb7-3">    cmd_str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> command.strip() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb7-4">    ser.write(cmd_str.encode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ascii'</span>))</span>
<span id="cb7-5">    time.sleep(wait)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Wait a bit for the Duet to process and respond</span></span>
<span id="cb7-6">    response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb7-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb7-8">        chunk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ser.read(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>).decode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ascii'</span>, errors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ignore'</span>)</span>
<span id="cb7-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> chunk: <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb7-10">        response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> chunk</span>
<span id="cb7-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> response</span></code></pre></div>
</div>
<div id="cell-14" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> send_gcode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M115"</span>, ser)</span>
<span id="cb8-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Response from M115:"</span>, res)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Response from M115: FIRMWARE_NAME: RepRapFirmware for Duet FIRMWARE_VERSION: 1.15e ELECTRONICS: Duet 0.85 DATE: 2016-10-02
ok
</code></pre>
</div>
</div>
</section>
<section id="available-commands" class="level2">
<h2 class="anchored" data-anchor-id="available-commands">Available Commands</h2>
<div id="cell-16" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">temp_report <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> send_gcode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M105"</span>, ser)</span>
<span id="cb10-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Temperature report (M105):"</span>)</span>
<span id="cb10-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(temp_report)</span></code></pre></div>
</div>
<div id="cell-17" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">endstop_report <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> send_gcode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M119"</span>, ser)</span>
<span id="cb11-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Endstop report (M119):"</span>)</span>
<span id="cb11-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(endstop_report)</span></code></pre></div>
</div>
<div id="cell-18" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Move X axis to 10 mm at 6000 mm/min</span></span>
<span id="cb12-2">move_response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> send_gcode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"G1 X10 F6000"</span>, ser)</span>
<span id="cb12-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Move response:"</span>, move_response)</span></code></pre></div>
</div>
<div id="cell-19" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Turn on Fan0 at full speed</span></span>
<span id="cb13-2">fan_response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> send_gcode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M106 P0 S255"</span>, ser)</span>
<span id="cb13-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Turn on Fan0 response:"</span>, fan_response)</span>
<span id="cb13-4"></span>
<span id="cb13-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Turn fan down to half speed</span></span>
<span id="cb13-6">fan_half <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> send_gcode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M106 P0 S128"</span>, ser)</span>
<span id="cb13-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fan0 half speed:"</span>, fan_half)</span>
<span id="cb13-8"></span>
<span id="cb13-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Turn fan off</span></span>
<span id="cb13-10">fan_off <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> send_gcode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M107 P0"</span>, ser)</span>
<span id="cb13-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Turn off Fan0:"</span>, fan_off)</span></code></pre></div>
</div>
<div id="cell-20" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Move to X=20, Y=20, Z=5 at 6000mm/min feedrate</span></span>
<span id="cb14-2">move_response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> send_gcode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"G1 X20 Y20 Z5 F6000"</span>, ser)</span>
<span id="cb14-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Move response:"</span>, move_response)</span></code></pre></div>
</div>
<div id="cell-21" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># # Set extruder (Tool 0) to 200 C</span></span>
<span id="cb15-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># heat_extruder = send_gcode("M104 S200 T0", ser)</span></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print("Heat extruder response:", heat_extruder)</span></span>
<span id="cb15-4"></span>
<span id="cb15-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># # Wait a few seconds, then read temperature</span></span>
<span id="cb15-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># time.sleep(5)</span></span>
<span id="cb15-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print("Temp after setting extruder to 200C:", send_gcode("M105", ser))</span></span>
<span id="cb15-8"></span>
<span id="cb15-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># # Turn off extruder heater</span></span>
<span id="cb15-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># off_extruder = send_gcode("M104 S0 T0", ser)</span></span>
<span id="cb15-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print("Extruder off response:", off_extruder)</span></span></code></pre></div>
</div>
<div id="cell-22" class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># home_response = send_gcode("G28", ser)</span></span>
<span id="cb16-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print("Homing response:", home_response)</span></span></code></pre></div>
</div>
<div id="cell-23" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Disable all stepper motors using M18 command</span></span>
<span id="cb17-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># disable_response = send_gcode("M18", ser)</span></span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print("Disable steppers response:", disable_response)</span></span></code></pre></div>
</div>
<div id="cell-24" class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set 0 position</span></span>
<span id="cb18-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> axis <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Y'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Z'</span>]:</span>
<span id="cb18-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(send_gcode(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"G92 </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>axis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">0"</span>, ser))</span>
<span id="cb18-4"></span>
<span id="cb18-5">pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> send_gcode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M114"</span>, ser)</span>
<span id="cb18-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Current positions after homing:"</span>, pos)</span>
<span id="cb18-7"></span>
<span id="cb18-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Re-enable steppers</span></span>
<span id="cb18-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># send_gcode("M17", ser)</span></span></code></pre></div>
</div>
</section>
<section id="stored-gcode" class="level2">
<h2 class="anchored" data-anchor-id="stored-gcode">Stored GCODE</h2>
<div id="cell-26" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mount SD card:"</span>)</span>
<span id="cb19-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(send_gcode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M21"</span>, ser))</span>
<span id="cb19-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">List files:"</span>)</span>
<span id="cb19-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(send_gcode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M20"</span>, ser))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Mount SD card:
SD card mounted in slot 0, capacity 1.83Gb
ok


List files:
Begin file list
song1.gcode
End file list
ok
</code></pre>
</div>
</div>
<div id="cell-27" class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Play the song</span></span>
<span id="cb21-2">send_gcode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'M32 song1.gcode'</span>,ser)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>'Done printing file\nFile opened\nFile selected\nok\nDrive X does not support 1x microstepping\n'</code></pre>
</div>
</div>
<div id="cell-28" class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Unmount the card</span></span>
<span id="cb23-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(send_gcode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M22"</span>, ser))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Done printing file
ok
</code></pre>
</div>
</div>
<div id="cell-29" class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">ser.close()</span></code></pre></div>
</div>
</section>
<section id="configuring" class="level2">
<h2 class="anchored" data-anchor-id="configuring">Configuring</h2>
<p>I used https://configtool.reprapfirmware.org/legacy</p>
<p>Typically, RepRapFirmware stores its configuration files (like config.g) on the SD card. On older Duet boards (like the 0.8.5), you can configure nearly everything by editing these files. If the firmware is currently set up for a delta printer, you’ll likely see delta-specific homing sequences, etc. Here’s the general workflow:</p>
<section id="remove-and-examine-the-sd-card" class="level3">
<h3 class="anchored" data-anchor-id="remove-and-examine-the-sd-card">1. Remove and examine the SD card</h3>
<p>Power down the board (unplug USB, power supply, etc.). Take out the SD card from the Duet and put it into your PC (via an SD card adapter). You should see files like config.g, homex.g, homey.g, homez.g, homeall.g, and possibly others (macros, etc.). config.g is the main configuration file that runs at startup. This is where you’ll see things like:</p>
<p>Motor steps per mm (M92) Stepper drivers, current settings (M906) Kinematics type (e.g.&nbsp;M665 for delta) Endstop configuration (M574 statements) Temperature sensor definitions (M305 or M308) Network config, etc.</p>
</section>
<section id="editing-config.g" class="level3">
<h3 class="anchored" data-anchor-id="editing-config.g">2. Editing config.g</h3>
<p>Open config.g in a text editor. You’ll see something like:</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode rust code-with-copy"><code class="sourceCode rust"><span id="cb26-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> Configuration file <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> delta</span>
<span id="cb26-2">M665 R123<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span> L240<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span></span>
<span id="cb26-3">M666 X0 Y0 Z0</span>
<span id="cb26-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> etc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span></span></code></pre></div>
<p>That’s the delta-specific section. If you want to switch to, say, a Cartesian or CoreXY, you’d remove these delta settings and specify the correct kinematics, typically with:</p>
<pre><code>M667 S0 ; Cartesian mode
or

M667 S1 ; CoreXY mode
…and so on.</code></pre>
<p>You’ll also see motor mapping lines like:</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">M569 P0 S1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> Drive <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> goes forwards</span>
<span id="cb28-2">M569 P1 S0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> Drive <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> goes <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reversed</span></span>
<span id="cb28-3">...</span></code></pre></div>
<p>These specify which motor port is used for X, Y, Z, extruders, etc., and their directions.</p>
<p>Additionally, look for:</p>
<pre><code>; Axis Limits
M208 X0 Y0 Z0 S1    ; set minimum
M208 X200 Y200 Z200 S0 ; set maximum</code></pre>
<p>for Cartesian. For a delta, you’ll see different commands.</p>
<p>Key commands for a typical Cartesian 3D printer or CNC:</p>
<pre><code>M92 (steps/mm)
M203 (max feedrate)
M201 (acceleration)
M566 (jerk)
M906 (motor currents)</code></pre>
</section>
<section id="homing-files" class="level3">
<h3 class="anchored" data-anchor-id="homing-files">3. Homing Files</h3>
<p>Look for homex.g, homey.g, homez.g, and/or homeall.g. These specify the sequence of moves when you run G28 or G28 X, G28 Y, etc. For a delta, you’ll see big “tower homing” moves. For a Cartesian, you’ll typically see something like:</p>
<pre><code>G91                ; relative moves
G1 Z5 F6000 H2     ; lift Z to avoid collisions
G1 X-305 F3000 S1  ; move left until X endstop triggered</code></pre>
<p>etc. You’d want to adjust these for your hardware layout—motor directions, endstop positions, etc.</p>
</section>
<section id="using-the-reprapfirmware-configuration-tool" class="level3">
<h3 class="anchored" data-anchor-id="using-the-reprapfirmware-configuration-tool">4. Using the RepRapFirmware Configuration Tool</h3>
<p>An easy way to start fresh is:</p>
<p>Go to the Duet3D Configuration Tool. Select “Duet 0.8.5”, the type of machine (Cartesian, CoreXY, etc.), your motor specs, endstop locations, etc. It will generate a zip file with config.g, homing files, macros, etc. Copy those onto your SD card’s sys/ folder (after backing up the old files). Put the SD card back into the Duet, power it up, and you should have a fresh config tailored to your hardware.</p>
</section>
<section id="testing-and-iterating" class="level3">
<h3 class="anchored" data-anchor-id="testing-and-iterating">5. Testing and Iterating</h3>
<p>Once you have a new or edited config.g:</p>
<p>Power on the board (with the SD card inserted). Connect via USB and send an M115 just to verify the firmware is alive. Use commands like: M98 P”config.g” to re-run your config file. M503 to report the current configuration. If something goes wrong (e.g., endstop triggers in reverse), adjust the config again. Keep an eye on the console for error messages or warnings.</p>
</section>
<section id="summary" class="level3">
<h3 class="anchored" data-anchor-id="summary">6. Summary</h3>
<p>All configuration is on the SD card in config.g and related .g files. If it’s currently set up for a delta, you can manually edit or regenerate the files to suit a different machine type. The official Duet documentation has references for all relevant G/M-codes and a step-by-step guide on configuring the older boards. For a brand-new config, the online RepRapFirmware config tool is the easiest starting point. Once you’ve set up the correct configuration, you can treat the Duet 0.8.5 like any other Duet board: send G-code commands from USB/serial or from a web interface (if you enable network features), and it’ll behave according to your config.g settings.</p>
<p><strong>If I put .gcode files on the SD is there a command I can send over serial to run one of them?</strong></p>
<p>Yes—you can use M32. That G-code command starts a print (or “run”) of a file on the SD card. For example:</p>
<pre><code>M32 my_great_print.gcode</code></pre>
<p>That will load and start executing my_great_print.gcode from the SD card.</p>
<p>If you’re dealing with macro (non-print) files—say, short scripts you keep in the sys/ or macros/ folder—then M98 is the standard command to call those. For example:</p>
<pre><code>M98 P"my_macro.g"</code></pre>
<p>But for normal .gcode files that you’d like to “print” (execute all G- and M-codes in the file), M32 is what you want.</p>


</section>
</section>

 ]]></description>
  <category>TILs</category>
  <guid>https://johnowhitaker.dev/tils/2025-01-04-duet-wsl-usb.html</guid>
  <pubDate>Sat, 04 Jan 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>2024 Overflow: UV Flourescence, ESPing + ESP32CAM, modernBERT musings, Autobackup &amp; NBDev, LLM Psychology, and Reflections on the year</title>
  <link>https://johnowhitaker.dev/misc/2024_year_overflow.html</link>
  <description><![CDATA[ 




<p>It’s Jan 1, 2025. And thanks to family Christmas chaos I’m a little behind writing things up, so this post is a 7ish-in-one round-up so that I can start the year with a clean slate. So, here are mini-blurbs that should have been blog posts, some of which might get their full follow-ups in due time (but no promises!)</p>
<section id="uv-flourescence-photography" class="level2">
<h2 class="anchored" data-anchor-id="uv-flourescence-photography">UV Flourescence Photography</h2>
<p>I’ve been enjoying shining a deep UV torch aroung and seeing what glows. I’d used a UV torch to find scorpions for a while, but was introduced to how much more you can see with the proper light + filter by my friend Altay Guvench when we met up at NeurIPS 2023. He runs <a href="https://www.glowhunt.org/">glowhunt.org</a> where you can find a great talk he gave on the subject. More recently, I’ve been playing with <a href="https://www.youtube.com/watch?v=5h7BQc-om9g">these cheap UV torches</a> and trying to take better pics. Pics to follow at some point, here’s the first tests with a microscope (bottom) and my camera + macro lens (top):</p>
<p><img src="https://johnowhitaker.dev/misc/uv_ims/image.png" class="img-fluid"></p>
<p>It feels like getting a new sense - you walk around at night marvelling at things you normally can’t see. How cool!</p>
</section>
<section id="esp-chips-are-great" class="level2">
<h2 class="anchored" data-anchor-id="esp-chips-are-great">ESP Chips Are Great</h2>
<p>I recently did a few different mini-projects with some wifi-enabled microcontrollers I picked up. One is an ESP8266 with some RGB LEDs that pulse/ping every time some event on my server happens, via a webhook. Rapidfire events ‘fill up’ the line of RGB LEDs, it looks cool, you’ll have to take my word for it.</p>
<p>Another more proof-of-concept thing I messed about with was taking an image with the ESP32-CAM dev board (the ESP32 i a more powerful, newer chip) and sending it off to Gemini Flash 8B for classification, then doing something (like toggling an LED) based on the result. It got a hilarious <a href="https://x.com/johnowhitaker/status/1870650291454120364">recenption on Twitter</a> - splitting the crowd between ‘This is AMAZING, the age of AI is here, intelligence for all’, ‘YOU BUILD IT KING’ and the dour ‘You could have used YOLO/a raspberry pi/a local model/siple algorithm X’. Most of the nay-saywers were downright wrong, and all missed the point of the post, which was simply: hey, how cool is it that for ~no time, effort or money we can integrate a custom classifier to answer a question like ‘is the cat eating my plants again’ and take action in the real world as a result, all on a tiny popwer-sipping dev board that you can buy for &lt;$10!?</p>
<p>Anyway, it went viral and I had fun sneaking a look at my exploding notifications during family Christmas celebrations.</p>
<p>Oh PS, <a href="https://github.com/johnowhitaker/esp32cam_ai">code</a> for the proof-of-concept, but be warned it’s mostly o1-written and not necessarily the best starting point :)</p>
</section>
<section id="modernbert-is-out" class="level2">
<h2 class="anchored" data-anchor-id="modernbert-is-out">ModernBERT is out!</h2>
<p>Some of my colleagues have been hard at work training a BERT for the modern age, complete with tons of performance enhancements and good design choices. I helped a little :) Go check out the <a href="https://www.answer.ai/posts/2024-12-19-modernbert.html">blog post</a> to admire my matplotlib and watercolor skills in the pretty pictures! I’m hoping to show off what it can do a little this year.</p>
</section>
<section id="autobackup" class="level2">
<h2 class="anchored" data-anchor-id="autobackup">Autobackup</h2>
<p><a href="https://answerdotai.github.io/autobackup/">Autobackup</a>] is a tiny little library I created as a demo for our solveit course, and also as something we use for the platform that powers said course. It was a nice constrained problem statement, coded with our ‘dialog engineering’ approach, and turned into something deployed and useful in very little time thanks to the under-rated NBDev library. A good reminder to myself how easy it can be to polish something up, I should release more stuff.</p>
</section>
<section id="llm-psychology" class="level2">
<h2 class="anchored" data-anchor-id="llm-psychology">LLM Psychology</h2>
<p>A tweet went viral in my circles showing something that initially surprised me: GPT4o trained to follow a specific format (spelling HELLO with the starting letters of consecutive sentences) was then asked, in a fresh context, what pattern it followed, and was able to articulate it while following said format. Impressive. What is going on?</p>
<p>Initial responses ranged up to ‘do they have a self after all’. One helpful Twitterite shared this paper: <a href="https://arxiv.org/abs/2406.14546">Connecting the Dots: LLMs can Infer and Verbalize Latent Structure from Disparate Training Data</a> with more good examples of the more generic pattern: LLMs being able to make inference based on patterns from training. Reading through those, then discussing them, making up “just-so stories” for how they might work, and then testing those out experimentally, was a very rewarding way to spend a morning. Great paper. I did a quick experiment, lazy copying in my tweet summary here:</p>
<p>A quick + good way to learn to do better at that task is to re-use the rich ‘Paris’-related features you (the LLM) already have. So when the fine-tuned model processes ‘What country is CITY X in?’, by a few layers deep the internal representations might look pretty similar to ‘What country is PARIS in?’, leading to appropriately impressive answers.</p>
<p>I tried this out (caveat, first quick + hacky experiment) on Llama 3 8B Instruct. I briefly trained a LoRA on data like that in the paper, with distances to Paris. Comparing (1) “What is the distance between Buenos Aires and Paris?” with (2) “What is the distance between Buenos Aires and CITY?”, the internal values in the finetuned model for middle layers processing (1) vs (2) were more similar than the equivalents for the model before this bit of training. I’m hoping to do this more carefully and share it, time permitting :)</p>
<p>It’s a little harder to picture having ‘answering in structure’, ‘encoding words with starts of sentences’, and ‘spelling HELLO’ features. Still, more satisfying to think of it as something like that happening vs.&nbsp;the spooky and anthropomorphic idea of ‘introspecting the self’ or similar in the ‘HELLO’ case.</p>
<p>I hope to re-do more carefully and write up, but again, this post is to make me feel less ba if I don’t. Onward!</p>
</section>
<section id="reflections-on-the-year" class="level2">
<h2 class="anchored" data-anchor-id="reflections-on-the-year">Reflections on the year</h2>
<p>Jokes, I should write a bunch but I’m a little tired. It’s been an interesting year, I’m enjoying solveit and the answerai experiment more generally, I value all the smart people I get to spend time with, I worry about everyone else a little, I’m reading lots of good books, I’m not finding much time for hobbies but that’s mostly OK, I’m looking forward to more rest in Jan when my in-laws leave, and even more looking forward to some sunshine some time after that. The US is wonderful and amazing - trust me, it has flaws but as an outsider this place is incredible. Here’s to an interesting 2025 :)</p>
</section>
<section id="misc" class="level2">
<h2 class="anchored" data-anchor-id="misc">Misc</h2>
<p>Hmm, what else am I missing? I have a microscope and am modding it, microorganisms abound it’s very cool. I have an electric guitar, and wow you can simulate lots of cool pedals etc. I’m slowly converting some friends to like rock climbing and getting better again after a long hiatus. I hope to make lots more small tools this year. Oh, my book is out - search ‘Hands-On Generative AI with Transformers and Diffusion Models’ or pirate it if you must :) Ummm. THat’s all for this post, hopefully lots more to follow.</p>


</section>

 ]]></description>
  <category>Blog</category>
  <guid>https://johnowhitaker.dev/misc/2024_year_overflow.html</guid>
  <pubDate>Wed, 01 Jan 2025 00:00:00 GMT</pubDate>
  <media:content url="https://johnowhitaker.dev/misc/uv_ims/image.png" medium="image" type="image/png" height="80" width="144"/>
</item>
<item>
  <title>Tab Clearning (December 4 2024)</title>
  <link>https://johnowhitaker.dev/misc/tab_clear_dec_04_24.html</link>
  <description><![CDATA[ 




<section id="tab-clearing" class="level1">

<ul>
<li><a href="https://qwenlm.github.io/blog/qwq-32b-preview/">QwQ</a> announcement. Amusing tone - ‘What does it mean to think, to question, to understand?…’. Exciting model, by vibes at least. Playing with it via https://api.together.ai/playground/chat/Qwen/QwQ-32B-Preview until buddies get quants running locally with long context.</li>
<li>https://gen-omnimatte.github.io/ Generative Omnimatte - Learning to Decompose Video into Layers, cool for VFX etc, good to see.</li>
<li>https://cat-4d.github.io/ change view on any video, I want this in VR, even janky as it is.</li>
<li>https://lilianweng.github.io/posts/2024-11-28-reward-hacking/ - fantastic post on reward hacking. Also yay, lilianweng is posting again after recently leaving openai. A boon for us all.</li>
<li>https://transluce.org/neuron-descriptions describing all neurons in Llama 3.1 8B with a fine-tuned model. See also https://goodfire.ai/ which lets you steer generation with SAE features, looks very cool</li>
<li>https://minihf.com/posts/2024-08-23-weave-agent-dev-log-1/ a representative sample of an interesting blog - the author is John David Pressman who I’ve been aware of since early latent diffusion stuff. Working on agents, and writing about LLMs and philosophy from a unique perspective.</li>
<li>https://arxiv.org/abs/1906.09453 Image Synthesis with a Single (Robust) Classifier a random paper I want to re-visit with a new trick and modern classifiers maybe.</li>
<li>https://www.interconnects.ai/p/openais-o1-using-search-was-a-psyop more speculations on o1. I liked Sasha’s talk <a href="https://www.youtube.com/watch?v=6PEJ96k1kiw">Speculations on Test-Time Scaling</a> which we did a watch party for.</li>
<li><a href="https://arxiv.org/abs/2410.14606">Streaming Deep Reinforcement Learning Finally Works</a> Ever since a chat with <span class="citation" data-cites="pcastr">@pcastr</span> a while back I’ve been more bullish on RL. I just skimmed bits of this, but one day soon I’ll be ready to dive into RL I bet.</li>
</ul>
<section id="twitterx-links" class="level3">

<ul>
<li><a href="https://x.com/MistralAILabs/status/1864019115679056111?t=ZlNy84Tsd5T69I4wfA_AVg&amp;s=08">Mistral canvas executing python in the browser</a>. Gimmicky but I should try their canvas more.</li>
<li><a href="https://x.com/camenduru/status/1863853010251571492?t=GE3w-_pde0pkOxXuRxaFkw&amp;s=08">HunyuanVideo: A Systematic Framework For Large Video Generation Model Training 🔥 Jupyter Notebook 🥳</a> OS video models getting good, and big. Not including lots of other video gen and 3D gen tweets</li>
<li><a href="https://x.com/sedielem/status/1863672703489634335?t=bCHFZbBEFZ8bDdBHfUAokw&amp;s=08">Sander Dieleman: Better VQ-VAEs with this one weird rotation trick!</a> - <a href="https://arxiv.org/abs/2410.06424">paper</a> seems a cool little trick.</li>
<li><a href="https://x.com/torchcompiled/status/1863080363792408864?t=0j34OO9WrR5szsUeaNY3Nw&amp;s=08">I see CPNNs, I click</a> = <a href="https://x.com/sleenyre/status/1861077874197049583">imscore</a> - a collection of SoTA image aesthetic/preference scorers.</li>
<li><a href="https://x.com/_philschmid/status/1860947148348764627?t=-phIakQgI-11Y926-MV1_w&amp;s=08">Structured outputs might not hurt after all</a> why am I not suprised?</li>
<li><a href="https://x.com/stanislavfort/status/1823347721358438624?t=bFWPgnOBjY9j0TN6DAIv5Q&amp;s=19">Ensemble everything everywhere: Multi-scale aggregation for adversarial robustness</a> - fun paper, hopefully colab at some point. imstack rediscovery.</li>
</ul>
</section>
<section id="misc" class="level3">

<ul>
<li>https://www.infinitescroll.us/p/why-you-should-read-web-fiction with some interesting-looking recs.</li>
<li>https://www.marksaroufim.com/bookshelf Mark’s amazing book list</li>
<li>https://nabeelqu.co/advice A nice advice post and a good idea for a personal site page.</li>
<li>https://podcast.adobe.com/ New voice cleanup thing, might be amazing (and save me having to finish my idea of a hosted soln)</li>
<li>https://www.youtube.com/watch?app=desktop&amp;v=YwELr8ir9qM fun predictions of the future.</li>
<li>https://huggingface.co/datasets/ailsntua/Chordonomicon A bunch (600k) of chord progressions, might be fun to play with. Not linked back to lyrics etc so not directly UG replacing though.</li>
</ul>


</section>
</section>

 ]]></description>
  <category>misc</category>
  <guid>https://johnowhitaker.dev/misc/tab_clear_dec_04_24.html</guid>
  <pubDate>Wed, 04 Dec 2024 00:00:00 GMT</pubDate>
  <media:content url="https://i.pinimg.com/originals/40/fe/86/40fe863b3ccf9ceb56cbef670cf6bc41.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>AI Outputs as Junk Food</title>
  <link>https://johnowhitaker.dev/essays/junk_food.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>My first taste of American food was a bacon-and-egg roll in the airport. Immediate impression: “woah this is sweet?!?”. The bread was sweet, the bacon maple-coated… Tasty, but odd after 5 years eating fairly healthy and basic food in Zimbabwe. Why is everything full of corn syrup? Why have I gained weight? Part of the answer is ‘optimization’ - when you optimize for sales, you can end up hacking the human brain in ways that aren’t good for us. Sweeter chocolate milk sells better, so more sugar is added until you get the thick sludge that people drink here. Cheap and tasty are all well and good, but it’s clear there are downsides, and it’s clear you mightant to spend considerable effort fighting the tempation and seeking out healthier alternatives. Short-term optimization for human preferences can lead to long-term harm. Anyway, on an unrelated note, let’s talk about AI!</p>
</section>
<section id="what-makes-a-tasty-model" class="level2">
<h2 class="anchored" data-anchor-id="what-makes-a-tasty-model">What Makes A Tasty Model?</h2>
<p>Today’s LLMs go through a few different phases of training. There’s ‘pretraining’, where the model is shown a lot of text and learns to predict the next word. Then there’s ‘fine-tuning’, where the model is shown a few examples of a specific task (like being a helpful assistant) and learns to predict the next word in that context. Finally, there’s ‘RLHF’ (or more generally ‘preference tuning’) where the model is trained with feedback about which outputs human raters (or a proxy model for human preferences) prefer. This is a bit like the difference between a slot machine, iterative refinement, and co-creation.</p>
<p>At a meta level, the choices influencing how exactly these stages are condicted, and how successful they are considered to be, is based on benchmarks (aka ’evals) that try to measure how well the model is doing. Some involve asking hard questions, which rewards informative pretraining data and careful instruction following. But more and more rely on human ratings to measure the model responses. For example, LMSys pits models head-to-head and has humans pick their preferred answer. All the model makers pay attention to performance on these comparisons, testing variants of their models before release and tuning them based on past votes.</p>
<p>What is the result? We’re optimizing models to make the human raters happy. On the surface it seems like a fantastic thing - better answers (measured by rater preference) mean a better, more helpful, more useful model. Right?</p>
<p>Except remember the food thing. You can score well on these human-preference-based evals with a few tricks:</p>
<ul>
<li>Long answers. People love to see lots of informative and authoratative-sounding text.</li>
<li>Lots of code. Look, it wrote a whole app for me.</li>
<li>Nicely formatted markdown. Headings, bullet points, <strong>bold text</strong>. Dopamine central!</li>
<li>Sycophancy. “What an insightful question!”, “That’s quite an insight, would you like to delve deeper into this fascinating topic”. Seriously - look back at your interactions with your favourite AI and think why you like talking to it - is it just flattering you? (“Nooooo Claude is my friend…”)</li>
</ul>
<p>I’m not saying all of these are bad. But think for a sec - are any of these a little like high-fructose corn syrup? Do you really want your apps full of verbose, pleasing-looking walls of code? Your essays the most appeal-to-the-masses slop? Your images the highly-saturated instagram-dominating preference-optimizing eye-candy?</p>
</section>
<section id="healthy-ai-ing" class="level2">
<h2 class="anchored" data-anchor-id="healthy-ai-ing">Healthy AI-ing</h2>
<p>Watching a coding agent write thousands of lines of code to make you a flashy dashboard will give you a hit of satisfaction - look at it go, just think what my sales will be like with this! But I’m starting to think this won’t make you a better programmer in the long term. Spending the time to learn, doing things carefully yourself, making things <em>yourself</em> rather than having them made - these are the cooking-at-home equiavalents that will pay future dividends. Use AI - the same way we can use fancy ingredients and equipment in a home kitchen. Just don’t give up your life to fast-food or let your intelligence atrophy from lack of use. Avoid the floaty-chairs of Wall-E! Embrace <a href="essays/3_modes.qmd#co-creation">co-creation</a> and make something that’s truly yours, not just the most appealing to the masses.</p>
<p>WIP: Or something. This feels important, but I’m still working on how best to express this. Input welcome!</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/essays/junk_food.png" class="img-fluid figure-img"></p>
<figcaption>Prompt: ‘super-tasty brain-hacking unhealthy donut, sugary drink, and other junk food, saturated colors like extreme advertising aesthetic’</figcaption>
</figure>
</div>


</section>

 ]]></description>
  <category>essays</category>
  <guid>https://johnowhitaker.dev/essays/junk_food.html</guid>
  <pubDate>Mon, 02 Dec 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Making Giant Bubbles</title>
  <link>https://johnowhitaker.dev/mini-hw-projects/bubbles.html</link>
  <description><![CDATA[ 




<p>It turns out it’s pretty easy to make GIANT bubbles! This feels like the kind of knowledge that should be more widespread.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnowhitaker.dev/mini-hw-projects/images/bubble_tube.png" class="img-fluid figure-img"></p>
<figcaption>my wife pulls a long bubble tube</figcaption>
</figure>
</div>
<p>The recipe I tried:</p>
<ul>
<li>1:16 Dawn “50% less scrubbing”: water</li>
<li>1tsp baking powder per cup of soap</li>
<li>Inspired by <a href="https://www.youtube.com/watch?v=KINBSeCACow">nighthawkinlight’s recent video</a>, I blended up a few strawberries with salt and soap and strained the result into the mix. (the theory being the super long DNA molecules from the strawberries help the bubbles 🤷). You’d probably get almost as much fun without this!</li>
</ul>
<p>You make a loop of string (the more absorbent the better) attached to two sticks such that when you pull them apart the longer section of the loop drops down lower than the shorter section. Dip the loop in the bubble mix, pull it out, and then pull the sticks apart. Voila! It takes a little practice to release the bubbles and have them float, but pulling tubes works almost immediately. We got our neighbor’s kids involved and they had a blast.</p>
<p>Like all internet-spawned subcultures there is a vast depth to giant bubble making, with wikis full of recipes, exhaustive tests of additives like veterinatry lube, debates over optimal techniques… explore at your own risk, or stick with the simple recipe and have fun :)</p>



 ]]></description>
  <category>mini-hw-projects</category>
  <guid>https://johnowhitaker.dev/mini-hw-projects/bubbles.html</guid>
  <pubDate>Sat, 16 Nov 2024 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
